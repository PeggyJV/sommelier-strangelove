[{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/BoringVault/AccountantWithRateProviders.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/BoringVault/ArcticArchitectureLens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/BoringVault/BoringOnChainQueue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/BoringVault/BoringVault.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/BoringVault/TellerWithLayerZero.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarRouterV0815.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarRouterV0816.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarStakingV0815.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarStakingV0821.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarV0815.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarV0816.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarV0821.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/CellarV0821MultiDeposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/EnsoRouter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/GravityBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/MerkleRewards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/PriceRouter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/abi/types/WithdrawQueue.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/AlertDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Apy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/BackgroundAssets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/BreadCrumb.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellarName' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC } from \"react\"\nimport {\n  Breadcrumb as ChBreadcrumb,\n  BreadcrumbItem,\n  BreadcrumbProps,\n} from \"@chakra-ui/react\"\nimport { ArrowLeftIcon, ChevronRightIcon } from \"./_icons\"\nimport { Link } from \"./Link\"\n\ninterface CustomBCProps extends BreadcrumbProps {\n  id: string\n  cellarName?: string\n}\n\nexport const BreadCrumb: FC<CustomBCProps> = ({\n  id,\n  cellarName,\n  ...rest\n}) => {\n  // const router = useRouter()\n  // const asPathWithoutQuery = router.asPath.split(\"?\")[0]\n  // const asPathNestedRoutes = asPathWithoutQuery\n  //   .split(\"/\")\n  //   .filter((v) => v.length > 0)\n\n  return (\n    <ChBreadcrumb\n      separator={\n        <ChevronRightIcon boxSize={3} color=\"neautral.300\" />\n      }\n      {...rest}\n    >\n      <BreadcrumbItem color=\"neutral.300\">\n        <Link\n          href=\"/\"\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap={3}\n        >\n          <ArrowLeftIcon />\n          Back\n        </Link>\n      </BreadcrumbItem>\n\n      {/* {asPathNestedRoutes.map((path, i) => {\n        const hrefSlices = asPathNestedRoutes.slice(0, i + 1)\n        const hrefMap = hrefSlices.map((path) => `/${path}`)\n        const href = hrefMap.join(\"\")\n        const currentPage = href === router.asPath\n        const color = currentPage\n          ? \"neutral.100\"\n          : \"neutral.400\"\n\n        return (\n          <BreadcrumbItem\n            key={i}\n            isCurrentPage={currentPage}\n            color={color}\n          >\n            <BreadcrumbLink href={href}>{path}</BreadcrumbLink>\n          </BreadcrumbItem>\n        )\n      })} */}\n    </ChBreadcrumb>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CardStat.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[364,367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[364,367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'statIcon' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, FC } from \"react\"\nimport {\n  Flex,\n  HStack,\n  StackProps,\n  TextProps,\n  Tooltip,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { CardHeading } from \"./_typography/CardHeading\"\nimport { InformationIcon } from \"./_icons\"\n\ninterface CardStatProps extends StackProps {\n  label?: ReactNode\n  labelProps?: TextProps\n  tooltip?: ReactNode\n  statIcon?: any\n}\n\nexport const CardStat: FC<CardStatProps> = ({\n  label,\n  labelProps,\n  tooltip,\n  statIcon,\n  children,\n  ...rest\n}) => {\n  return (\n    <VStack\n      flex={1}\n      align=\"flex-start\"\n      whiteSpace=\"nowrap\"\n      spacing={0}\n      {...rest}\n    >\n      <Tooltip\n        hasArrow\n        arrowShadowColor=\"purple.base\"\n        label={tooltip}\n        placement=\"top\"\n        color=\"neutral.300\"\n        bg=\"surface.bg\"\n      >\n        <HStack spacing={1} align=\"center\">\n          <CardHeading {...labelProps}>{label}</CardHeading>\n          {tooltip && (\n            <>\n              {\" \"}\n              <InformationIcon color=\"neutral.300\" boxSize={3} />\n            </>\n          )}\n        </HStack>\n      </Tooltip>\n      <HStack spacing={1} align=\"center\">\n        <Flex\n          align=\"center\"\n          whiteSpace=\"break-spaces\"\n          fontSize=\"20px\"\n          fontWeight=\"bold\"\n        >\n          {children}\n        </Flex>\n      </HStack>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CardStatColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CardStatRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CellarStatsAutomated.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CellarStatsYield.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isStakingStillRunning' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'merkleRewardsApy' is assigned a value but never used.","line":59,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC } from \"react\"\nimport {\n  Box,\n  HStack,\n  Spinner,\n  StackProps,\n  Text,\n  Tooltip,\n  useBreakpointValue,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { CardDivider } from \"./_layout/CardDivider\"\nimport { CardHeading } from \"./_typography/CardHeading\"\nimport { InformationIcon } from \"./_icons\"\nimport { Apy } from \"./Apy\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { isFuture } from \"date-fns\"\nimport { apyHoverLabel, apyLabel } from \"data/uiConfig\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\n\n// Define an interface for APY data which includes the optional 'formatted' property\ninterface ApyData {\n  formatted?: string\n}\n\ninterface CellarStatsYieldProps extends StackProps {\n  cellarId: string\n}\n\nexport const CellarStatsYield: FC<CellarStatsYieldProps> = ({\n  cellarId,\n  ...rest\n}) => {\n  const cellarConfig = cellarDataMap[cellarId].config\n  const borderColor = useBreakpointValue({\n    sm: \"transparent\",\n    md: \"neutral.700\",\n  })\n\n  const { data: strategyData, isLoading: isStrategyLoading } =\n    useStrategyData(\n      cellarConfig.cellar.address,\n      cellarConfig.chain.id\n    )\n\n  const tvm = strategyData?.tvm\n  const stakingEnd = strategyData?.stakingEnd\n  const isStakingStillRunning =\n    stakingEnd?.endDate && isFuture(stakingEnd?.endDate)\n  const baseApy: ApyData = strategyData?.baseApy\n    ? (strategyData.baseApy as ApyData)\n    : { formatted: undefined }\n  const rewardsApy: ApyData = strategyData?.rewardsApy\n    ? (strategyData.rewardsApy as ApyData)\n    : { formatted: undefined }\n  const extraRewardsApy: ApyData = strategyData?.extraRewardsApy\n    ? (strategyData.extraRewardsApy as ApyData)\n    : { formatted: undefined }\n  const merkleRewardsApy: number | undefined = strategyData?.merkleRewardsApy\n    ? (strategyData.merkleRewardsApy)\n    : undefined\n\n\n  const baseApySumRewards = strategyData?.baseApySumRewards\n\n  return (\n    <HStack\n      spacing={{ base: 2, md: 8 }}\n      rowGap={4}\n      w={{ base: \"full\", md: \"auto\" }}\n      justifyContent={{ base: \"space-between\", md: \"unset\" }}\n      divider={\n        <CardDivider\n          _last={{\n            borderColor,\n          }}\n        />\n      }\n      {...rest}\n    >\n      <VStack spacing={1} align=\"center\">\n        <Text as=\"span\" fontSize=\"21px\" fontWeight=\"bold\">\n          {tvm ? `${tvm?.formatted}` : <Spinner />}\n        </Text>\n        <Tooltip\n          hasArrow\n          placement=\"top\"\n          label=\"Total value locked\"\n          bg=\"surface.bg\"\n          color=\"neutral.300\"\n        >\n          <HStack spacing={1} align=\"center\">\n            <CardHeading>TVL</CardHeading>\n            <InformationIcon color=\"neutral.300\" boxSize={3} />\n          </HStack>\n        </Tooltip>\n      </VStack>\n      {baseApySumRewards && (\n        <VStack spacing={1} align=\"center\">\n          <Apy\n            apy={\n              isStrategyLoading ? (\n                <Spinner />\n              ) : (\n                baseApySumRewards?.formatted\n              )\n            }\n          />\n          <Box>\n            <Tooltip\n              hasArrow\n              placement=\"top\"\n              label={\n                <>\n                  <Text>\n                    {apyHoverLabel(cellarConfig)}{\" \"}\n                    {baseApy?.formatted ?? \"0.00%\"}\n                  </Text>\n                  {cellarConfig.customReward?.showOnlyBaseApy !==\n                    undefined &&\n                  cellarConfig.customReward?.showOnlyBaseApy ===\n                    true ? (\n                    <></>\n                  ) : (\n                    <>\n                      <Text>\n                        {cellarConfig.customReward?.showSommRewards\n                          ? `SOMM Rewards APY ${\n                              rewardsApy?.formatted ?? \"0.00%\"\n                            }`\n                          : null}\n                      </Text>\n                      <Text>\n                        {cellarConfig.customReward\n                          ?.customRewardAPYTooltip ??\n                          `${\n                            cellarConfig.customReward?.showAPY\n                              ? `${cellarConfig.customReward.tokenDisplayName} `\n                              : \"\"\n                          }Rewards APY ${\n                            extraRewardsApy?.formatted ??\n                            rewardsApy?.formatted ??\n                            \"0.00%\"\n                          }`}\n                      </Text>\n                      {/* <Text>\n                        {merkleRewardsApy\n                          ? `Merkle Rewards APY ${merkleRewardsApy.toFixed(2)}%`\n                          : ''\n                          }\n                      </Text> */}\n                    </>\n                  )}\n                </>\n              }\n              bg=\"surface.bg\"\n              color=\"neutral.300\"\n            >\n              <HStack spacing={1} align=\"center\">\n                <CardHeading>{apyLabel(cellarConfig)}</CardHeading>\n                {!!apyLabel(cellarConfig) && (\n                  <InformationIcon color=\"neutral.300\" boxSize={3} />\n                )}\n              </HStack>\n            </Tooltip>\n          </Box>\n        </VStack>\n      )}\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Cellars/BecomeProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Cellars/StrategyProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Cellars/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/ChainSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[242,245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[242,245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactElement, FC } from \"react\"\nimport { Box, Select, SelectProps } from \"@chakra-ui/react\"\n\ninterface Props extends SelectProps {\n  chains: string[]\n}\n\nexport const ChainSelector: FC<Props> = ({\n  chains,\n  ...rest\n}): ReactElement<any> => {\n  return (\n    <Select borderRadius={25} fontWeight=\"medium\" {...rest}>\n      {chains.map((chain, i) => (\n        <Box as=\"option\" color=\"surface.bg\" key={i} value={chain}>\n          {chain}\n        </Box>\n      ))}\n    </Select>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/ClientOnly.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/CurrentDeposits.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'asset' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":53,"column":10,"nodeType":"Block","messageId":"tsIgnoreInsteadOfExpectError","endLine":53,"endColumn":26,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1328,1344],"text":"/* @ts-expect-error */"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC } from \"react\"\nimport dynamic from \"next/dynamic\"\nimport { Box, HStack, Text, useTheme, VStack } from \"@chakra-ui/react\"\nimport { formatCurrency } from \"utils/formatCurrency\"\nconst BarChart = dynamic(\n  () => import(\"components/_charts/BarChart\"),\n  {\n    ssr: false,\n  }\n)\n\ninterface CurrentDepositsProps {\n  currentDeposits?: string\n  cellarCap?: string\n  asset?: string\n}\n\nexport const CurrentDeposits: FC<CurrentDepositsProps> = ({\n  currentDeposits,\n  cellarCap,\n  asset,\n}) => {\n  const theme = useTheme()\n  const isDataPresent = currentDeposits && cellarCap\n\n  const getData = () => {\n    if (!isDataPresent) return []\n\n    const minValue = parseInt(cellarCap) * 0.01\n    const value = parseInt(currentDeposits)\n\n    // Show a line even if value is very small.\n    return [{ currentDeposits: value > minValue ? value : minValue }]\n  }\n\n  return (\n    <VStack maxW={288} align=\"stretch\" mt={4}>\n      <HStack justify=\"space-between\" align=\"flex-end\">\n        <Text fontSize=\"0.625rem\" color=\"neutral3400\">\n          Current Deposits\n        </Text>\n        <Text fontSize=\"xs\" fontWeight=\"semibold\">\n          ${formatCurrency(currentDeposits)}\n        </Text>\n      </HStack>\n      <Box\n        w=\"100%\"\n        h=\"4px\"\n        bg=\"#252429\"\n        borderRadius={2}\n        overflow=\"hidden\"\n      >\n        {/* @ts-ignore */}\n        <BarChart\n          layout=\"horizontal\"\n          colors={theme.colors.lime.base}\n          keys={[\"currentDeposits\"]}\n          data={getData()}\n          maxValue={isDataPresent ? parseInt(cellarCap) : \"auto\"}\n          borderRadius={2}\n          valueScale={{ type: \"linear\" }}\n          enableLabel={false}\n          enableGridX={false}\n          enableGridY={false}\n        />\n      </Box>\n      <HStack justify=\"space-between\" align=\"flex-end\">\n        <Text fontSize=\"0.625rem\" color=\"neutral3400\">\n          Cellar Cap\n        </Text>\n        <Text fontSize=\"xs\" fontWeight=\"semibold\">\n          ${formatCurrency(cellarCap)}\n        </Text>\n      </HStack>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Education/EducationCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Education/eduItems.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Education/imageStyles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Education/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Education/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQ/FAQAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQ/FAQTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQ/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQ/portableText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQStrategy/FAQAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQStrategy/FAQTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQStrategy/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/FAQStrategy/portableText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Footer/About.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Footer/Disclaimer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Footer/FooterLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Footer/Overview.tsx","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Number` as a type. Use number instead","line":30,"column":19,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":30,"endColumn":25,"fix":{"range":[1063,1069],"text":"number"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { Stack, Text, VStack } from \"@chakra-ui/react\"\nimport { TransparentCard } from \"components/_cards/TransparentCard\"\nimport { LighterSkeleton } from \"components/_skeleton\"\nimport { formatUSD } from \"utils/formatCurrency\"\nimport { fetchTVLData } from \"queries/get-all-tvl\"\nimport { useEffect, useState } from \"react\"\nimport { GetTVLDataQuery } from \"src/data/actions/types\"\nimport { cellarDataMap } from \"src/data/cellarDataMap\"\n\nexport const Overview = () => {\n  const [tvlData, setTotalTVL] = useState<GetTVLDataQuery | null>(\n    null\n  )\n  const [isLoading, setIsLoadingTVL] = useState(false) // Added isLoadingTVL state\n\n  useEffect(() => {\n    setIsLoadingTVL(true) // Set loading state to true before fetching data\n    fetchTVLData()\n      .then((response) => {\n        setTotalTVL(response)\n      })\n      .catch((error) => {\n        console.log(\"Error from fetchTVLData\", error) // Log errors\n      })\n      .finally(() => {\n        setIsLoadingTVL(false) // Reset loading state in either case (success/failure)\n      })\n  }, [])\n\n  const totalTVM: Number = tvlData?.total_tvl ?? 0\n\n  // Just length of map cellarDataMap\n  const totalLaunchedStrategies = Object.keys(cellarDataMap).length\n\n  return (\n    <TransparentCard marginTop=\"48px\" py=\"30px\">\n      <Stack\n        flexDir={{ base: \"column\", md: \"row\" }}\n        justifyContent=\"space-around\"\n        alignItems=\"center\"\n        gap={{ base: 8, md: 4 }}\n      >\n        <VStack spacing=\"8px\">\n          <Text fontSize=\"16px\" fontWeight=\"bold\">\n            TVL\n          </Text>\n          <LighterSkeleton\n            isLoaded={!isLoading}\n            width={isLoading ? \"100px\" : \"auto\"}\n            height={isLoading ? \"60px\" : \"auto\"}\n          >\n            <Text fontWeight=\"bold\" fontSize=\"40px\">\n              {formatUSD(String(totalTVM))}\n            </Text>\n          </LighterSkeleton>\n        </VStack>\n        <VStack spacing=\"8px\">\n          <Text fontSize=\"16px\" fontWeight=\"bold\">\n            Total Vaults\n          </Text>\n          <LighterSkeleton\n            isLoaded={!isLoading}\n            width={isLoading ? \"100px\" : \"auto\"}\n            height={isLoading ? \"60px\" : \"auto\"}\n          >\n            <Text fontWeight=\"bold\" fontSize=\"40px\">\n              {String(totalLaunchedStrategies)}\n            </Text>\n          </LighterSkeleton>\n        </VStack>\n      </Stack>\n    </TransparentCard>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Footer/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/GridHome.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/HeadingHeavy.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[188,191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[188,191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Heading, HeadingProps } from \"@chakra-ui/react\"\nimport { ReactElement } from \"react\"\n\ninterface Props extends HeadingProps {\n  children: string | ReactElement<any> | ReactElement<any>[] | undefined\n}\n\nexport const HeadingHeavy: React.FC<Props> = ({\n  children,\n  ...rest\n}) => {\n  return (\n    <Heading\n      fontSize={{ base: \"4xl\", md: \"7xl\" }}\n      lineHeight={{ base: \"110%\", md: \"100%\" }}\n      letterSpacing={{ base: \"-1%\", md: \"-2%\" }}\n      fontWeight=\"900\"\n      {...rest}\n    >\n      {children}\n    </Heading>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Hero.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/HeroStrategy/count-down.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/HeroStrategy/hero-left.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/HeroStrategy/hero-right.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'notifyModal' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'twoDaysAfterLaunch' is assigned a value but never used.","line":36,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tokenPrice' is assigned a value but never used.","line":46,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stakingEnd' is assigned a value but never used.","line":48,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tvm' is assigned a value but never used.","line":49,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseApy' is assigned a value but never used.","line":51,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseApySumRewards' is assigned a value but never used.","line":52,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dailyChange' is assigned a value but never used.","line":54,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'potentialStakingApy' is assigned a value but never used.","line":59,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isYieldStrategies' is assigned a value but never used.","line":81,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isAutomatedPortfolio' is assigned a value but never used.","line":83,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  HStack,\n  Image,\n  Spinner,\n  Stack,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { BuyOrSellModal } from \"components/_modals/BuyOrSellModal\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport { isComingSoon } from \"utils/isComingSoon\"\nimport { CountDown } from \"./count-down\"\nimport { addDays } from \"date-fns\"\nimport { Link } from \"components/Link\"\nimport { useRouter } from \"next/router\"\nimport { CellarType } from \"data/types\"\nimport { strategyPageContentData } from \"data/strategyPageContentData\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\n\ninterface HeroStrategyRightProps {\n  id: string\n}\n\nexport const HeroStrategyRight = ({\n  id,\n}: HeroStrategyRightProps) => {\n  const content = strategyPageContentData[id]\n  const buyOrSellModal = useDisclosure()\n  const notifyModal = useDisclosure()\n  const cellarData = cellarDataMap[id]\n  const launchDate = cellarDataMap[id].launchDate\n  const twoDaysAfterLaunch = addDays(\n    launchDate ?? new Date(Date.now()),\n    2\n  )\n  const cellarConfig = cellarData.config\n  const { data, isLoading } = useStrategyData(\n    cellarData.config.cellar.address,\n    cellarData.config.chain.id\n  )\n  const {\n    tokenPrice,\n    changes,\n    stakingEnd,\n    tvm,\n    rewardsApy,\n    baseApy,\n    baseApySumRewards,\n  } = data || {}\n  const dailyChange = changes?.daily\n  const router = useRouter()\n\n  const countdown = isComingSoon(launchDate)\n\n  const potentialStakingApy = isLoading\n    ? \"-\"\n    : rewardsApy?.formatted || \"-\"\n\n  const handleBuyOrSell = () => {\n    if (Number(content.exchange?.length) > 1) {\n      // analytics.track(\"strategy.buy-sell\", {\n      //   strategyCard: cellarData.name,\n      //   landingType: landingType(),\n      // })\n      buyOrSellModal.onOpen()\n    } else {\n      // analytics.track(\"strategy.buy-sell\", {\n      //   strategyCard: cellarData.name,\n      //   landingType: landingType(),\n      // })\n      router.push({\n        pathname: `/strategies/${id}/manage`,\n      })\n    }\n  }\n\n  const isYieldStrategies =\n    cellarData.cellarType === CellarType.yieldStrategies\n  const isAutomatedPortfolio =\n    cellarData.cellarType === CellarType.automatedPortfolio\n\n  return (\n    <Stack minW={{ base: \"100%\", md: \"380px\" }} spacing={4}>\n      {countdown && launchDate ? (\n        <>\n          <CountDown launchDate={launchDate} />\n          {/* <BaseButton\n        w=\"full\"\n        h=\"60px\"\n        onClick={() => {\n          // analytics.track(\"strategy.notify-me\", {\n          //   strategyCard: cellarData.name,\n          //   landingType: landingType(),\n          // })\n          notifyModal.onOpen()\n        }}\n      >\n        Notify me\n      </BaseButton>\n      <NotifyModal\n        isOpen={notifyModal.isOpen}\n        onClose={notifyModal.onClose}\n      /> */}\n        </>\n      ) : (\n        <>\n          <BaseButton w=\"full\" h=\"50px\" onClick={handleBuyOrSell}>\n            {data?.deprecated ? \"Withdraw\" : \"Deposit / Withdraw\"}\n          </BaseButton>\n          <BuyOrSellModal\n            exchange={content.exchange}\n            id={id}\n            isOpen={buyOrSellModal.isOpen}\n            onClose={buyOrSellModal.onClose}\n          />\n          <Link\n            href={`/strategies/${id}/manage`}\n            onClick={() => {\n              // analytics.track(\"strategy.manage-portfolio\", {\n              //   strategyCard: cellarData.name,\n              //   landingType: landingType(),\n              // })\n            }}\n            textDecoration=\"none\"\n          >\n            <SecondaryButton w=\"full\" h=\"50px\">\n              View Details\n            </SecondaryButton>\n          </Link>\n        </>\n      )}\n\n      <Stack pt={4} spacing={6} color=\"neutral.300\">\n        <HStack>\n          <Box>\n            <Text w=\"150px\" fontWeight=\"semibold\">\n              Ticker\n            </Text>\n          </Box>\n          {content.ticker}\n        </HStack>\n        <HStack>\n          <Box>\n            <Text w=\"150px\" fontWeight=\"semibold\">\n              Chain\n            </Text>\n          </Box>\n          <Image\n            src={cellarConfig.chain.logoPath}\n            alt={cellarConfig.chain.alt}\n            background={\"transparent\"}\n            boxSize={8}\n          />{\" \"}\n          <Text>{cellarConfig.chain.displayName}</Text>\n        </HStack>\n        <HStack alignItems=\"start\">\n          <Box>\n            <Text w=\"150px\" fontWeight=\"semibold\">\n              Traded Assets\n            </Text>\n          </Box>\n          <Stack direction=\"column\">\n            {isLoading ? (\n              <Spinner />\n            ) : (\n              content.tradedAssets?.map((item) => {\n                const asset = tokenConfig.find(\n                  (v) =>\n                    v.symbol === item &&\n                    v.chain === cellarConfig.chain.id\n                )\n                return (\n                  <HStack key={item}>\n                    <Image\n                      alt={asset?.alt}\n                      src={asset?.src}\n                      boxSize={8}\n                      rounded=\"full\"\n                    />\n                    <Text>{asset?.symbol}</Text>\n                  </HStack>\n                )\n              })\n            )}\n          </Stack>\n        </HStack>\n        {/* <HStack>\n          <Box>\n            <Text w=\"150px\" fontWeight=\"semibold\">\n              Alternative to\n            </Text>\n          </Box>\n          <Text>{content.alternativeTo}</Text>\n        </HStack> */}\n      </Stack>\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/HeroStrategy/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Highlight/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'expandHowItWorks' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setExpandHowItWorks' is assigned a value but never used.","line":32,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'howItWorks' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Heading,\n  Image,\n  SimpleGrid,\n  Stack,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { BaseModal } from \"components/_modals/BaseModal\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { strategyPageContentData } from \"data/strategyPageContentData\"\nimport { isUseBigBacktestingModal } from \"data/uiConfig\"\nimport parse from \"html-react-parser\"\nimport { useRouter } from \"next/router\"\nimport { useState } from \"react\"\n\ninterface HighlightProps {\n  id: string\n}\n\nexport const isValidURL = (value: string) => {\n  const res = value.match(\n    /^(http(s)?:\\/\\/)[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/gm\n  )\n  return res !== null\n}\n\nexport const Highlight = ({ id }: HighlightProps) => {\n  const content = strategyPageContentData[id]\n  const [expandHowItWorks, setExpandHowItWorks] = useState(false)\n  const howItWorks = content.howItWorks.split(\"<br/><br/>\")\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const router = useRouter()\n  const cellarData = cellarDataMap[id]\n\n  return (\n    <Stack direction=\"column\" mt={52} spacing=\"80px\">\n      <Stack spacing=\"40px\">\n        <Heading>Strategy Highlights</Heading>\n        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>\n          {content.strategyHighlights.card.map((item, index) => (\n            <Box\n              key={index}\n              bg=\"rgba(78, 56, 156, 0.16)\"\n              px={4}\n              py={10}\n              rounded=\"xl\"\n            >\n              <Heading size=\"md\">{item}</Heading>\n            </Box>\n          ))}\n        </SimpleGrid>\n        <Text maxW=\"40rem\" color=\"#D9D7E0\">\n          {content.strategyHighlights.description &&\n            parse(content.strategyHighlights.description)}\n        </Text>\n      </Stack>\n      {content.backtestingText && (\n        <Stack maxW=\"40rem\" spacing=\"40px\">\n          {isValidURL(content.backtestingText) ? (\n            <Box>\n              <SecondaryButton\n                onClick={() => {\n                  // analytics.track(\"strategy.view-backtesting\", {\n                  //   strategyCard: cellarData.name,\n                  //   landingType: landingType(),\n                  // })\n                  router.push(content.backtestingText)\n                }}\n              >\n                View Backtesting Data\n              </SecondaryButton>\n            </Box>\n          ) : (\n            <Box>\n              <SecondaryButton\n                onClick={() => {\n                  // analytics.track(\"strategy.view-backtesting\", {\n                  //   strategyCard: cellarData.name,\n                  //   landingType: landingType(),\n                  // })\n                  onOpen()\n                }}\n              >\n                View Backtesting Data\n              </SecondaryButton>\n              <BaseModal\n                heading=\"Backtesting data\"\n                isOpen={isOpen}\n                onClose={onClose}\n                size={isUseBigBacktestingModal(cellarData.config)}\n              >\n                {content.backtestingImage && (\n                  <Image\n                    src={content.backtestingImage}\n                    alt=\"backtesting\"\n                  />\n                )}\n                <Text whiteSpace=\"pre-line\" mt=\"4\">\n                  {parse(content.backtestingText)}\n                </Text>\n              </BaseModal>\n            </Box>\n          )}\n        </Stack>\n      )}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/InlineImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Link.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/MobileWarningCTA.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":26,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[563,831],"text":"\n          This app only works on desktop but please use uniswap link\n          to buy the token directly on mobile. Buying a token is\n          easiest way to onboard yourself to Somm&apos;s automated trading\n          strategies which have been expertly curated.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[563,831],"text":"\n          This app only works on desktop but please use uniswap link\n          to buy the token directly on mobile. Buying a token is\n          easiest way to onboard yourself to Somm&lsquo;s automated trading\n          strategies which have been expertly curated.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[563,831],"text":"\n          This app only works on desktop but please use uniswap link\n          to buy the token directly on mobile. Buying a token is\n          easiest way to onboard yourself to Somm&#39;s automated trading\n          strategies which have been expertly curated.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[563,831],"text":"\n          This app only works on desktop but please use uniswap link\n          to buy the token directly on mobile. Buying a token is\n          easiest way to onboard yourself to Somm&rsquo;s automated trading\n          strategies which have been expertly curated.\n        "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Flex, FlexProps, Text, VStack } from \"@chakra-ui/react\"\nimport React, { FC } from \"react\"\nimport { Link } from \"./Link\"\nimport { LogoTextIcon } from \"./_icons\"\n\nexport const MobileWarningCTA: FC<FlexProps> = (props) => {\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      minH=\"100vh\"\n      p={6}\n      {...props}\n    >\n      <VStack\n        flex={1}\n        spacing={6}\n        align=\"center\"\n        justify=\"center\"\n        fontSize={12}\n      >\n        <LogoTextIcon h={6} w=\"auto\" />\n        <Text textAlign=\"center\">\n          This app only works on desktop but please use uniswap link\n          to buy the token directly on mobile. Buying a token is\n          easiest way to onboard yourself to Somm's automated trading\n          strategies which have been expertly curated.\n        </Text>\n        <Link\n          href=\"https://t.me/getsomm\"\n          fontWeight=\"bold\"\n          textDecoration=\"underline\"\n          isExternal\n        >\n          Join the conversation\n        </Link>\n        <Link\n          href=\"https://www.somm.finance/\"\n          fontWeight=\"bold\"\n          textDecoration=\"underline\"\n        >\n          Learn more\n        </Link>\n      </VStack>\n    </Flex>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Nav.tsx","messages":[{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":27,"column":20,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":211,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState, memo } from \"react\";\nimport {\n  Container,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerOverlay,\n  Flex,\n  FlexProps,\n  HStack,\n  IconButton,\n  Image,\n  Stack,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport ConnectButton from \"components/_buttons/ConnectButton\";\nimport { Link } from \"components/Link\";\nimport { useRouter } from \"next/router\";\nimport { NAV_LINKS } from \"utils/navLinks\";\nimport { LogoTextIcon } from \"./_icons\";\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\";\nimport { useScrollDirection } from \"hooks/utils/useScrollDirection\";\nimport { HamburgerIcon } from \"components/_icons\";\nimport { Badge, BadgeStatus } from \"./Strategy/Carousel/Badge\";\n\nexport const Nav = memo((props: FlexProps) => {\n  const [scrolled, setScrolled] = useState<boolean>(false);\n  const scrollDirection = useScrollDirection();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const routes = useRouter();\n  const isLarger992 = useBetterMediaQuery(\"(min-width: 992px)\");\n\n  // Listen for scroll event to set state\n  useEffect(() => {\n    const listener = () => {\n      setScrolled(window.scrollY >= 80);\n    };\n\n    window.addEventListener(\"scroll\", listener);\n    return () => {\n      window.removeEventListener(\"scroll\", listener);\n      setScrolled(false);\n    };\n  }, []);\n\n  const styles: FlexProps | false = scrolled && {\n    bg: \"rgba(26, 26, 26, 0.5)\",\n    backdropFilter: \"blur(8px)\",\n    borderBottom: \"1px solid\",\n    borderColor: \"purple.dark\",\n  };\n  const mobileScrollHide =\n    (!isLarger992 && `nav ${scrollDirection === \"down\" && \"down\"}`) || undefined;\n\n  return (\n    <Flex\n      className={mobileScrollHide}\n      position=\"fixed\"\n      width=\"100%\"\n      as=\"nav\"\n      py=\"36px\"\n      fontSize=\"xl\"\n      zIndex=\"sticky\"\n      transition=\"ease-in-out 200ms\"\n      transitionProperty=\"background\"\n      {...styles}\n      {...props}\n    >\n      <Container\n        display=\"flex\"\n        maxW=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        flexDir=\"row\"\n        gap={{ base: 4, lg: 0 }}\n        px={{ base: \"16px\", md: \"30px\", lg: \"40px\" }}\n      >\n        {/* Desktop Navigation */}\n        {isLarger992 && (\n          <HStack spacing={10}>\n            <Link href=\"/\">\n              <LogoTextIcon w=\"9rem\" h=\"2rem\" />\n            </Link>\n            {NAV_LINKS.map((item) => {\n              const isExternalLink = item.link.startsWith(\"http\");\n              let isActive = false;\n\n              if (!isExternalLink) {\n                isActive = item.link === \"/\" \n                  ? routes.pathname === \"/\" \n                  : routes.pathname.startsWith(item.link);\n              } else {\n                // Define a function with typed parameter to normalize URLs\n                const normalizeUrl = (url: string): string =>\n                  url.replace(/^(https:\\/\\/)?(www\\.)?/, \"\");\n                \n                const externalLinks = [\n                    \"https://somm.finance/\",\n                    \"https://somm.finance/audits\",\n                    \"https://somm.finance/defi\",\n                    \"https://somm.finance/staking\"\n                ];\n                const pathSegment = routes.pathname.split(\"/\")[1];\n\n                // Ensure isActive is always a boolean\n                isActive = externalLinks.some(link => normalizeUrl(link) === normalizeUrl(item.link))\n                    ? false\n                    : pathSegment === \"strategies\"\n                    ? false // Set to false instead of empty string to maintain boolean type\n                    : pathSegment === item.link.split(\"/\")[1];\n                \n              }\n\n              return (\n                <Flex key={item.link} align=\"center\">\n                  <Link\n                    href={item.link}\n                    color={\n                      isActive && !isExternalLink\n                        ? \"white\"\n                        : \"neutral.400\"\n                    }\n                    fontWeight=\"semibold\"\n                  >\n                    {item.title}\n                  </Link>\n                  {item.isNew && (\n                    <Badge status={BadgeStatus.New} ml={2} />\n                  )}\n                </Flex>\n              );\n            })}\n          </HStack>\n        )}\n\n        {/* Mobile Navigation */}\n        {!isLarger992 && (\n          <>\n            <IconButton\n              variant=\"unstyled\"\n              aria-label={\"menu\"}\n              display={{\n                base: \"flex\",\n                lg: \"none\",\n              }}\n              flex={1}\n              justifyContent=\"flex-start\"\n              onClick={onOpen}\n            >\n              <HamburgerIcon />\n            </IconButton>\n            <Link href=\"/\">\n              <Image\n                src=\"/assets/images/sommelier-icon.svg\"\n                alt=\"somm logo1\"\n                height=\"2rem\"\n              />\n            </Link>\n          </>\n        )}\n\n        <Flex flex={1} justifyContent=\"flex-end\">\n          <ConnectButton />\n        </Flex>\n\n        <Drawer\n          placement={\"left\"}\n          onClose={onClose}\n          isOpen={isOpen && !isLarger992}\n        >\n          <DrawerOverlay />\n          <DrawerContent backgroundColor=\"#1E163D\">\n            <DrawerCloseButton size=\"lg\" />\n            <DrawerBody p={0}>\n              <Stack alignItems=\"flex-end\" py=\"160px\" px=\"24px\">\n                {NAV_LINKS.map((item) => {\n                  const isExternalLink = item.link.startsWith(\"http\");\n                  let isActive = !isExternalLink && \n                    (item.link === \"/\" \n                      ? routes.pathname === \"/\" \n                      : routes.pathname.startsWith(item.link));\n\n                  return (\n                    <Flex key={item.link} align=\"center\">\n                      <Link\n                        href={item.link}\n                        color={\n                          isActive && !isExternalLink\n                            ? \"white\"\n                            : \"neutral.400\"\n                        }\n                        fontWeight=\"semibold\"\n                      >\n                        {item.title}\n                      </Link>\n                      {item.isNew && (\n                        <Badge status={BadgeStatus.New} ml={2} />\n                      )}\n                    </Flex>\n                  );\n                })}\n              </Stack>\n            </DrawerBody>\n          </DrawerContent>\n        </Drawer>\n      </Container>\n    </Flex>\n  );\n}\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/PercentageHeading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/PercentageText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/PortableText/PrivacyAndTermsText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Socials/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Socials/links.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/SommNativeList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[187,190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[187,190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[416,419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[416,419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\nimport { StrategyTable } from \"components/_tables/StrategyTable\"\nimport { useSommNativeVaults } from \"data/hooks/useSommNativeVaults\"\n\ntype Props = {\n  columns: any\n}\n\nexport default function SommNativeList({ columns }: Props) {\n  const { data } = useSommNativeVaults()\n  if (!data || data.length === 0) return null\n  return (\n    <StrategyTable\n      columns={columns}\n      data={data as any}\n      showHeader={false}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/NextArrow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/PrevArrow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/sliderSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/Carousel/sliderStrategy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Strategy/portableText.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useTypingText\" is called in function \"typedTextList: FC<\n  PortableTextTypeComponentProps<{\n    list: string[]\n    keyStrokeDuration: number\n    pauseDuration: number\n  }>\n>\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","line":32,"column":20,"nodeType":"Identifier","endLine":32,"endColumn":33,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/StrategyProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/Tag/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/TextDisclosure.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/TokenAssets/TokenMaps/CroppedMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chain' is assigned a value but never used.","line":35,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chain' is assigned a value but never used.","line":73,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Avatar,\n  Box,\n  HStack,\n  StackProps,\n  Text,\n  Tooltip,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { ControlsIcon } from \"components/_icons\"\nimport { Token } from \"data/tokenConfig\"\nimport { useState, FC } from \"react\"\n\ninterface CroppedMapProps extends StackProps {\n  tokens: Token[]\n  displaySymbol?: boolean\n}\n\nexport const CroppedMap: FC<CroppedMapProps> = ({\n  tokens,\n  displaySymbol,\n  ...rest\n}) => {\n  const [displayedAsset, setDisplayedAsset] = useState<string | null>(\n    null\n  )\n\n  // Drop anything that's undefined\n  const tokensCropped = tokens.slice(0, 6).filter((token) => token)\n\n  return (\n    <HStack align=\"flex-start\">\n      <HStack role=\"group\" pt={1} spacing={-1.5} {...rest}>\n        {tokensCropped?.map((token, i) => {\n          const { src, alt, address, symbol, chain } = token\n          return (\n            <Avatar\n              key={address + i}\n              boxSize=\"24px\"\n              src={src}\n              name={alt}\n              borderWidth={2}\n              borderColor=\"surface.bg\"\n              bg=\"surface.bg\"\n              _notFirst={{\n                opacity: 0.65,\n              }}\n              _hover={{\n                opacity: 1,\n              }}\n              _groupHover={{\n                _first: {\n                  opacity: 0.65,\n                },\n              }}\n              _first={{\n                _hover: {\n                  opacity: \"1 !important\",\n                },\n              }}\n              onMouseEnter={() => setDisplayedAsset(symbol)}\n              onMouseLeave={() => setDisplayedAsset(null)}\n            />\n          )\n        })}\n        <Tooltip\n          hasArrow\n          arrowShadowColor=\"purple.base\"\n          color=\"neutral.300\"\n          label={\n            <VStack align=\"flex-start\" minW={120}>\n              {tokens.map((token, i) => {\n                const { src, alt, address, symbol, chain } = token\n\n                return (\n                  <HStack key={address + i}>\n                    <Avatar\n                      boxSize=\"24px\"\n                      src={src}\n                      name={alt}\n                      borderWidth={2}\n                      borderColor=\"surface.bg\"\n                      bg=\"surface.bg\"\n                    />\n                    <Text>{symbol}</Text>\n                  </HStack>\n                )\n              })}\n            </VStack>\n          }\n          py={3}\n          px={5}\n          bg=\"surface.bg\"\n          borderWidth={1}\n          borderRadius={8}\n          borderColor=\"purple.base\"\n        >\n          <Box\n            as=\"span\"\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            boxSize=\"24px\"\n            borderRadius=\"full\"\n            borderWidth={2}\n            borderColor=\"surface.bg\"\n            overflow=\"hidden\"\n            zIndex=\"popover\"\n            opacity={0.65}\n            _hover={{\n              opacity: 1,\n            }}\n          >\n            <ControlsIcon p={1.5} boxSize=\"inherit\" bg=\"#6C4ED9\" />\n          </Box>\n        </Tooltip>\n      </HStack>\n      {displaySymbol && (\n        <Text as=\"span\" minW=\"5ch\">\n          {displayedAsset}\n        </Text>\n      )}\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/TokenAssets/TokenMaps/UncroppedMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chain' is assigned a value but never used.","line":23,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Avatar, HStack, StackProps, Text } from \"@chakra-ui/react\"\nimport { Token } from \"data/tokenConfig\"\nimport { useState, FC } from \"react\"\n\ninterface UncroppedMapProps extends StackProps {\n  tokens: Token[]\n  displaySymbol?: boolean\n}\n\nexport const UncroppedMap: FC<UncroppedMapProps> = ({\n  tokens,\n  displaySymbol,\n  ...rest\n}) => {\n  const [displayedAsset, setDisplayedAsset] = useState<string | null>(\n    null\n  )\n\n  return (\n    <HStack>\n      <HStack role=\"group\" pt={1} spacing={-1.5} {...rest}>\n        {tokens.map((token, i) => {\n          const { src, alt, address, symbol, chain } = token\n          return (\n            <Avatar\n              key={address + i}\n              boxSize=\"24px\"\n              src={src}\n              name={alt}\n              borderWidth={2}\n              borderColor=\"surface.bg\"\n              bg=\"surface.bg\"\n              _notFirst={{\n                opacity: 0.65,\n              }}\n              _hover={{\n                opacity: 1,\n              }}\n              _groupHover={{\n                _first: {\n                  opacity: 0.65,\n                },\n              }}\n              _first={{\n                _hover: {\n                  opacity: \"1 !important\",\n                },\n              }}\n              onMouseEnter={() => setDisplayedAsset(symbol)}\n              onMouseLeave={() => setDisplayedAsset(null)}\n            />\n          )\n        })}\n      </HStack>\n      {displaySymbol && (\n        <Text as=\"span\" minW=\"5ch\">\n          {displayedAsset}\n        </Text>\n      )}\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/TokenAssets/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeAsset' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { StackProps } from \"@chakra-ui/react\"\nimport { Token } from \"data/tokenConfig\"\nimport { FC } from \"react\"\nimport { CroppedMap } from \"./TokenMaps/CroppedMap\"\nimport { UncroppedMap } from \"./TokenMaps/UncroppedMap\"\n\nexport interface TokenAssetsProps extends StackProps {\n  tokens: Token[]\n  activeAsset: string\n  displaySymbol?: boolean\n}\n\nexport const TokenAssets: FC<TokenAssetsProps> = ({\n  tokens,\n  activeAsset,\n  displaySymbol,\n  ...rest\n}) => {\n  return tokens.length > 6 ? (\n    <CroppedMap\n      tokens={tokens}\n      displaySymbol={displaySymbol}\n      {...rest}\n    />\n  ) : (\n    <UncroppedMap\n      tokens={tokens}\n      displaySymbol={displaySymbol}\n      {...rest}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_banners/GeoBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_banners/InfoBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_banners/MaintenanceBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_banners/WalletHealthBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_banners/WrongNetworkBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/BaseButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'variant' is defined but never used.","line":17,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  ButtonProps,\n  forwardRef,\n  Icon,\n  IconProps,\n} from \"@chakra-ui/react\"\n\nexport interface BaseButtonProps extends Omit<ButtonProps, \"icon\"> {\n  icon?: any\n  iconProps?: IconProps\n}\n\nexport const BaseButton = forwardRef<\n  BaseButtonProps,\n  \"button\"\n>(({ icon, variant, iconProps, ...rest }, ref) => {\n  return (\n    <Button\n      ref={ref}\n      role=\"group\"\n      py={2}\n      px={4}\n      color=\"white\"\n      bg=\"gradient.primary\"\n      borderWidth={2}\n      borderColor=\"purple.base\"\n      overflow=\"hidden\"\n      rightIcon={\n        icon && (\n          <Icon\n            as={icon}\n            color=\"surface.bg\"\n            bgColor=\"white\"\n            borderRadius=\"50%\"\n            boxSize={5}\n            p={1}\n            _groupHover={{\n              color: \"purple.dark\",\n              bgColor: \"white\",\n            }}\n            {...iconProps}\n          />\n        )\n      }\n      isDisabled={rest.disabled}\n      _hover={{\n        color: \"white\",\n        bg: \"purple.dark\",\n      }}\n      _disabled={{\n        color: \"neutral.400\",\n        bg: \"purple.dark\",\n        borderColor: \"purple.dark\",\n        cursor: \"auto\",\n        _hover: {\n          color: \"neutral.400\",\n        },\n        _active: {\n          bg: \"purple.dark\",\n          borderColor: \"purple.dark\",\n        },\n      }}\n      {...rest}\n    />\n  )\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/BondButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ChainButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ClaimButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ConnectButton/ConnectWalletPopover.tsx","messages":[{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":11,"column":37,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":58,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'unstyled' is defined but never used.","line":13,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'wagmiChainId' is defined but never used.","line":15,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'account' is defined but never used.","line":38,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chain' is defined but never used.","line":39,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openAccountModal' is defined but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openChainModal' is defined but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mounted' is defined but never used.","line":43,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { memo } from \"react\"\nimport { ConnectButton } from \"@rainbow-me/rainbowkit\"\nimport { ConnectButtonProps } from \".\"\nimport { Button } from \"@chakra-ui/react\"\nimport { useWalletConnection } from \"hooks/web3/useWalletConnection\"\n\ntype ConnectWalletPopoverProps = ConnectButtonProps & {\n  wagmiChainId?: number\n}\n\nexport const ConnectWalletPopover = memo(\n  ({\n    unstyled,\n    children,\n    wagmiChainId,\n    ...rest\n  }: ConnectWalletPopoverProps) => {\n    const { isConnecting, cancelConnection } = useWalletConnection()\n\n    // If connecting, show cancel button\n    if (isConnecting) {\n      return (\n        <Button\n          onClick={cancelConnection}\n          colorScheme=\"red\"\n          variant=\"outline\"\n          size=\"sm\"\n          {...rest}\n        >\n          Cancel Connection\n        </Button>\n      )\n    }\n\n    return (\n      <ConnectButton.Custom>\n        {({\n          account,\n          chain,\n          openAccountModal,\n          openChainModal,\n          openConnectModal,\n          mounted,\n        }) => {\n          return (\n            <Button\n              onClick={openConnectModal}\n              variant=\"sommOutline\"\n              {...rest}\n            >\n              {(children as string) || \"Connect Wallet\"}\n            </Button>\n          )\n        }}\n      </ConnectButton.Custom>\n    )\n  }\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ConnectButton/ConnectedPopover.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedStrategy' is assigned a value but never used.","line":53,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\nimport {\n  Avatar,\n  HStack,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Spinner,\n  Text,\n  Stack,\n} from \"@chakra-ui/react\"\nimport { Link } from \"components/Link\"\nimport truncateWalletAddress from \"src/utils/truncateWalletAddress\"\nimport {\n  useAccount,\n  useDisconnect,\n  useEnsAvatar,\n  useEnsName,\n} from \"wagmi\"\nimport Jazzicon, { jsNumberForAddress } from \"react-jazzicon\"\nimport { BaseButton } from \"../BaseButton\"\nimport { ChevronDownIcon, LogoutCircleIcon } from \"components/_icons\"\nimport { analytics } from \"utils/analytics\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useRouter } from \"next/router\"\nimport { chainConfig } from \"data/chainConfig\"\nimport { tokenConfig, tokenConfigMap } from \"data/tokenConfig\"\nimport { useImportToken } from \"hooks/web3/useImportToken\"\nimport { getAddress } from \"viem\"\n\nexport const ConnectedPopover = () => {\n  const { addToast, close } = useBrandedToast()\n  const { disconnect } = useDisconnect()\n  const { address, isConnecting, chain } = useAccount()\n  const { data: ensName } = useEnsName({\n    address,\n  })\n  const { data: ensAvatar } =\n    useEnsAvatar({ name: address })\n\n  const chainObj = chainConfig.find((c) => c.wagmiId === chain?.id)\n  const sommToken = tokenConfig.find(\n    (t) => t.coinGeckoId === \"sommelier\" && t.chain === chainObj?.id\n  )\n\n  const avatarSrc = sommToken\n    ? sommToken.src\n    : \"/assets/icons/somm.svg\"\n\n  const id = useRouter().query.id as string | undefined\n  const selectedStrategy = (!!id && cellarDataMap[id]) || undefined\n\n  const importToken = useImportToken({\n    onSuccess: (data) => {\n      const tokenData = data as unknown as { symbol: string }\n      addToast({\n        heading: \"Import Token\",\n        status: \"success\",\n        body: <Text>{tokenData.symbol} added to metamask</Text>,\n        closeHandler: close,\n      })\n    },\n    onError: (error) => {\n      const e = error as Error\n      addToast({\n        heading: \"Import Token\",\n        status: \"error\",\n        body: <Text>{e.message}</Text>,\n        closeHandler: close,\n      })\n    },\n  })\n\n  const handleImportToken = () => {\n    const fullImageUrl = `${window.origin}${tokenConfigMap.SOMM_ETHEREUM.src}`\n    importToken.mutate({\n      address: getAddress(sommToken?.address ?? \"\"),\n      imageUrl: fullImageUrl,\n      chain: sommToken?.chain ?? \"\",\n    })\n    addToast({\n      heading: \"Importing Token\",\n      body: <Text>Importing SOMM token to wallet...</Text>,\n      status: \"info\",\n    })\n  }\n\n  function onDisconnect() {\n    analytics.track(\"wallet.disconnected\", {\n      account: address,\n    })\n    disconnect()\n    window.location.reload()\n  }\n\n  const walletAddressIcon = () => {\n    if (ensAvatar) {\n      return <Avatar boxSize={\"16px\"} src={ensAvatar} />\n    } else if (address) {\n      return (\n        <Jazzicon diameter={16} seed={jsNumberForAddress(address)} />\n      )\n    } else {\n      return (\n        <div\n          style={{\n            width: 16,\n            height: 16,\n            borderRadius: \"50%\",\n            backgroundColor: \"#EEE\",\n          }}\n        ></div>\n      )\n    }\n  }\n\n  const handleCopyAddressToClipboard = () => {\n    if (address) {\n      navigator.clipboard.writeText(address)\n      addToast({\n        heading: \"Copied to clipboard\",\n        body: <Text>Wallet address copied to clipboard</Text>,\n        status: \"success\",\n      })\n    }\n  }\n\n  const isLoading = isConnecting && !address\n\n  return (\n    <Popover placement=\"bottom\">\n      <PopoverTrigger>\n        <BaseButton\n          bg=\"none\"\n          borderWidth={2}\n          borderColor=\"purple.base\"\n          borderRadius=\"full\"\n          w=\"auto\"\n          zIndex={401}\n          isLoading={isLoading}\n          fontFamily=\"Haffer\"\n          fontSize={12}\n          _hover={{\n            bg: \"purple.dark\",\n          }}\n        >\n          <HStack>\n            {isLoading ? <Spinner size=\"xs\" /> : undefined}\n            {ensName ? ensName : truncateWalletAddress(address)}\n            {walletAddressIcon()}\n            <ChevronDownIcon />\n          </HStack>\n        </BaseButton>\n      </PopoverTrigger>\n      <PopoverContent\n        p={2}\n        maxW=\"max-content\"\n        borderWidth={1}\n        borderColor=\"purple.dark\"\n        borderRadius={12}\n        bg=\"surface.bg\"\n        fontWeight=\"semibold\"\n        _focus={{\n          outline: \"unset\",\n          outlineOffset: \"unset\",\n          boxShadow: \"unset\",\n        }}\n      >\n        <PopoverBody p={0}>\n          <Stack>\n            <Link\n              href={`${chain?.blockExplorers?.default.url}/address/${address}`}\n              isExternal\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              _hover={{\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon mr={2} />\n              {`View on ${chain?.blockExplorers?.default.name}`}\n            </Link>\n            <HStack\n              as=\"button\"\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              onClick={handleCopyAddressToClipboard}\n              _hover={{\n                cursor: \"pointer\",\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon />\n              <Text fontWeight=\"semibold\">Copy to clipboard</Text>\n            </HStack>\n            <HStack\n              as=\"button\"\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              onClick={onDisconnect}\n              _hover={{\n                cursor: \"pointer\",\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon />\n              <Text fontWeight=\"semibold\">Disconnect Wallet</Text>\n            </HStack>\n            <Stack\n              as=\"button\"\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              onClick={handleImportToken}\n              _hover={{\n                cursor: \"pointer\",\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <HStack>\n                <Avatar src={avatarSrc} size=\"2xs\" />\n                <Text fontWeight=\"semibold\">\n                  Import SOMM token to Wallet\n                </Text>\n              </HStack>\n            </Stack>\n          </Stack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ConnectButton/MobileConnectedPopover.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'close' is assigned a value but never used.","line":34,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedStrategy' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Avatar,\n  HStack,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Spinner,\n  Text,\n  Stack,\n} from \"@chakra-ui/react\"\nimport { Link } from \"components/Link\"\nimport truncateWalletAddress, {\n  truncateString,\n} from \"src/utils/truncateWalletAddress\"\nimport {\n  useAccount,\n  useDisconnect,\n  useEnsAvatar,\n  useEnsName,\n} from \"wagmi\"\nimport Jazzicon, { jsNumberForAddress } from \"react-jazzicon\"\nimport { BaseButton } from \"../BaseButton\"\nimport { ChevronDownIcon, LogoutCircleIcon } from \"components/_icons\"\nimport { analytics } from \"utils/analytics\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useRouter } from \"next/router\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\n\nexport const MobileConnectedPopover = () => {\n  const isLarger480 = useBetterMediaQuery(\"(min-width: 480px)\")\n\n  const { addToast, close } = useBrandedToast()\n  const { disconnect } = useDisconnect()\n  const { address, isConnecting, chain } = useAccount()\n  const { data: ensName, isLoading: ensNameLoading } = useEnsName({\n    address,\n  })\n  const { data: ensAvatar, isLoading: ensAvatarLoading } =\n    useEnsAvatar({\n      name: address,\n    })\n\n  const id = useRouter().query.id as string | undefined\n  const selectedStrategy = (!!id && cellarDataMap[id]) || undefined\n\n  function onDisconnect() {\n    analytics.track(\"wallet.disconnected\", {\n      account: address,\n    })\n\n    disconnect()\n    // Refresh window\n    window.location.reload()\n  }\n\n  const walletAddressIcon = () => {\n    if (ensAvatar) {\n      return <Avatar boxSize={\"16px\"} src={ensAvatar} />\n    }\n    if (address) {\n      return (\n        <Jazzicon diameter={16} seed={jsNumberForAddress(address)} />\n      )\n    }\n    return null\n  }\n\n  const handleCopyAddressToClipboard = () => {\n    if (address) {\n      navigator.clipboard.writeText(address)\n\n      addToast({\n        heading: \"Copied to clipboard\",\n        body: <Text>Wallet address copied to clipboard</Text>,\n        status: \"success\",\n      })\n    }\n  }\n\n  // to make sure the loading is about not about fetching ENS\n  const isLoading = isConnecting && !address\n  const isEnsLoading = ensAvatarLoading || ensNameLoading\n\n  return (\n    <Popover placement=\"bottom\">\n      <PopoverTrigger>\n        <BaseButton\n          bg=\"surface.primary\"\n          borderWidth={2}\n          borderColor=\"purple.base\"\n          borderRadius=\"full\"\n          minW=\"max-content\"\n          isLoading={isLoading}\n          // loading state fetching ENS\n          fontFamily=\"Haffer\"\n          fontSize={12}\n          _hover={{\n            bg: \"purple.dark\",\n          }}\n        >\n          <HStack>\n            {((isLoading || isEnsLoading) && <Spinner size=\"xs\" />) ||\n              undefined}\n\n            {ensName\n              ? isLarger480\n                ? ensName\n                : truncateString(ensName)\n              : truncateWalletAddress(address, isLarger480 ? 3 : 2)}\n            {walletAddressIcon()}\n            <ChevronDownIcon />\n          </HStack>\n        </BaseButton>\n      </PopoverTrigger>\n      <PopoverContent\n        p={2}\n        w=\"auto\"\n        zIndex={401}\n        borderWidth={1}\n        borderColor=\"purple.dark\"\n        borderRadius={12}\n        bg=\"surface.bg\"\n        fontWeight=\"semibold\"\n        _focus={{\n          outline: \"unset\",\n          outlineOffset: \"unset\",\n          boxShadow: \"unset\",\n        }}\n      >\n        <PopoverBody p={0}>\n          <Stack>\n            <Link\n              href={`${chain?.blockExplorers?.default.url}/address/${address}`}\n              isExternal\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              _hover={{\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon mr={2} />\n              {`View on ${chain?.blockExplorers?.default.name}`}\n            </Link>\n            <HStack\n              as=\"button\"\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              onClick={handleCopyAddressToClipboard}\n              _hover={{\n                cursor: \"pointer\",\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon />\n              <Text fontWeight=\"semibold\">Copy to clipboard</Text>\n            </HStack>\n            <HStack\n              as=\"button\"\n              py={2}\n              px={4}\n              fontSize=\"sm\"\n              onClick={onDisconnect}\n              _hover={{\n                cursor: \"pointer\",\n                bg: \"purple.dark\",\n                borderColor: \"surface.tertiary\",\n              }}\n            >\n              <LogoutCircleIcon />\n              <Text fontWeight=\"semibold\">Disconnect Wallet</Text>\n            </HStack>\n          </Stack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ConnectButton/WalletDebugInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[416,419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[416,419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\"\nimport {\n  Box,\n  Button,\n  Text,\n  VStack,\n  HStack,\n  Code,\n  Collapse,\n  useDisclosure,\n} from \"@chakra-ui/react\"\nimport { getProviderDebugInfo } from \"utils/wallet/conflictResolver\"\nimport {\n  clearPendingWalletRequests,\n  forceClearWalletState,\n} from \"utils/wallet/initOnce\"\n\nexport const WalletDebugInfo: React.FC = () => {\n  const [debugInfo, setDebugInfo] = useState<any>(null)\n  const { isOpen, onToggle } = useDisclosure()\n\n  const refreshDebugInfo = () => {\n    const info = getProviderDebugInfo()\n    setDebugInfo(info)\n  }\n\n  const clearWalletState = () => {\n    clearPendingWalletRequests()\n    forceClearWalletState()\n    refreshDebugInfo()\n  }\n\n  return (\n    <Box\n      p={4}\n      borderWidth={1}\n      borderColor=\"gray.200\"\n      borderRadius=\"md\"\n    >\n      <HStack justify=\"space-between\" mb={2}>\n        <Text fontWeight=\"bold\" fontSize=\"sm\">\n          Wallet Debug Info\n        </Text>\n        <Button size=\"xs\" onClick={onToggle}>\n          {isOpen ? \"Hide\" : \"Show\"}\n        </Button>\n      </HStack>\n\n      <Collapse in={isOpen}>\n        <VStack spacing={2} align=\"stretch\">\n          <HStack spacing={2}>\n            <Button size=\"xs\" onClick={refreshDebugInfo}>\n              Refresh\n            </Button>\n            <Button\n              size=\"xs\"\n              onClick={clearWalletState}\n              colorScheme=\"red\"\n            >\n              Clear State\n            </Button>\n          </HStack>\n\n          {debugInfo && (\n            <Box p={2} bg=\"gray.50\" borderRadius=\"md\">\n              <Code fontSize=\"xs\" whiteSpace=\"pre-wrap\">\n                {JSON.stringify(debugInfo, null, 2)}\n              </Code>\n            </Box>\n          )}\n        </VStack>\n      </Collapse>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/ConnectButton/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chainConfig' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chainId' is defined but never used.","line":35,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ButtonProps, HStack } from \"@chakra-ui/react\"\nimport { useAccount } from \"wagmi\"\nimport ClientOnly from \"components/ClientOnly\"\nimport { ConnectedPopover } from \"./ConnectedPopover\"\nimport { ConnectWalletPopover } from \"./ConnectWalletPopover\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { MobileConnectedPopover } from \"./MobileConnectedPopover\"\nimport ChainButton from \"../ChainButton\"\nimport {\n  chainConfig,\n  chainConfigMap,\n  getChainByViemId,\n} from \"src/data/chainConfig\"\n\nexport interface ConnectButtonProps\n  extends Omit<ButtonProps, \"children\"> {\n  unstyled?: boolean\n  children?: React.ReactNode\n  overridechainid?: string\n}\n\nconst ConnectButton = (props: ConnectButtonProps) => {\n  const { isConnected, chain: viemChain } = useAccount()\n  const isLarger992 = useBetterMediaQuery(\"(min-width: 992px)\")\n  const chain = getChainByViemId(viemChain?.name)\n\n  // Use the actual current chain from wallet, fallback to default if not connected\n  const currentChainId = chain?.id || \"ethereum\"\n\n  // Ensure we have a valid chain config\n  const currentChainConfig =\n    chainConfigMap[currentChainId] || chainConfigMap[\"ethereum\"]\n\n  const handleNetworkChange = (chainId: string) => {\n    // This will be handled by the ChainButton component\n  }\n\n  // For connect buttons that are not on header/should allow chain selection\n  if (props.overridechainid) {\n    const chain = chainConfigMap[props.overridechainid]\n    return (\n      <ClientOnly>\n        <HStack>\n          {isConnected ? (\n            isLarger992 ? (\n              <ConnectedPopover />\n            ) : (\n              <MobileConnectedPopover />\n            )\n          ) : (\n            <ConnectWalletPopover\n              wagmiChainId={chain.wagmiId}\n              {...props}\n            />\n          )}\n        </HStack>\n      </ClientOnly>\n    )\n  }\n\n  return (\n    <ClientOnly>\n      <HStack spacing={\"1.5em\"}>\n        <ChainButton\n          chain={currentChainConfig}\n          onChainChange={handleNetworkChange}\n        />\n\n        {isConnected ? (\n          isLarger992 ? (\n            <ConnectedPopover />\n          ) : (\n            <MobileConnectedPopover />\n          )\n        ) : (\n          <ConnectWalletPopover\n            wagmiChainId={currentChainConfig.wagmiId}\n            {...props}\n          />\n        )}\n      </HStack>\n    </ClientOnly>\n  )\n}\n\nexport default ConnectButton\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/DepositAndWithdrawButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[622,625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[622,625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1081,1084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1081,1084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasLPTokens' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":20},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":90,"column":3,"nodeType":"VariableDeclaration","messageId":"unexpectedVar","endLine":96,"endColumn":38,"fix":{"range":[2305,2308],"text":"let"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2607,2610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2607,2610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2934,2937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2934,2937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openOracleModal' is assigned a value but never used.","line":165,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":165,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import {\n  Tooltip,\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from \"@chakra-ui/react\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { DepositModalType } from \"data/hooks/useDepositModalStore\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { isBefore } from \"date-fns\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useAccount } from \"wagmi\"\nimport { BaseButton } from \"./BaseButton\"\nimport { SecondaryButton } from \"./SecondaryButton\"\nimport { useState } from \"react\"\n\ntype DepositAndWithdrawButtonProps = {\n  row: any\n  onDepositModalOpen: (arg: {\n    id: string\n    type: DepositModalType\n  }) => void\n}\n\ntype LPDataType = {\n  formatted: string\n  decimals: number\n}\n\nconst checkLPtokenDisabled = (lpTokenData: LPDataType | undefined) =>\n  !lpTokenData ||\n  Number(toEther(lpTokenData?.formatted, lpTokenData?.decimals)) <= 0\n\nimport { coerceNetValue, parseMoneyString } from \"utils/money\"\n\nconst checkHasValueInVault = (\n  lpTokenData: LPDataType | undefined,\n  netValue: any\n) => {\n  // For main page: Only enable withdrawal if Net Value > 0\n  const nv = coerceNetValue(netValue)\n  const hasNetValue = Number.isFinite(nv) && nv > 0\n\n  // For other pages: Check both LP tokens and net value\n  const hasLPTokens =\n    lpTokenData &&\n    Number(toEther(lpTokenData?.formatted, lpTokenData?.decimals)) > 0\n\n  // On main page, we only care about net value for withdrawal buttons\n  return hasNetValue\n}\n\nconst checkIsBeforeLaunch = (launchDate: string | undefined) => {\n  const date = new Date(launchDate as string)\n  return isBefore(date, new Date())\n}\n\nconst checkDisplay = (\n  isDeprecated: boolean,\n  lpTokenDisabled: boolean,\n  isConnected: boolean,\n  isBeforeLaunch: boolean\n) =>\n  isDeprecated\n    ? lpTokenDisabled || !isConnected || !isBeforeLaunch\n      ? \"inline\"\n      : \"none\"\n    : !isConnected && !isDeprecated && lpTokenDisabled\n    ? \"inline\"\n    : \"none\"\n\nconst checkButtonDisabled = (\n  isContractNotReady: boolean | undefined,\n  isDeprecated: boolean,\n  lpTokenDisabled: boolean,\n  hasValueInVault: boolean,\n  isConnected: boolean,\n  isBeforeLaunch: boolean,\n  isWithdrawButton: boolean\n) => {\n  if (isContractNotReady !== undefined && isContractNotReady) {\n    return true\n  }\n\n  var res = isDeprecated\n    ? !hasValueInVault\n      ? true\n      : false\n    : isWithdrawButton\n    ? !hasValueInVault || !isConnected || !isBeforeLaunch\n    : !isConnected || !isBeforeLaunch\n\n  return res\n}\n\nconst getButtonText = (\n  isDeprecated: boolean,\n  lpTokenDisabled: boolean,\n  cellarConfig: any,\n  id: string\n) => {\n  if (isDeprecated) {\n    return lpTokenDisabled ? \"Closed\" : \"Withdraw\"\n  }\n\n  const buttonType = getButtonType(cellarConfig, id, isDeprecated)\n  return buttonType === \"deposit\"\n    ? \"Deposit\"\n    : buttonType === \"migrate\"\n    ? \"Migrate\"\n    : \"Withdraw\"\n}\n\nconst getButtonType = (\n  cellarConfig: any,\n  id: string,\n  isDeprecated: boolean\n): \"withdraw\" | \"deposit\" | \"migrate\" => {\n  // Legacy vaults should never show deposit buttons\n  if (isDeprecated) {\n    return \"withdraw\"\n  }\n\n  const alphaStEth = cellarDataMap[\"Alpha-stETH\"]\n  const includesBaseAsset = alphaStEth.depositTokens.list.includes(\n    cellarConfig.baseAsset.symbol\n  )\n  if (id === \"Alpha-stETH\") {\n    return \"deposit\"\n  }\n  if (!includesBaseAsset || cellarConfig.chain.id !== \"ethereum\") {\n    return \"withdraw\"\n  }\n  return \"migrate\"\n}\n\nexport function DepositAndWithdrawButton({\n  row,\n  onDepositModalOpen,\n}: DepositAndWithdrawButtonProps) {\n  const id = row.original.slug\n  const cellarConfig = cellarDataMap[id].config\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData } = lpToken\n\n  // Get net value from row data (main page data structure)\n  // The main page data doesn't include userStrategyData, so we need to check differently\n  const netValue =\n    row.original?.netValue ||\n    row.original?.userStrategyData?.userData?.netValue\n\n  const lpTokenDisabled = checkLPtokenDisabled(lpTokenData)\n  const hasValueInVault = checkHasValueInVault(lpTokenData, netValue)\n\n  const { isConnected, chain } = useAccount()\n  const isBeforeLaunch = checkIsBeforeLaunch(\n    row?.original?.launchDate\n  )\n  const [isOracleModalOpen, setOracleModalOpen] = useState(false)\n  const openOracleModal = () => setOracleModalOpen(true)\n  const closeOracleModal = () => setOracleModalOpen(false)\n\n  const buttonText = getButtonText(\n    row.original.deprecated,\n    lpTokenDisabled,\n    cellarConfig,\n    id\n  )\n\n  const isWithdrawButton = buttonText === \"Withdraw\"\n\n  // Debug logging for withdrawal button logic\n  if (\n    process.env.NEXT_PUBLIC_DEBUG_SORT === \"1\" &&\n    row.original?.name?.includes(\"Real Yield ETH\")\n  ) {\n    console.log(\"Withdrawal button debug:\", {\n      name: row.original?.name,\n      netValue: netValue,\n      coerceNetValue: coerceNetValue(netValue),\n      hasValueInVault: hasValueInVault,\n      isDeprecated: row.original?.deprecated,\n      buttonText: buttonText,\n      isWithdrawButton: buttonText === \"Withdraw\",\n    })\n  }\n\n  return (\n    <>\n      {/* Debug Info */}\n      {process.env.NEXT_PUBLIC_DEBUG_SORT === \"1\" && (\n        <div className=\"text-xs opacity-60\">\n          nv={coerceNetValue(netValue)} tvl=\n          {parseMoneyString(row.original?.tvm?.value)} connected=\n          {String(Boolean(isConnected))}\n        </div>\n      )}\n\n      <Tooltip\n        bg=\"surface.bg\"\n        color=\"neutral.300\"\n        label={\n          row.original.deprecated\n            ? \"Vault Deprecated\"\n            : \"Connect your wallet first\"\n        }\n        shouldWrapChildren\n        display={checkDisplay(\n          row.original.deprecated,\n          lpTokenDisabled,\n          isConnected,\n          isBeforeLaunch\n        )}\n      >\n        {isWithdrawButton ? (\n          <SecondaryButton\n            disabled={checkButtonDisabled(\n              row.original?.isContractNotReady,\n              row.original.deprecated,\n              lpTokenDisabled,\n              hasValueInVault,\n              isConnected,\n              isBeforeLaunch,\n              true // isWithdrawButton\n            )}\n            onClick={async (e) => {\n              e.stopPropagation()\n              // analytics.track(\"home.deposit.modal-opened\")\n\n              // Check if user is on the right chain, if not prompt them to switch\n              if (chain?.id !== cellarConfig.chain.wagmiId) {\n                // Continue to manage page where user can switch\n                window.location.href = `/strategies/${id}/manage`\n                return\n              }\n              //! if share price oracle updating..\n              //if (row.original.slug === \"Turbo-SOMM\") {\n              //  openOracleModal()\n              //  return\n              //}\n\n              if (row.original.deprecated) {\n                onDepositModalOpen({\n                  id: row.original.slug,\n                  type: \"withdraw\",\n                })\n                return\n              }\n              onDepositModalOpen({\n                id: row.original.slug,\n                type: getButtonType(\n                  cellarConfig,\n                  id,\n                  row.original.deprecated\n                ),\n              })\n            }}\n            data-testid=\"withdraw-btn\"\n          >\n            {buttonText}\n          </SecondaryButton>\n        ) : (\n          <BaseButton\n            disabled={checkButtonDisabled(\n              row.original?.isContractNotReady,\n              row.original.deprecated,\n              lpTokenDisabled,\n              hasValueInVault,\n              isConnected,\n              isBeforeLaunch,\n              false // isWithdrawButton (this is for deposit/migrate buttons)\n            )}\n            variant=\"solid\"\n            onClick={async (e) => {\n              e.stopPropagation()\n              // analytics.track(\"home.deposit.modal-opened\")\n\n              // Check if user is on the right chain, if not prompt them to switch\n              if (chain?.id !== cellarConfig.chain.wagmiId) {\n                // Continue to manage page where user can switch\n                window.location.href = `/strategies/${id}/manage`\n                return\n              }\n              //! if share price oracle updating..\n              //if (row.original.slug === \"Turbo-SOMM\") {\n              //  openOracleModal()\n              //  return\n              //}\n\n              if (row.original.deprecated) {\n                onDepositModalOpen({\n                  id: row.original.slug,\n                  type: \"withdraw\",\n                })\n                return\n              }\n              onDepositModalOpen({\n                id: row.original.slug,\n                type: getButtonType(\n                  cellarConfig,\n                  id,\n                  row.original.deprecated\n                ),\n              })\n            }}\n            data-testid=\"deposit-btn\"\n          >\n            {buttonText}\n          </BaseButton>\n        )}\n        {isOracleModalOpen && (\n          <Modal\n            isOpen={isOracleModalOpen}\n            onClose={closeOracleModal}\n            isCentered\n          >\n            <ModalOverlay />\n            <ModalContent\n              p={2}\n              w=\"auto\"\n              zIndex={401}\n              borderWidth={1}\n              borderColor=\"purple.dark\"\n              borderRadius={12}\n              bg=\"surface.bg\"\n              fontWeight=\"semibold\"\n              _focus={{\n                outline: \"unset\",\n                outlineOffset: \"unset\",\n                boxShadow: \"unset\",\n              }}\n            >\n              <ModalCloseButton />\n              <ModalHeader textAlign=\"center\">Notice!</ModalHeader>\n              <ModalBody textAlign=\"center\">\n                <Text>\n                  Deposits and withdrawals have been temporarily\n                  disabled for Turbo SOMM while our oracle updates.\n                  Normal operations are set to resume on Dec 21st.\n                </Text>\n                <br />\n                <Text>\n                  All user funds are safe. We appreciate your\n                  understanding.\n                </Text>\n              </ModalBody>\n            </ModalContent>\n          </Modal>\n        )}\n      </Tooltip>\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/DepositButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openOracleModal' is assigned a value but never used.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellarData' is assigned a value but never used.","line":31,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ButtonProps, useDisclosure } from \"@chakra-ui/react\"\nimport ClientOnly from \"components/ClientOnly\"\nimport { DepositModal } from \"components/_modals/DepositModal\"\nimport { NotifyModal } from \"components/_modals/NotifyModal\"\nimport { FC } from \"react\"\nimport { BaseButton } from \"./BaseButton\"\nimport {\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useRouter } from \"next/router\"\n\nexport const DepositButton: FC<ButtonProps> = (props) => {\n  const depositModal = useDisclosure()\n  const notifyModal = useDisclosure()\n\n  const [isOracleModalOpen, setOracleModalOpen] = useState(false)\n  const openOracleModal = () => setOracleModalOpen(true)\n  const closeOracleModal = () => setOracleModalOpen(false)\n\n  const { id: _id } = useDepositModalStore()\n  const id = (useRouter().query.id as string) || _id\n  const cellarData = cellarDataMap[id]\n\n  return (\n    <ClientOnly>\n      <BaseButton\n        variant=\"solid\"\n        onClick={(e) => {\n          e.stopPropagation()\n          //! if share price oracle updating..\n          //if (cellarData.slug === \"Turbo-SOMM\") {\n          //  openOracleModal()\n          //  return\n          //}\n\n          depositModal.onOpen()\n\n          if (!depositModal.isOpen) {\n            // analytics.track(\"deposit.modal-opened\")\n          }\n        }}\n        {...props}\n      >\n        Deposit\n      </BaseButton>\n      {isOracleModalOpen ? (\n        <Modal isOpen={isOracleModalOpen} onClose={closeOracleModal} isCentered>\n          <ModalOverlay />\n          <ModalContent\n            p={2}\n            w=\"auto\"\n            zIndex={401}\n            borderWidth={1}\n            borderColor=\"purple.dark\"\n            borderRadius={12}\n            bg=\"surface.bg\"\n            fontWeight=\"semibold\"\n            _focus={{\n              outline: \"unset\",\n              outlineOffset: \"unset\",\n              boxShadow: \"unset\",\n            }}\n          >\n            <ModalCloseButton />\n            <ModalHeader textAlign=\"center\">Notice!</ModalHeader>\n            <ModalBody textAlign=\"center\">\n              <Text>\n                Deposits and withdrawals have been temporarily\n                disabled for Turbo SOMM while our oracle updates.\n                Normal operations are set to resume on Dec 21st.\n              </Text>\n              <br />\n              <Text>\n                All user funds are safe. We appreciate your\n                understanding.\n              </Text>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      ) : (\n        <>\n          <DepositModal\n            isOpen={depositModal.isOpen}\n            onClose={depositModal.onClose}\n            notifyModal={notifyModal}\n          />\n          <NotifyModal\n            isOpen={notifyModal.isOpen}\n            onClose={notifyModal.onClose}\n          />\n        </>\n      )}\n    </ClientOnly>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/SecondaryButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/TertiaryButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/UnbondButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/UnstakeButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/VaultActionButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":2,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  Heading,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\"\nimport { useAccount, useSwitchChain } from \"wagmi\"\nimport ChainSwitcherInline from \"components/network/ChainSwitcherInline\"\nimport { BaseButton } from \"./BaseButton\"\nimport { SecondaryButton } from \"./SecondaryButton\"\n\nexport type VaultStatus = \"active\" | \"paused\" | \"withdrawals-only\"\n\nexport function VaultActionButton({\n  vault,\n}: {\n  vault: {\n    status?: VaultStatus\n    config?: { chain?: { wagmiId?: number; displayName?: string } }\n    onAction?: () => void\n  }\n}) {\n  const status: VaultStatus = vault?.status ?? \"active\"\n  const label =\n    status === \"withdrawals-only\"\n      ? \"Enter Withdrawal\"\n      : status === \"paused\"\n      ? \"Paused\"\n      : \"Deposit\"\n\n  const { chain } = useAccount()\n  const expectedChainId = vault?.config?.chain?.wagmiId\n  const isWrongChain = Boolean(\n    expectedChainId && chain?.id !== expectedChainId\n  )\n  const { switchChainAsync } = useSwitchChain()\n\n  return (\n    <>\n      {isWrongChain && status !== \"paused\" ? (\n        <Popover\n          placement=\"bottom\"\n          isLazy\n          returnFocusOnClose\n          initialFocusRef={undefined}\n          closeOnBlur={false}\n        >\n          <PopoverTrigger>\n            <BaseButton\n              size=\"md\"\n              height=\"44px\"\n              minW=\"148px\"\n              onClick={(e) => e.stopPropagation()}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.stopPropagation()\n                }\n              }}\n            >\n              Switch network\n            </BaseButton>\n          </PopoverTrigger>\n          <PopoverContent\n            p={3}\n            borderWidth={1}\n            borderColor=\"purple.dark\"\n            borderRadius={12}\n            bg=\"surface.bg\"\n            _focus={{ outline: \"unset\", boxShadow: \"unset\" }}\n            _focusVisible={{\n              boxShadow: \"0 0 0 3px var(--chakra-colors-purple-base)\",\n            }}\n          >\n            <PopoverBody>\n              <Stack spacing={2}>\n                <Heading as=\"h3\" size=\"sm\">\n                  Switch to {vault?.config?.chain?.displayName} to\n                  continue\n                </Heading>\n                <ChainSwitcherInline\n                  requiredChainId={expectedChainId}\n                  fullWidth\n                  onSwitched={async () => {\n                    try {\n                      await switchChainAsync?.({\n                        chainId: expectedChainId!,\n                      })\n                      // auto-continue original action if provided\n                      vault?.onAction?.()\n                    } catch {\n                      // swallow; upstream toast already handles failure\n                    }\n                  }}\n                />\n              </Stack>\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      ) : (\n        <>\n          {status === \"withdrawals-only\" ? (\n            <SecondaryButton\n              size=\"md\"\n              height=\"44px\"\n              minW=\"148px\"\n              isDisabled={false}\n              onClick={(e) => {\n                e.stopPropagation()\n                vault?.onAction?.()\n              }}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.stopPropagation()\n                }\n              }}\n            >\n              {label}\n            </SecondaryButton>\n          ) : (\n            <BaseButton\n              size=\"md\"\n              height=\"44px\"\n              minW=\"148px\"\n              isDisabled={status === \"paused\"}\n              onClick={(e) => {\n                e.stopPropagation()\n                vault?.onAction?.()\n              }}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\" || e.key === \" \") {\n                  e.stopPropagation()\n                }\n              }}\n            >\n              {label}\n            </BaseButton>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/WithdrawButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'openOracleModal' is assigned a value but never used.","line":29,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellarData' is assigned a value but never used.","line":34,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":51,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ButtonProps, Tooltip, useDisclosure } from \"@chakra-ui/react\"\nimport { SecondaryButton } from \"./SecondaryButton\"\nimport { WithdrawModal } from \"components/_modals/WithdrawModal\"\nimport {\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useRouter } from \"next/router\"\n\nexport const WithdrawButton = ({ isDeprecated, ...buttonProps }:\n   ButtonProps & {\n   isDeprecated?: boolean\n }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  function closeModal() {\n    // analytics.track(\"withdraw.cancelled\")\n    onClose()\n  }\n  const [isOracleModalOpen, setOracleModalOpen] = useState(false)\n  const openOracleModal = () => setOracleModalOpen(true)\n  const closeOracleModal = () => setOracleModalOpen(false)\n\n  const { id: _id } = useDepositModalStore()\n  const id = (useRouter().query.id as string) || _id\n  const cellarData = cellarDataMap[id]\n\n  return (\n    <>\n      <>\n        <Tooltip\n          hasArrow\n          arrowShadowColor=\"purple.base\"\n          label={\n            \"Withdraw your funds from the cellar's liquid reserve.\"\n          }\n          placement=\"top\"\n          color=\"neutral.300\"\n          bg=\"surface.bg\"\n          textAlign=\"center\"\n        >\n          <SecondaryButton\n            onClick={(e) => {\n              //! if share price oracle updating..\n              //if (cellarData.slug === \"Turbo-SOMM\") {\n              //  openOracleModal()\n              //  return\n              //}\n\n              onOpen()\n            }}\n            {...buttonProps}\n          >\n            {isDeprecated\n              ? \"Withdraw Only\"\n              : \"Withdraw\"}\n          </SecondaryButton>\n        </Tooltip>\n        <WithdrawModal isOpen={isOpen} onClose={closeModal} />\n      </>\n      {isOracleModalOpen && (\n        <Modal\n          isOpen={isOracleModalOpen}\n          onClose={closeOracleModal}\n          isCentered\n        >\n          <ModalOverlay />\n          <ModalContent\n            p={2}\n            w=\"auto\"\n            zIndex={401}\n            borderWidth={1}\n            borderColor=\"purple.dark\"\n            borderRadius={12}\n            bg=\"surface.bg\"\n            fontWeight=\"semibold\"\n            _focus={{\n              outline: \"unset\",\n              outlineOffset: \"unset\",\n              boxShadow: \"unset\",\n            }}\n          >\n            <ModalCloseButton />\n            <ModalHeader textAlign=\"center\">Notice!</ModalHeader>\n            <ModalBody textAlign=\"center\">\n              <Text>\n                Deposits and withdrawals have been temporarily\n                disabled for Turbo SOMM while our oracle updates.\n                Normal operations are set to resume on Dec 21st.\n              </Text>\n              <br />\n              <Text>\n                All user funds are safe. We appreciate your\n                understanding.\n              </Text>\n            </ModalBody>\n          </ModalContent>\n        </Modal>\n      )}\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_buttons/WithdrawQueueButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ButtonProps, Tooltip, useDisclosure } from \"@chakra-ui/react\"\nimport { BaseButton } from \"./BaseButton\"\nimport { WithdrawQueueModal } from \"components/_modals/WithdrawQueueModal\"\nimport { Chain } from \"src/data/chainConfig\"\n\nexport const WithdrawQueueButton = ({ buttonLabel, onSuccessfulWithdraw, showTooltip, ...props }: ButtonProps & {\n  buttonLabel: string\n  onSuccessfulWithdraw?: () => void\n  showTooltip?: boolean\n  chain: Chain\n}) => {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  function closeModal() {\n    onClose()\n  }\n\n  return (\n    <>\n      <Tooltip\n        hasArrow\n        arrowShadowColor=\"purple.base\"\n        label={\n          \"Save gas by initiating a withdrawal request which will be automatically fulfilled at a later time\"\n        }\n        color=\"neutral.300\"\n        placement=\"bottom\"\n        bg=\"surface.bg\"\n        hidden={!showTooltip}\n        textAlign=\"center\"\n      >\n        <BaseButton\n          onClick={(e) => {\n            onOpen()\n          }}\n          {...props}\n        >\n          {buttonLabel}\n        </BaseButton>\n      </Tooltip>\n      <WithdrawQueueModal\n        isOpen={isOpen}\n        onClose={closeModal}\n        onSuccessfulWithdraw={onSuccessfulWithdraw}\n      />\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/ApyPerfomanceCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":42,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  BoxProps,\n  Button,\n  HStack,\n  Skeleton,\n  Stack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport { TransparentCard } from \"./TransparentCard\"\nimport { CardHeading } from \"components/_typography/CardHeading\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { ErrorCard } from \"./ErrorCard\"\nimport { LineSeries, Point } from \"@nivo/line\"\nimport { ChartTooltipItem } from \"components/_charts/ChartTooltipItem\"\nimport { format } from \"date-fns\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { useApyChart } from \"data/context/apyChartContext\"\nimport { ApyChart } from \"components/_charts/ApyChart\"\nimport { apyChartLabel } from \"data/uiConfig\"\n\nexport const ApyPerfomanceCard = (props: BoxProps) => {\n  const { data, timeArray, apyChange, isFetching, isError } =\n    useApyChart()\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\")\n  // Default timeline\n  const [timeline, setTimeline] = useState<string>(\n    timeArray[timeArray.length - 1].title\n  )\n  const [pointActive, setPointActive] = useState<Point<LineSeries>>()\n\n  const MobileTooltip = () => {\n    if (!!pointActive && !isLarger768) {\n      const { id: pointId } = pointActive\n      const [_, i] = pointId.split(\".\")\n      return (\n        <Stack\n          p={4}\n          bg=\"surface.blackTransparent\"\n          borderWidth={1}\n          borderColor=\"purple.base\"\n          borderRadius={8}\n          textTransform=\"capitalize\"\n        >\n          {data.series?.map((item) => {\n            return (\n              <ChartTooltipItem\n                key={item.id}\n                backgroundColor=\"neutral.100\"\n                name=\"30D MA APY\"\n                percentage={`${String(\n                  data.series?.find((s) => s.id === item.id)?.data[\n                    Number(i)\n                  ]?.y\n                )}`}\n              />\n            )\n          })}\n          <Text color=\"neutral.400\">\n            {format(\n              new Date(String(data.series?.[0].data[Number(i)].x)),\n              \"MMM, d, yyyy, HH:mm\"\n            )}\n          </Text>\n        </Stack>\n      )\n    }\n    return null\n  }\n\n  if (isError) {\n    return <ErrorCard />\n  }\n\n  return (\n    <Skeleton\n      h={isFetching ? \"450px\" : \"none\"}\n      startColor=\"surface.primary\"\n      endColor=\"surface.secondary\"\n      borderRadius={{ base: 0, sm: 24 }}\n      isLoaded={!isFetching}\n      overflow=\"none\"\n    >\n      <TransparentCard\n        px={{ base: 6, sm: 6, md: 8 }}\n        py={{ base: 6, md: 8 }}\n        overflow=\"visible\"\n        zIndex={1}\n        {...props}\n      >\n        <VStack spacing={6} align=\"stretch\">\n          <Box h=\"20rem\" mb={{ base: 12, sm: \"2.2rem\", md: 0 }}>\n            <HStack\n              justify=\"space-between\"\n              align=\"flex-start\"\n              wrap=\"wrap\"\n              rowGap={2}\n            >\n              <HStack spacing={8}>\n                <VStack spacing={0} align=\"flex-start\">\n                  <CardHeading>\n                      {timeline} {apyChartLabel(cellarConfig)}\n                  </CardHeading>\n                  <HStack>\n                    <Text fontSize=\"2.5rem\" fontWeight=\"bold\">\n                      {apyChange?.yFormatted}\n                    </Text>\n                  </HStack>\n                  <Text color=\"neutral.400\" fontSize=\"0.625rem\">\n                    {apyChange?.xFormatted}\n                  </Text>\n                </VStack>\n              </HStack>\n              <VStack\n                spacing={0}\n                align=\"flex-start\"\n                paddingTop=\"-1.5rem\"\n              >\n                <Text\n                  fontSize=\"1rem\"\n                  fontWeight=\"bold\"\n                  paddingBottom=\"1rem\"\n                >\n                  Moving Average\n                </Text>\n                <HStack\n                  spacing={2}\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                  width=\"100%\"\n                >\n                  {timeArray.map((button, i) => {\n                    const { title, onClick } = button\n                    const isSelected = title === timeline\n\n                    return (\n                      <Button\n                        key={i}\n                        variant=\"unstyled\"\n                        p={4}\n                        py={1}\n                        color={isSelected ? \"white\" : \"neutral.400\"}\n                        bg={\n                          isSelected\n                            ? \"surface.tertiary\"\n                            : \"surface.secondary\"\n                        }\n                        borderRadius={8}\n                        borderWidth={1}\n                        borderColor={\n                          isSelected\n                            ? \"purple.dark\"\n                            : \"surface.tertiary\"\n                        }\n                        backdropFilter=\"blur(8px)\"\n                        fontSize=\"sm\"\n                        fontWeight=\"semibold\"\n                        onClick={() => {\n                          const eventName = `cellar.strategy-apy-perfomance-selected-${title}`\n                          analytics.safeTrack(eventName.toLowerCase())\n                          setTimeline(title)\n                          onClick()\n                        }}\n                      >\n                        {title}\n                      </Button>\n                    )\n                  })}\n                </HStack>\n              </VStack>\n            </HStack>\n            <ApyChart\n              timeline={timeline}\n              pointActive={pointActive}\n              setPointActive={setPointActive}\n            />\n          </Box>\n          <Stack>\n            <MobileTooltip />\n          </Stack>\n        </VStack>\n      </TransparentCard>\n    </Skeleton>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BondingTableCard.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":99,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":99,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2908,2921],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":134,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":134,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3827,3840],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12568,12571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12568,12571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\nimport {\n  Flex,\n  Heading,\n  HStack,\n  Icon,\n  Image,\n  Link,\n  Table,\n  TableContainer,\n  TableProps,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tooltip,\n  Tr\n} from \"@chakra-ui/react\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { InformationIcon } from \"components/_icons\"\nimport { InnerCard } from \"./InnerCard\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { bondingPeriodOptions } from \"data/uiConfig\"\nimport { differenceInDays, differenceInHours, differenceInMinutes, formatDistanceToNowStrict, isFuture } from \"date-fns\"\nimport { formatDistance } from \"utils/formatDistance\"\nimport { LighterSkeleton } from \"components/_skeleton\"\nimport { useGeo } from \"context/geoContext\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { FaExternalLinkAlt } from \"react-icons/fa\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport { useAccount } from \"wagmi\"\n\n// TODO: This file has incurred substantial tech debt, it just needs to be rewritten from scratch at this point\n\nconst formatTrancheNumber = (number: number): string => {\n  if (number < 10) {\n    return number.toString().padStart(2, \"0\")\n  }\n\n  return number.toString()\n}\n\nconst BondingTableCard = (props: TableProps) => {\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n  const { data: strategyData } = useStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n  const {\n    data: userData,\n    isLoading,\n    refetch,\n  } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n  const { address } = useAccount()\n  const { stakerSigner } = useCreateContracts(cellarConfig)\n  const [unbondLoading, setUnbondLoading] = useState<Set<number>>(\n    new Set()\n  )\n  const [unstakeLoading, setUnstakeLoading] = useState<Set<number>>(\n    new Set()\n  )\n\n  const sommToken = tokenConfig.find(\n    (token) =>\n      token.coinGeckoId === \"sommelier\" &&\n      token.chain === cellarConfig.chain.id\n  )!\n\n  const stakingEnd = strategyData?.stakingEnd\n  const userDatas = userData?.userStakes\n  const { userStakes = [], claimAllRewards = [] } = userDatas || {}\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const geo = useGeo()\n\n  const handleUnstake = async (id: number) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    try {\n      setUnstakeLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.add(id)\n        return newState\n      })\n      // analytics.track(\"unstake.started\")\n      // @ts-ignore\n      const hash = await stakerSigner?.write.unstake([id])\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess: () => analytics.track(\"unstake.succeeded\"),\n        onError: () => analytics.track(\"unstake.failed\"),\n      })\n      setUnstakeLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.delete(id)\n        return newState\n      })\n      refetch()\n    } catch (error) {\n      setUnstakeLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.delete(id)\n        return newState\n      })\n    }\n  }\n\n  const handleUnBond = async (id: number) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    try {\n      setUnbondLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.add(id)\n        return newState\n      })\n      // analytics.track(\"unbond.started\")\n      // @ts-ignore\n      const hash = await stakerSigner?.write.unbond([id], {\n        account: address\n        // gas used around 63000\n        //gasLimit: 100000,\n      })\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess: () => analytics.track(\"unbond.succeeded\"),\n        onError: () => analytics.track(\"unbond.failed\"),\n      })\n      setUnbondLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.delete(id)\n        return newState\n      })\n      refetch()\n    } catch (error) {\n      setUnbondLoading((oldState) => {\n        const newState = new Set(oldState)\n        newState.delete(id)\n        return newState\n      })\n    }\n  }\n\n  const renderBondAction = (unbondTimestamp: number, i: number) => {\n    const now = new Date()\n    const unbondTime = new Date(unbondTimestamp * 1000)\n\n    // Calculate the difference in days, hours, and minutes\n    const differenceDays = differenceInDays(unbondTime, now)\n    const differenceHours = differenceInHours(unbondTime, now) % 24\n    const differenceMinutes =\n      differenceInMinutes(unbondTime, now) % 60\n\n    // Always format the string to display days, hours, and minutes\n    const timeRemaining = `${differenceDays} day${\n      differenceDays !== 1 ? \"s\" : \"\"\n    }, ${differenceHours} hour${\n      differenceHours !== 1 ? \"s\" : \"\"\n    }, and ${differenceMinutes} minute${\n      differenceMinutes !== 1 ? \"s\" : \"\"\n    }`\n\n    const canUnstake =\n      unbondTimestamp * 1000 < Date.now() &&\n      unbondTimestamp.toString() !== \"0\"\n\n    if (canUnstake)\n      return (\n        <Tooltip\n          hasArrow\n          arrowShadowColor=\"purple.base\"\n          label=\"Click to initiate a transaction that will transfer your LP tokens from the bonding contract directly to your wallet\"\n          placement=\"top\"\n          bg=\"surface.bg\"\n          color=\"neutral.300\"\n        >\n          <SecondaryButton\n            isLoading={unstakeLoading.has(i)}\n            disabled={unstakeLoading.has(i)}\n            size=\"sm\"\n            onClick={() => handleUnstake(i)}\n          >\n            Withdraw LP Tokens\n          </SecondaryButton>\n        </Tooltip>\n      )\n\n    if (unbondTimestamp.toString() === \"0\") {\n      return (\n        <Tooltip\n          hasArrow\n          arrowShadowColor=\"purple.base\"\n          label=\"Click to initiate the unbonding process. After clicking, the countdown will begin based on the unbonding period you've selected. Once the countdown ends, your tokens will be unlocked and available for withdrawal\"\n          placement=\"top\"\n          bg=\"surface.bg\"\n          color=\"neutral.300\"\n        >\n          <SecondaryButton\n            isLoading={unbondLoading.has(i)}\n            disabled={unbondLoading.has(i)}\n            size=\"sm\"\n            onClick={() => handleUnBond(i)}\n          >\n            Start Unbond\n          </SecondaryButton>\n        </Tooltip>\n      )\n    } else {\n      return (\n        <Tooltip\n          hasArrow\n          arrowShadowColor=\"purple.base\"\n          label=\"Time remaining until your tokens are available for withdrawal\"\n          placement=\"top\"\n          bg=\"surface.bg\"\n          color=\"neutral.300\"\n        >\n          <Text>LP Tokens Unlock in {timeRemaining}</Text>\n        </Tooltip>\n      )\n    }\n  }\n  return (\n    <InnerCard\n      bg=\"surface.tertiary\"\n      backdropFilter=\"none\"\n      pt={6}\n      px={4}\n      pb={4}\n    >\n      <TableContainer>\n        <HStack justifyContent=\"space-between\" px={4} pt={2} pb={4}>\n          <Heading fontSize=\"lg\">Active Bonds</Heading>\n          <LighterSkeleton isLoaded={!isLoading} height={4}>\n            {stakingEnd?.endDate && isFuture(stakingEnd?.endDate) && (\n              <Text fontSize=\"xs\">\n                {stakingEnd?.endDate && isFuture(stakingEnd.endDate)\n                  ? `Rewards program ends in ${formatDistanceToNowStrict(\n                      cellarConfig.customReward\n                        ?.stakingDurationOverride ??\n                        stakingEnd?.endDate,\n                      {\n                        locale: { formatDistance },\n                      }\n                    )}`\n                  : \"Program Ended\"}\n              </Text>\n            )}\n          </LighterSkeleton>\n        </HStack>\n\n        <Table\n          variant=\"unstyled\"\n          css={{\n            \"td, th\": {\n              padding: \"12px 16px\",\n              height: \"56px\",\n            },\n            th: {\n              height: \"max-content\",\n            },\n          }}\n          {...props}\n        >\n          <Thead>\n            <Tr color=\"neutral.300\">\n              <Th\n                fontSize={10}\n                fontWeight=\"normal\"\n                textTransform=\"capitalize\"\n              >\n                Tranche\n              </Th>\n              <Tooltip\n                hasArrow\n                arrowShadowColor=\"purple.base\"\n                label=\"Bonded LP tokens earn yield from the vault and liquidity mining rewards\"\n                placement=\"top\"\n                bg=\"surface.bg\"\n                color=\"neutral.300\"\n              >\n                <Th\n                  fontSize={10}\n                  fontWeight=\"normal\"\n                  textTransform=\"capitalize\"\n                >\n                  <HStack spacing={1} align=\"center\">\n                    <Text>Bonded LP Tokens</Text>\n                    <InformationIcon\n                      color=\"neutral.300\"\n                      boxSize={3}\n                    />\n                  </HStack>\n                </Th>\n              </Tooltip>\n              <Tooltip\n                hasArrow\n                arrowShadowColor=\"purple.base\"\n                label=\"This is the period you must wait before your tokens are transferable/withdrawable\"\n                placement=\"top\"\n                bg=\"surface.bg\"\n                color=\"neutral.300\"\n              >\n                <Th\n                  fontSize={10}\n                  fontWeight=\"normal\"\n                  textTransform=\"capitalize\"\n                >\n                  <HStack spacing={1} align=\"center\">\n                    <Text>Selected Unbonding Period</Text>\n                    <InformationIcon\n                      color=\"neutral.300\"\n                      boxSize={3}\n                    />\n                  </HStack>\n                </Th>\n              </Tooltip>\n              {cellarConfig.customReward?.showBondingRewards ===\n              true ? (\n                <Tooltip\n                  hasArrow\n                  arrowShadowColor=\"purple.base\"\n                  label={`Amount of ${\n                    cellarConfig?.customReward?.tokenSymbol ?? \"SOMM\"\n                  } rewards earned and available to be claimed`}\n                  placement=\"top\"\n                  bg=\"surface.bg\"\n                  color=\"neutral.300\"\n                >\n                  <Th\n                    fontSize={10}\n                    fontWeight=\"normal\"\n                    textTransform=\"capitalize\"\n                  >\n                    <HStack spacing={1} align=\"center\">\n                      <Text>\n                        {cellarConfig?.customReward?.tokenSymbol ??\n                          \"SOMM\"}{\" \"}\n                        Rewards\n                      </Text>\n                      <InformationIcon\n                        color=\"neutral.300\"\n                        boxSize={3}\n                      />\n                    </HStack>\n                  </Th>\n                </Tooltip>\n              ) : null}\n              {cellarConfig.customReward?.showSommRewards === true ||\n              cellarConfig.customReward?.showSommRewards ===\n                undefined ? (\n                <>\n                  <Tooltip\n                    hasArrow\n                    arrowShadowColor=\"purple.base\"\n                    label={`Amount of SOMM rewards earned and available to be claimed`}\n                    placement=\"top\"\n                    bg=\"surface.bg\"\n                    color=\"neutral.300\"\n                  >\n                    <Th\n                      fontSize={10}\n                      fontWeight=\"normal\"\n                      textTransform=\"capitalize\"\n                    >\n                      <HStack spacing={1} align=\"center\">\n                        <Text>SOMM Rewards</Text>\n                        <InformationIcon\n                          color=\"neutral.300\"\n                          boxSize={3}\n                        />\n                      </HStack>\n                    </Th>\n                  </Tooltip>\n                </>\n              ) : null}\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody fontWeight=\"bold\">\n            {userStakes?.length &&\n              userStakes.map((data: any, i: number) => {\n                const { amount, lock, unbondTimestamp } =\n                  data\n                const lockMap = bondingPeriodOptions(cellarConfig)\n                if (amount?.toString() === \"0\") return null\n                return (\n                  <Tr\n                    key={i}\n                    _hover={{\n                      bg: \"surface.secondary\",\n                      \"td:first-of-type\": {\n                        borderRadius: \"32px 0 0 32px\",\n                        overflow: \"hidden\",\n                      },\n                      \"td:last-of-type\": {\n                        borderRadius: \"0 32px 32px 0\",\n                        overflow: \"hidden\",\n                      },\n                    }}\n                    _last={{\n                      border: \"none\",\n                    }}\n                  >\n                    <Td>#{formatTrancheNumber(i + 1)}</Td>\n                    <Td>\n                      <HStack spacing={2}>\n                        <Image\n                          src={cellarConfig.lpToken.imagePath}\n                          alt=\"lp token image\"\n                          height=\"20px\"\n                        />\n                        <Text textAlign=\"right\">\n                          {(+(\n                            Number(amount) /\n                            10 ** cellarConfig.cellar.decimals\n                          ).toPrecision(2)).toLocaleString()}\n                        </Text>\n                      </HStack>\n                    </Td>\n                    {/* This handles edge case if users go outside of UI and us staking contract directly for a non ux lock period */}\n                    <Td>\n                      {(lockMap[lock] && lockMap[lock].title) ||\n                        (Object.values(lockMap).length > 0 &&\n                          Object.values(lockMap).slice(-1)[0].title)}\n                    </Td>\n                    {cellarConfig.customReward?.showBondingRewards ===\n                    true ? (\n                      <Td>\n                        {/*!!!!!!!! TODO: this needs to be rewritten */}\n                        {!cellarConfig.customReward\n                          ?.customColumnValue ? (\n                          <>\n                            <HStack spacing={2}>\n                              <Image\n                                src={\n                                  cellarConfig?.customReward\n                                    ?.imagePath ?? sommToken.src\n                                }\n                                alt=\"reward token image\"\n                                height=\"20px\"\n                              />\n                              <Text textAlign=\"right\">\n                                {claimAllRewards\n                                  ? Number(\n                                      toEther(\n                                        claimAllRewards[\n                                          i\n                                        ] || \"0\",\n                                        6,\n                                        false,\n                                        2\n                                      )\n                                    ).toLocaleString()\n                                  : \"0.00\"}\n                              </Text>\n                            </HStack>\n                          </>\n                        ) : (\n                          <>\n                            <HStack\n                              as={Link}\n                              href={`${cellarConfig?.customReward?.customColumnValue}`}\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                            >\n                              <Text\n                                as=\"span\"\n                                fontWeight=\"bold\"\n                                fontSize={16}\n                              >\n                                {\n                                  cellarConfig?.customReward\n                                    ?.customColumnValue\n                                }\n                              </Text>\n                              <Icon\n                                as={FaExternalLinkAlt}\n                                color=\"purple.base\"\n                              />\n                            </HStack>\n                          </>\n                        )}\n                      </Td>\n                    ) : null}\n                    <Td>\n                      {/*!!!!!!!! TODO: this needs to be rewritten */}\n                      {cellarConfig.customReward?.showSommRewards ||\n                      cellarConfig.customReward?.showSommRewards ===\n                        undefined ? (\n                        <>\n                          <HStack spacing={2}>\n                            <Image\n                              src={sommToken.src}\n                              alt=\"reward token image\"\n                              height=\"20px\"\n                            />\n                            <Text textAlign=\"right\">\n                              {claimAllRewards\n                                ? toEther(\n                                    claimAllRewards[i] ||\n                                      \"0\",\n                                    6,\n                                    false,\n                                    2\n                                  )\n                                : \"0.00\"}\n                            </Text>\n                          </HStack>\n                        </>\n                      ) : null}\n                    </Td>\n                    <Td fontWeight=\"normal\">\n                      <Flex justify=\"flex-end\">\n                        {renderBondAction(unbondTimestamp, i)}\n                      </Flex>\n                    </Td>\n                  </Tr>\n                )\n              })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n      {/* <Text fontSize=\"xs\" textAlign=\"center\" pt={4}>\n        After triggering 'Unbond,' you will need to wait through the\n        unbonding period you selected,\n        <br />\n        after which your LP tokens can be unstaked and withdrawn.\n      </Text> */}\n    </InnerCard>\n  )\n}\n\nexport default BondingTableCard\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/EthereumAddress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":6,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Stack, Flex, Text, Spinner } from \"@chakra-ui/react\"\nimport React from \"react\"\nimport { useAccount } from \"wagmi\"\n\nexport const EthereumAddress: React.FC = () => {\n  const { address, isConnecting, isConnected } = useAccount()\n  return (\n    <Stack spacing={2}>\n      <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n        Ethereum Address\n      </Text>\n      <Flex\n        backgroundColor=\"surface.tertiary\"\n        justifyContent=\"center\"\n        borderRadius={16}\n        px={4}\n        height=\"64px\"\n        alignItems=\"center\"\n      >\n        {isConnecting ? (\n          <Spinner size=\"xs\" />\n        ) : (\n          <Text\n            fontSize=\"xs\"\n            fontWeight=\"semibold\"\n            color=\"neutral.300\"\n            overflow=\"auto\"\n          >\n            {address || \"Please connect your Ethereum Wallet\"}\n          </Text>\n        )}\n      </Flex>\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/InputAmount.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chainObj' is assigned a value but never used.","line":41,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'queryKey'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [blockNumber, queryClient, queryKey]","fix":{"range":[1870,1896],"text":"[blockNumber, queryClient, queryKey]"}}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","line":211,"column":15,"nodeType":"Line","messageId":"tsDirectiveCommentRequiresDescription","endLine":211,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Stack,\n  HStack,\n  VStack,\n  Input,\n  Button,\n  Text,\n  Spinner,\n} from \"@chakra-ui/react\"\nimport React, { useEffect, useState } from \"react\"\n\nimport Image from \"next/image\"\nimport { useAccount, useBalance, useBlockNumber } from \"wagmi\"\nimport { formatUnits, getAddress } from \"viem\"\nimport {\n  useBalances as useGrazBalances,\n  useAccount as useGrazAccount,\n  mainnetChains,\n} from \"graz\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useFormContext } from \"react-hook-form\"\nimport { BridgeFormValues } from \".\"\nimport { InformationIcon } from \"components/_icons\"\nimport { chainConfig } from \"data/chainConfig\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport { useQueryClient } from \"@tanstack/react-query\"\n\nexport const InputAmount: React.FC = () => {\n  const { register, setValue, formState, getFieldState, watch } =\n    useFormContext<BridgeFormValues>()\n  const watchType = watch(\"type\")\n  const toSomm = watchType === \"TO_SOMMELIER\"\n  const toEth = watchType === \"TO_ETHEREUM\"\n\n  const isError = !!getFieldState(\"amount\").error\n  const [isActive, setActive] = useState(false)\n  const { address, isConnecting } = useAccount()\n\n  // Get chain id\n  const { chain } = useAccount()\n  const chainObj = chainConfig.find((c) => c.wagmiId === chain?.id)!\n  const sommToken = tokenConfig.find(\n    (t) => t.coinGeckoId === \"sommelier\" && t.chain === \"ethereum\"\n  )!\n  // TODO: Change to below once we adjust for multichain\n  //const sommToken = tokenConfig.find(\n  //  (t) => t.coinGeckoId === \"sommelier\" && t.chain === chainObj.id\n  //)!\n\n  const queryClient = useQueryClient()\n  const { data: blockNumber } = useBlockNumber({ watch: true })\n\n  const { data, error, isLoading, queryKey } = useBalance({\n    address: address,\n    token: getAddress(sommToken.address)\n  })\n\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey })\n  }, [blockNumber, queryClient])\n\n  const { isConnecting: isGrazConnecting } = useGrazAccount()\n  const {\n    data: grazData,\n    isLoading: isGrazLoading,\n    error: grazError,\n  } = useGrazBalances()\n  const sommBalance = grazData?.find((item) => item.denom === \"usomm\")\n  const sommDecimal =\n    mainnetChains.sommelier.currencies.find(\n      (item) => item.coinMinimalDenom === \"usomm\"\n    )?.coinDecimals || 6\n\n  const isBalanceLoading = toSomm\n    ? isConnecting || isLoading\n    : isGrazConnecting || isGrazLoading\n  const onMaxButtonClick = () => {\n    if (toSomm && data) {\n      const amount = parseFloat(\n        toEther(data.value, data.decimals, false)\n      )\n      setValue(\"amount\", amount, { shouldValidate: true })\n    } else if (toEth && sommBalance) {\n      const amount = parseFloat(\n        formatUnits(BigInt(sommBalance.amount), sommDecimal)\n      )\n      setValue(\"amount\", amount, { shouldValidate: true })\n    }\n  }\n\n  return (\n    <Stack spacing={2}>\n      <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n        Enter Amount\n      </Text>\n      <HStack\n        backgroundColor=\"surface.tertiary\"\n        justifyContent=\"space-between\"\n        borderRadius={16}\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        boxShadow={\n          isError\n            ? \"redOutline1\"\n            : isActive\n            ? \"purpleOutline1\"\n            : \"none\"\n        }\n        px={4}\n        py={3}\n        height=\"64px\"\n      >\n        <HStack>\n          <Image\n            width={16}\n            height={16}\n            src=\"/assets/images/coin.png\"\n            alt=\"coin logo big\"\n          />\n          <Text fontWeight=\"semibold\">SOMM</Text>\n        </HStack>\n        <VStack spacing={0} align=\"flex-end\">\n          <Input\n            id=\"amount\"\n            variant=\"unstyled\"\n            pr=\"2\"\n            type=\"number\"\n            step=\"any\"\n            defaultValue=\"0.00\"\n            placeholder=\"0.00\"\n            fontSize=\"lg\"\n            fontWeight={700}\n            textAlign=\"right\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            {...register(\"amount\", {\n              required: \"Enter amount\",\n              valueAsNumber: true,\n              validate: {\n                positive: (v) =>\n                  v > 0 || \"You must submit a positive amount.\",\n                balance: (v) =>\n                  toSomm\n                    ? (data &&\n                        v <=\n                          parseFloat(\n                            toEther(data.value, data.decimals, false)\n                          )) ||\n                      \"Insufficient balance\"\n                    : (sommBalance &&\n                        v <=\n                          parseFloat(\n                            toEther(\n                              sommBalance.amount,\n                              sommDecimal,\n                              false\n                            )\n                          )) ||\n                      \"Insufficient balance\",\n                minimal: (v) =>\n                  toEth\n                    ? v >= 50 || \"Amount must be greater than 50\"\n                    : true,\n              },\n            })}\n          />\n          <HStack spacing={0} fontSize=\"10px\">\n            {isBalanceLoading ? (\n              <Spinner size=\"xs\" mr=\"2\" />\n            ) : (\n              <>\n                <Text as=\"span\">\n                  Available:{\" \"}\n                  {toSomm\n                    ? (data && toEther(data.value, data.decimals)) ||\n                      \"--\"\n                    : (sommBalance &&\n                        formatUnits(BigInt(sommBalance.amount), sommDecimal)) ||\n                      \"--\"}\n                </Text>\n                <Button\n                  variant=\"unstyled\"\n                  p={0}\n                  w=\"max-content\"\n                  h=\"max-content\"\n                  textTransform=\"uppercase\"\n                  fontSize=\"inherit\"\n                  fontWeight={600}\n                  onClick={onMaxButtonClick}\n                >\n                  max\n                </Button>\n              </>\n            )}\n          </HStack>\n        </VStack>\n      </HStack>\n      {formState.errors.amount && (\n        <HStack spacing=\"6px\">\n          <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n          <Text fontSize=\"xs\" fontWeight=\"semibold\" color=\"red.light\">\n            {formState.errors.amount.message}\n          </Text>\n        </HStack>\n      )}\n      {((toEth && grazError) || (toSomm && error)) && (\n        <HStack spacing=\"6px\">\n          <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n          <Text fontSize=\"xs\" fontWeight=\"semibold\" color=\"red.light\">\n            {(toEth && error?.message) ||\n              // @ts-expect-error\n              (toSomm && grazError?.message)}\n          </Text>\n        </HStack>\n      )}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/InputEthereumAddress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":27,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Stack,\n  Input,\n  Text,\n  HStack,\n  InputProps,\n  FormErrorMessage,\n  Box,\n} from \"@chakra-ui/react\"\nimport { InformationIcon, MoneyWalletIcon } from \"components/_icons\"\nimport { isAddress } from 'viem'\nimport { useBrandedToast } from \"hooks/chakra\"\nimport React, { useState } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useAccount } from \"wagmi\"\nimport { BridgeFormValues } from \".\"\n\nexport const InputEthereumAddress: React.FC<InputProps> = ({\n  children,\n  ...rest\n}) => {\n  const { addToast, closeAll } = useBrandedToast()\n  const { register, setValue, getValues, getFieldState } =\n    useFormContext<BridgeFormValues>()\n  const isError = !!getFieldState(\"address\").error\n  const [isActive, setActive] = useState(false)\n  const { address, isConnected } = useAccount()\n\n  const onAutofillClick = async (isValidateAddress?: boolean) => {\n    try {\n      if (!address) throw new Error(\"No wallet connected\")\n      setValue(\n        \"address\",\n        isValidateAddress ? getValues().address : address,\n        {\n          shouldValidate: true,\n        }\n      )\n    } catch (e) {\n      const error = e as Error\n      addToast({\n        heading: \"Import from Wallet\",\n        body: <Text>{error.message}</Text>,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n    }\n  }\n\n  return (\n    <Stack spacing={2}>\n      <HStack justifyContent=\"space-between\">\n        <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n          Ethereum Address\n        </Text>\n\n        <HStack\n          as=\"button\"\n          type=\"button\"\n          spacing={1}\n          onClick={() => onAutofillClick()}\n        >\n          <Text fontWeight=\"bold\" color=\"white\" fontSize=\"xs\">\n            Import ETH address\n          </Text>\n          <MoneyWalletIcon boxSize=\"10px\" />\n        </HStack>\n      </HStack>\n      <Box\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        boxShadow={isError ? \"redOutline1\" : \"purpleOutline1\"}\n        borderRadius=\"16px\"\n      >\n        <Input\n          id=\"address\"\n          placeholder=\"Enter Ethereum address\"\n          fontSize=\"xs\"\n          fontWeight={700}\n          backgroundColor=\"surface.tertiary\"\n          variant=\"unstyled\"\n          borderRadius=\"16px\"\n          px={4}\n          py={6}\n          maxH=\"64px\"\n          _placeholder={{\n            fontSize: \"lg\",\n          }}\n          type=\"text\"\n          {...register(\"address\", {\n            required: \"Enter Ethereum address\",\n            validate: {\n              validAddress: (v) =>\n                isAddress(v) || \"Address is not valid\",\n            },\n          })}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          {...rest}\n        />\n      </Box>\n      <FormErrorMessage>\n        <HStack spacing=\"6px\">\n          <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n          <Text fontSize=\"xs\" fontWeight=\"semibold\" color=\"red.light\">\n            Address is not valid—make sure your Ethereum address\n          </Text>\n        </HStack>\n      </FormErrorMessage>\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/InputSommelierAddress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":29,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":44,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Stack,\n  Input,\n  Text,\n  HStack,\n  InputProps,\n  FormErrorMessage,\n  Image,\n  Box,\n} from \"@chakra-ui/react\"\nimport { Link } from \"components/Link\"\nimport { ExternalLinkIcon, InformationIcon } from \"components/_icons\"\nimport { getKeplr, mainnetChains, useAccount } from \"graz\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport React, { useState } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { validateSommelierAddress } from \"utils/validateSommelierAddress\"\nimport { BridgeFormValues } from \".\"\n\nexport const InputSommelierAddress: React.FC<InputProps> = ({\n  children,\n  ...rest\n}) => {\n  const { addToast, closeAll } = useBrandedToast()\n  const { register, setValue, getValues, getFieldState } =\n    useFormContext<BridgeFormValues>()\n  const isError = !!getFieldState(\"address\").error\n  const [isActive, setActive] = useState(false)\n  const { isConnected } = useAccount()\n\n  const onAutofillClick = async (isValidateAddress?: boolean) => {\n    try {\n      const keplr = getKeplr()\n      const key = await keplr.getKey(mainnetChains.sommelier.chainId)\n      if (!key.bech32Address) throw new Error(\"Address not defined\")\n      setValue(\n        \"address\",\n        isValidateAddress ? getValues().address : key.bech32Address,\n        {\n          shouldValidate: true,\n        }\n      )\n    } catch (e) {\n      const error = e as Error\n\n      return addToast({\n        heading: \"Keplr not found\",\n        body: (\n          <Text>\n            {\" \"}\n            <>\n              <Link\n                display=\"flex\"\n                alignItems=\"center\"\n                href=\"https://www.keplr.app/download\"\n                isExternal\n              >\n                <Text as=\"span\">Please install Keplr extension</Text>\n                <ExternalLinkIcon ml={2} />\n              </Link>\n            </>\n          </Text>\n        ),\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n    }\n  }\n\n  return (\n    <Stack spacing={2}>\n      <HStack justifyContent=\"space-between\">\n        <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n          Somm Address\n        </Text>\n        <HStack\n          as=\"button\"\n          type=\"button\"\n          spacing={1}\n          onClick={() => onAutofillClick()}\n        >\n          <Text fontWeight=\"bold\" color=\"white\" fontSize=\"xs\">\n            Import from Keplr\n          </Text>\n          <Image\n            src=\"/assets/images/keplr.png\"\n            alt=\"Keplr logo\"\n            width={4}\n          />\n        </HStack>\n      </HStack>\n      <Box\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        boxShadow={isError ? \"redOutline1\" : \"purpleOutline1\"}\n        borderRadius=\"16px\"\n      >\n        <Input\n          id=\"sommelierAddress\"\n          placeholder=\"Enter Somm address\"\n          fontSize=\"xs\"\n          fontWeight={700}\n          backgroundColor=\"surface.tertiary\"\n          variant=\"unstyled\"\n          borderRadius=\"16px\"\n          px={4}\n          py={6}\n          maxH=\"64px\"\n          _placeholder={{\n            fontSize: \"lg\",\n          }}\n          type=\"text\"\n          {...register(\"address\", {\n            required: \"Enter Somm address\",\n            validate: {\n              validAddress: (v) =>\n                validateSommelierAddress(v) || \"Address is not valid\",\n            },\n          })}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          {...rest}\n        />\n      </Box>\n      <FormErrorMessage>\n        <HStack spacing=\"6px\">\n          <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n          <Text fontSize=\"xs\" fontWeight=\"semibold\" color=\"red.light\">\n            Address is not valid—make sure Somm address is from a\n            Cosmos wallet\n          </Text>\n        </HStack>\n      </FormErrorMessage>\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/SommReceivedInEth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/SommelierAddress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/BridgeCard/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLarger768' is assigned a value but never used.","line":28,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Heading,\n  HStack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon, InformationIcon } from \"components/_icons\";\nimport React from \"react\";\nimport { TransparentCard } from \"../TransparentCard\";\nimport { Link } from \"components/Link\";\nimport { BridgeForm } from \"components/_forms/BridgeForm\";\nimport { useAccount, useSwitchChain } from \"wagmi\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useIsMounted } from \"hooks/utils/useIsMounted\";\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\";\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\";\nimport { chainSlugMap } from \"data/chainConfig\";\nimport { useBrandedToast } from \"hooks/chakra\";\n\nexport interface BridgeFormValues {\n  amount: number;\n  address: string;\n  type: \"TO_SOMMELIER\" | \"TO_ETHEREUM\";\n}\n\nexport const BridgeCard: React.FC = () => {\n  const isMounted = useIsMounted();\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\");\n  const { isConnected, chain: wagmiChain } = useAccount();\n  const methods = useForm<BridgeFormValues>({\n    defaultValues: {\n      type: \"TO_SOMMELIER\",\n    },\n  });\n  const { switchChainAsync } = useSwitchChain();\n  const { addToast, close } = useBrandedToast();\n\n  const ethChain = chainSlugMap.ETHEREUM;\n\n  const WrongNetwork = (\n    <HStack\n      p={4}\n      mb={12}\n      spacing={4}\n      align=\"flex-start\"\n      backgroundColor=\"purple.dark\"\n      border=\"2px solid\"\n      borderRadius={16}\n      borderColor=\"purple.base\"\n    >\n      <InformationIcon color=\"yellow\" boxSize={6} />\n      <HStack justifyContent=\"center\" align=\"flex-start\" width=\"100%\">\n        <VStack align=\"flex-start\" spacing={4}>\n          <Heading size=\"md\" width=\"100%\">\n            <HStack\n              align=\"center\"\n              width=\"100%\"\n              justifyContent=\"center\"\n            >\n              <Text>Wrong Network</Text>\n            </HStack>\n          </Heading>\n          <Text fontFamily=\"Haffer\" align=\"center\">\n            Your connected wallet is on the {wagmiChain?.name} network. For\n            the time being, the bridge is only available between\n            Ethereum and Somm. Please switch to{\" \"}\n            {ethChain.displayName} to use the bridge.\n          </Text>\n          <HStack align=\"center\" width=\"100%\" justifyContent=\"center\">\n            <SecondaryButton\n              variant=\"solid\"\n              color=\"white\"\n              bg=\"gradient.primary\"\n              borderWidth={2}\n              borderColor=\"purple.base\"\n              onClick={async () => {\n                try {\n                  await switchChainAsync?.({ chainId: ethChain.wagmiId });\n                  // Reload the page to ensure everything is in sync\n                  window.location.reload();\n                } catch (e) {\n                  const error = e as Error;\n                  addToast({\n                    heading: \"Change network error\",\n                    status: \"error\",\n                    body: <Text>{error?.message}</Text>,\n                    closeHandler: close,\n                    duration: null,\n                  });\n                }\n              }}\n            >\n              Switch to {ethChain.displayName}\n            </SecondaryButton>\n          </HStack>\n        </VStack>\n      </HStack>\n    </HStack>\n  );\n\n  return (\n    <VStack spacing={4}>\n      {isMounted &&\n      isConnected &&\n      wagmiChain &&\n      wagmiChain.id !== ethChain.wagmiId\n        ? WrongNetwork\n        : null}\n      <TransparentCard\n        maxW=\"432px\"\n        w=\"full\"\n        boxShadow=\"purpleOutline1\"\n        px={{ base: 5, md: 12 }}\n        pt=\"52px\"\n        pb=\"48px\"\n        borderRadius={{ base: \"32px\", md: \"40px\" }}\n        mx={4}\n      >\n        <Heading as=\"h4\" fontSize={24} mb=\"44px\">\n          Bridge\n        </Heading>\n        <Text fontSize=\"md\" mb=\"41px\">\n          Bridge your Ethereum SOMM back home to its native Cosmos\n          representation on Somm or from Somm to Ethereum.{\" \"}\n          <Link\n            ml={1}\n            fontSize=\"xs\"\n            fontWeight=\"semibold\"\n            textDecoration=\"underline\"\n            href=\"https://www.notion.so/Bridge-UI-88307640a6ab4f649b6a0b3cb6cb4d34\"\n            target=\"_blank\"\n          >\n            Read More{\" \"}\n            <ExternalLinkIcon boxSize={3} color=\"purple.base\" />\n          </Link>\n        </Text>\n        {isMounted && (\n          <FormProvider {...methods}>\n            <BridgeForm wrongNetwork={wagmiChain && wagmiChain.id !== ethChain.wagmiId}/>\n          </FormProvider>\n        )}\n      </TransparentCard>\n    </VStack>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CardBase.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[150,153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[150,153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[170,173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[170,173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Flex, FlexProps } from \"@chakra-ui/react\"\nimport { ReactElement } from \"react\"\n\ninterface Props extends FlexProps {\n  children: ReactElement<any> | ReactElement<any>[]\n}\nexport const CardBase: React.FC<Props> = ({ children, ...rest }) => {\n  return (\n    <Flex\n      border=\"1px solid\"\n      borderColor=\"surface.tertiary\"\n      backgroundColor=\"surface.secondary\"\n      borderRadius=\"16px\"\n      alignItems=\"center\"\n      backdropFilter=\"blur(5px)\"\n      px={6}\n      py={4}\n      {...rest}\n    >\n      {children}\n    </Flex>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/AboutCellar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isStakingStillRunning' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Flex, Stack, Text } from \"@chakra-ui/react\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport {\n  apyLabel,\n  isAPYEnabled,\n  isDailyChangeEnabled,\n  isTokenPriceEnabled,\n  tokenPriceTooltipContent,\n} from \"data/uiConfig\"\nimport { CellarCardData } from \"./CellarCardDisplay\"\n\nimport { UserStats } from \"./UserStats\"\nimport { CellarStats, CellarStatsLabel } from \"./CellarStats\"\nimport { PercentageText } from \"components/PercentageText\"\nimport { isComingSoon } from \"utils/isComingSoon\"\nimport { format, utcToZonedTime } from \"date-fns-tz\"\nimport { COUNT_DOWN_TIMEZONE } from \"utils/config\"\nimport { TransparentSkeleton } from \"components/_skeleton\"\nimport { isFuture } from \"date-fns\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\n\ninterface Props {\n  data: CellarCardData\n}\n\nexport const AboutCellar: React.FC<Props> = ({ data }) => {\n  const cellarConfig = cellarDataMap[data.cellarId].config\n\n  const { data: strategyData, isLoading } = useStrategyData(\n    cellarConfig.cellar.address, cellarConfig.chain.id\n  )\n\n  const launchDate = strategyData?.launchDate\n  const baseApy = strategyData?.baseApy\n  const rewardsApy = strategyData?.rewardsApy\n  const stakingEnd = strategyData?.stakingEnd\n  const countdown = isComingSoon(launchDate)\n\n  const isStakingStillRunning =\n    stakingEnd?.endDate && isFuture(stakingEnd?.endDate)\n  const apyTooltip = apyLabel(cellarConfig)\n\n  const launchingDate = (() => {\n    if (!launchDate) return \"Coming soon\"\n    const dateTz = new Date(launchDate)\n    const et = utcToZonedTime(dateTz, COUNT_DOWN_TIMEZONE)\n    return `${format(\n      et,\n      \"iii MMM d, h:mmaaa\"\n    )} ${COUNT_DOWN_TIMEZONE}`\n  })()\n\n  const tokenPrice = strategyData?.tokenPrice\n  const dailyChange = strategyData?.changes?.daily\n  return (\n    <>\n      {!countdown && (\n        <Stack mx={2} spacing={1}>\n          <Stack spacing={1}>\n            {isAPYEnabled(cellarConfig) &&\n              (isLoading ? (\n                <>\n                  <TransparentSkeleton\n                    h=\"14px\"\n                    w=\"80px\"\n                    startColor=\"purple.dark\"\n                    endColor=\"surface.secondary\"\n                  />\n                  <TransparentSkeleton\n                    h=\"14px\"\n                    w=\"100px\"\n                    startColor=\"purple.dark\"\n                    endColor=\"surface.secondary\"\n                  />\n                </>\n              ) : (\n                <>\n                  {baseApy?.formatted !== \"0.0%\" && (\n                    <CellarStats\n                      tooltip={apyTooltip}\n                      title={apyLabel(cellarConfig)}\n                      value={baseApy?.formatted?.toString() || \"...\"}\n                      isLoading={isLoading}\n                    />\n                  )}\n                  {rewardsApy?.formatted !== \"0.0%\" && (\n                    <CellarStats\n                      title={\n                        cellarConfig.customReward\n                          ?.customRewardAPYTooltip ?? \"Rewards APY\"\n                      }\n                      value={\n                        cellarConfig.customReward\n                          ?.customRewardAPYTooltip ??\n                        (rewardsApy?.formatted || \"...\")\n                      }\n                      isLoading={isLoading}\n                      colorValue=\"lime.base\"\n                    />\n                  )}\n                </>\n              ))}\n          </Stack>\n\n          {isTokenPriceEnabled(cellarConfig) && (\n            <CellarStats\n              tooltip={tokenPriceTooltipContent(cellarConfig)}\n              title=\"Token price\"\n              value={tokenPrice || \"--\"}\n              isLoading={isLoading}\n              size=\"md\"\n            />\n          )}\n          {isDailyChangeEnabled(cellarConfig) && (\n            <Flex alignItems=\"center\">\n              <PercentageText data={dailyChange} arrow />\n              <CellarStatsLabel\n                title=\"1D Change\"\n                tooltip=\"% change of current token price vs. token price yesterday\"\n              />\n            </Flex>\n          )}\n        </Stack>\n      )}\n      <Text my={4} mx={2}>\n        {data.description}\n      </Text>\n\n      {!countdown ? (\n        <UserStats\n          data={data}\n          bg=\"surface.secondary\"\n          borderWidth={1}\n          borderColor=\"surface.tertiary\"\n        />\n      ) : (\n        <Stack\n          padding=\"12px 16px\"\n          background=\"surface.secondary\"\n          borderRadius={16}\n          spacing={0}\n          borderWidth={1}\n          borderColor=\"surface.tertiary\"\n        >\n          <Text\n            fontWeight=\"semibold\"\n            fontSize=\"10px\"\n            color=\"neutral.300\"\n          >\n            Launching\n          </Text>\n          <Text fontWeight=\"bold\">{launchingDate}</Text>\n        </Stack>\n      )}\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/Burst.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/CellarCardDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":51,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":51,"endColumn":45,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[1528,1529],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  BoxProps,\n  Heading,\n  Flex,\n  Text,\n  useTheme,\n} from \"@chakra-ui/react\"\nimport { Card } from \"components/_cards/Card\"\nimport { Tag } from \"components/Tag\"\nimport { AboutCellar } from \"./AboutCellar\"\nimport { Burst } from \"./Burst\"\nimport { ComingSoon } from \"./ComingSoon\"\nimport { InlineImage } from \"components/InlineImage\"\nimport { CoinImage } from \"./CoinImage\"\nimport { protocolsImage } from \"utils/protocolsImagePath\"\nimport { formatDistanceToNowStrict, isFuture } from \"date-fns\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { TransparentSkeleton } from \"components/_skeleton\"\nimport { formatDistance } from \"utils/formatDistance\"\nimport { isComingSoon } from \"utils/isComingSoon\"\nimport { ProtocolDataType } from \"../CellarDetailsCard\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\nexport interface CellarCardData {\n  cellarId: string\n  name: string\n  description: string\n  strategyType: string\n  managementFee: string\n  protocols: string | string[]\n}\n\ninterface CellarCardProps extends BoxProps {\n  data: CellarCardData\n  isPlaceholder?: boolean\n  index?: number\n}\n\nexport const CellarCardDisplay: React.FC<CellarCardProps> = ({\n  data,\n  isPlaceholder,\n  index,\n  ...rest\n}) => {\n  const theme = useTheme()\n  const cellarConfig = cellarDataMap[data.cellarId].config\n\n  const { data: strategyData, isLoading } = useStrategyData(\n    cellarConfig.cellar.address, cellarConfig.chain.id\n  )\n  const launchDate = strategyData?.launchDate\n  const protocols = strategyData?.protocols!\n  const isManyProtocols = typeof protocols === \"object\"\n  const protocolData = isManyProtocols\n    ? protocols.map((v: string) => {\n        return {\n          title: v,\n          icon: protocolsImage[v],\n        }\n      })\n    : {\n        title: protocols,\n        icon: protocolsImage[protocols],\n      }\n  const rewardsApy = strategyData?.rewardsApy\n  const stakingEnd = strategyData?.stakingEnd\n  const isStakingStillRunning =\n    stakingEnd?.endDate && isFuture(stakingEnd?.endDate)\n  const comingSoon = isComingSoon(launchDate)\n  const tagLoading = isLoading\n\n  return (\n    <Card\n      padding=\"0\"\n      position=\"relative\"\n      display=\"flex\"\n      maxW=\"400px\"\n      boxShadow=\"0 0 0 1px rgba(78, 56, 156, 0.16)\"\n      borderRadius={24}\n      _hover={{\n        backgroundColor: \"surface.tertiary\",\n        boxShadow: \"0 0 0 2px #6C4ED9\",\n      }}\n      {...rest}\n    >\n      <Burst />\n      <Flex\n        flexDirection=\"column\"\n        borderRadius={24}\n        zIndex=\"2\"\n        overflow=\"hidden\"\n      >\n        {!comingSoon &&\n          stakingEnd?.endDate &&\n          isFuture(stakingEnd?.endDate) && (\n            <Tag\n              px={3}\n              py={4}\n              justifyContent=\"center\"\n              borderRadius={0}\n              bgColor=\"purple.base\"\n              textAlign=\"center\"\n            >\n              <TransparentSkeleton\n                isLoaded={!tagLoading}\n                h={tagLoading ? \"14px\" : \"none\"}\n                startColor=\"purple.dark\"\n                endColor=\"surface.secondary\"\n              >\n                <Text>\n                  Rewards APY{\" \"}\n                  <span\n                    style={{\n                      color: theme.colors.lime.base,\n                    }}\n                  >\n                    {rewardsApy?.formatted}\n                  </span>\n                  <span> &#183; </span>\n                  {isStakingStillRunning\n                    ? `${formatDistanceToNowStrict(\n                        stakingEnd?.endDate,\n                        {\n                          locale: { formatDistance },\n                        }\n                      )} left`\n                    : \"Program ends\"}\n                </Text>\n              </TransparentSkeleton>\n            </Tag>\n          )}\n        <Flex\n          p={4}\n          ml={2}\n          bg=\"radial-gradient(104.22% 1378.1% at 0% 0%, rgba(194, 34, 194, 0) 0%, rgba(210, 37, 204, 0.16) 100%)\"\n          borderTopLeftRadius={24}\n          minH=\"180.5px\"\n          direction=\"column\"\n          justifyContent=\"space-between\"\n        >\n          <CoinImage mb={3} />\n          <Flex mb={2}>\n            <Heading size=\"lg\" mr={1} lineHeight=\"100%\">\n              {data.name}\n            </Heading>\n          </Flex>\n          <Flex wrap=\"wrap\" gap={2}>\n            <Tag>{data.strategyType}</Tag>\n            <Tag>\n              {data.managementFee}{\" \"}\n              {data.managementFee !== \"...\" && \"Fee\"}\n            </Tag>\n            {isManyProtocols ? (\n              (protocolData as ProtocolDataType[]).map((v, i) => (\n                <Tag display=\"flex\" alignItems=\"center\" key={i}>\n                  {v && (\n                    <InlineImage\n                      src={(v as ProtocolDataType).icon}\n                      alt=\"protocol logo\"\n                      boxSize={4}\n                    />\n                  )}\n                  {v.title}\n                </Tag>\n              ))\n            ) : (\n              <Tag display=\"flex\" alignItems=\"center\">\n                {protocolData && (\n                  <InlineImage\n                    src={(protocolData as ProtocolDataType).icon}\n                    alt=\"protocol logo\"\n                    boxSize={4}\n                  />\n                )}\n                {(protocolData as ProtocolDataType).title}\n              </Tag>\n            )}\n          </Flex>\n        </Flex>\n        <Flex\n          p=\"16px 16px 24px\"\n          backgroundColor=\"surface.primary\"\n          borderBottomRightRadius={24}\n          borderBottomLeftRadius={24}\n          position=\"relative\"\n          flexDirection=\"column\"\n          justifyContent=\"space-between\"\n        >\n          {isPlaceholder ? (\n            <ComingSoon index={index} />\n          ) : (\n            <AboutCellar data={data} />\n          )}\n        </Flex>\n      </Flex>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/CellarStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/CoinImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/ComingSoon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/FillLine.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/Label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/UserStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'children' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2519,2522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2519,2522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Heading, Box, Grid, FlexProps } from \"@chakra-ui/react\"\nimport { InlineImage } from \"components/InlineImage\"\nimport { CellarCardData } from \"./CellarCardDisplay\"\nimport { Label } from \"./Label\"\nimport { useAccount } from \"wagmi\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { isRewardsEnabled } from \"data/uiConfig\"\nimport { useIsMounted } from \"hooks/utils/useIsMounted\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\ninterface Props extends FlexProps {\n  data: CellarCardData\n}\n\nexport const UserStats: React.FC<Props> = ({\n  data,\n  children,\n  ...rest\n}) => {\n  const { isConnected } = useAccount()\n\n  const cellarConfig = cellarDataMap[data.cellarId].config\n  const { data: userData } = useUserStrategyData(\n    cellarConfig.cellar.address, cellarConfig.chain.id\n  )\n  const netValue = userData?.userStrategyData.userData.netValue\n  const userStakes = userData?.userStakes\n  const isMounted = useIsMounted()\n\n  return (\n    <Grid\n      gridAutoFlow=\"column\"\n      gridAutoColumns=\"min-content\"\n      gridGap={4}\n      background=\"surface.tertiary\"\n      padding=\"12px 16px\"\n      borderRadius={16}\n      {...rest}\n    >\n      <Box>\n        <Heading as=\"p\" size=\"sm\" fontWeight=\"bold\">\n          {isMounted && isConnected\n            ? netValue?.formatted || \"...\"\n            : \"--\"}\n        </Heading>\n        <Label color=\"neutral.300\">Your Portfolio</Label>\n      </Box>\n      {/* TODO: Verify PNL result */}\n      {/* <Box>\n        <Heading\n          as=\"p\"\n          size=\"sm\"\n          fontWeight=\"bold\"\n          display=\"flex\"\n          alignItems=\"center\"\n          columnGap=\"5px\"\n        >\n          {isConnected ? (\n            <Apy\n              apy={\n                (outputUserData.data.pnl &&\n                  outputUserData.data.pnl?.formatted) ||\n                \"...\"\n              }\n              fontSize=\"inherit\"\n            />\n          ) : (\n            \"--\"\n          )}\n        </Heading>\n        <Label color=\"neutral.300\" whiteSpace=\"nowrap\">\n          PNL\n        </Label>\n      </Box> */}\n      {isRewardsEnabled(cellarConfig) && (\n        <Grid backgroundColor=\"\">\n          <Heading\n            as=\"p\"\n            size=\"sm\"\n            fontWeight=\"bold\"\n            display=\"flex\"\n            alignItems=\"baseline\"\n          >\n            <InlineImage\n              src=\"/assets/images/coin.png\"\n              alt=\"coin logo\"\n              boxSize={3}\n            />\n            {isMounted && isConnected\n              ? (userStakes as any)?.totalClaimAllRewards?.formatted || \"...\"\n              : \"--\"}\n          </Heading>\n          <Label color=\"neutral.300\">Rewards</Label>\n        </Grid>\n      )}\n    </Grid>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarCard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/CellarDetailsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/ErrorCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/InnerCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/PortfolioCard/MerklePoints/MerklePoints.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'addToast', 'address', 'cellarConfig.cellar.address', 'cellarConfig.chain.id', and 'close'. Either include them or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [addToast, address, cellarConfig.cellar.address, cellarConfig.chain.id, close, userAddress]","fix":{"range":[2833,2846],"text":"[addToast, address, cellarConfig.cellar.address, cellarConfig.chain.id, close, userAddress]"}}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":163,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":163,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[4776,4789],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5795,5798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5795,5798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":215,"column":13,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":215,"endColumn":26,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[6378,6391],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":218,"column":15,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":218,"endColumn":28,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[6481,6494],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\"\nimport { CardStat } from \"components/CardStat\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { Text, VStack } from \"@chakra-ui/react\"\nimport { MerkleRewards } from \"../../../../abi/types/MerkleRewards\"\nimport { usePublicClient, useWalletClient, useAccount } from \"wagmi\"\nimport {\n  formatUnits,\n  getAddress,\n  getContract,\n  isHex,\n  keccak256,\n  toBytes,\n} from \"viem\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\nimport { ConfigProps } from \"data/types\"\nimport { fetchMerkleData } from \"utils/fetchMerkleData\"\n\nconst MERKLE_CONTRACT_ADDRESS =\n  \"0x6D6444b54FEe95E3C7b15C69EfDE0f0EB3611445\"\n\ninterface MerklePointsProps {\n  userAddress?: `0x${string}`\n  cellarConfig: ConfigProps\n}\n\nexport const MerklePoints = ({\n  userAddress,\n  cellarConfig,\n}: MerklePointsProps) => {\n  const [merklePoints, setMerklePoints] = useState<string | null>(\n    null\n  )\n  const [merkleData, setMerkleData] = useState<any>(null)\n  const { addToast, close } = useBrandedToast()\n\n  const { data: walletClient } = useWalletClient()\n  const publicClient = usePublicClient()\n  const { chain, address } = useAccount()\n\n  const [_, wait] = useWaitForTransaction({\n    skip: true,\n  })\n\n  useEffect(() => {\n    if (userAddress) {\n      const fetchData = async () => {\n        try {\n          const response = await fetchMerkleData(\n            cellarConfig.cellar.address,\n            address ?? \"\",\n            cellarConfig.chain.id\n          );\n\n          if (response.Response) {\n            const totalBalance = response.Response.total_balance;\n            if (totalBalance && parseFloat(totalBalance) > 0) {\n              // Convert and round the balance to two decimal places\n              const roundedBalance = parseFloat(formatUnits(BigInt(totalBalance), 18)).toFixed(2);\n              setMerklePoints(roundedBalance);\n              setMerkleData(response.Response.tx_data);\n            } else {\n              setMerklePoints(\"0.00\");\n              setMerkleData(null);\n            }\n          } else {\n            setMerklePoints(\"0.00\");\n            setMerkleData(null);\n          }\n        } catch (error) {\n          console.error(\"Failed to fetch Merkle points data:\", error);\n          addToast({\n            heading: \"Error fetching data\",\n            status: \"error\",\n            body: (\n              <Text>\n                Failed to fetch Merkle points data: {(error as Error).message}\n              </Text>\n            ),\n            closeHandler: close,\n            duration: null,\n          });\n          setMerklePoints(\"0.00\");\n          setMerkleData(null);\n        }\n      };\n\n      fetchData();\n    } else {\n      setMerklePoints(null);\n      setMerkleData(null);\n    }\n  }, [userAddress]);\n\n\n  const ensureHexPrefix = (value: string) =>\n    value?.startsWith(\"0x\") ? value : `0x${value}`\n\n  const handleClaimMerklePoints = async () => {\n    if (!walletClient) {\n      addToast({\n        heading: \"Wallet Not Connected\",\n        status: \"error\",\n        body: (\n          <Text>\n            Please connect your wallet to claim Merkle rewards.\n          </Text>\n        ),\n        closeHandler: close,\n        duration: null,\n      })\n      return\n    }\n\n    if (merkleData && publicClient) {\n      try {\n        const merkleRewardsContract = getContract({\n          address: MERKLE_CONTRACT_ADDRESS,\n          abi: MerkleRewards,\n          client: walletClient,\n        })\n\n        const hasClaimed = await merkleRewardsContract.read.claimed([\n          keccak256(\n            toBytes(ensureHexPrefix(merkleData.rootHashes[0]))\n          ),\n          getAddress(userAddress ?? \"\"),\n        ])\n        if (hasClaimed) {\n          addToast({\n            heading: \"Claim Info\",\n            status: \"info\",\n            body: <Text>Claim has already been made</Text>,\n            closeHandler: close,\n            duration: null,\n          })\n          return\n        }\n\n        const rootHashes = merkleData.rootHashes.map(\n          (hash: string) => {\n            const prefixedHash = ensureHexPrefix(hash)\n            if (!isHex(prefixedHash)) {\n              throw new Error(`Invalid hex string: ${prefixedHash}`)\n            }\n            return prefixedHash\n          }\n        )\n\n        const merkleProofs = merkleData.merkleProofs.map(\n          (proofArray: string[]) =>\n            proofArray.map((proof: string) => {\n              const prefixedProof = ensureHexPrefix(proof)\n              if (!isHex(prefixedProof)) {\n                throw new Error(\n                  `Invalid hex string: ${prefixedProof}`\n                )\n              }\n              return prefixedProof\n            })\n        )\n        // @ts-ignore\n        const hash = await merkleRewardsContract.write.claim([\n          getAddress(userAddress ?? \"\"),\n          rootHashes,\n          merkleData.tokens,\n          merkleData.balances,\n          merkleProofs,\n        ])\n\n        const waitForResult = wait({ confirmations: 1, hash })\n        const result = await waitForResult\n\n        if (result?.data?.transactionHash) {\n          addToast({\n            heading: \"Success\",\n            status: \"success\",\n            body: <Text>Claim successful</Text>,\n            closeHandler: close,\n            duration: null,\n          })\n          setMerklePoints(\"0.00\");\n          setMerkleData(null);\n        } else {\n          addToast({\n            heading: \"Transaction Failed\",\n            status: \"error\",\n            body: <Text>Claim failed</Text>,\n            closeHandler: close,\n            duration: null,\n          })\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          if (\"code\" in error &&\n              (error as any).code === \"UNPREDICTABLE_GAS_LIMIT\") {\n            console.error(\n              \"Claim failed: It has already been claimed or another error occurred\",\n              error\n            )\n            addToast({\n              heading: \"Claim Failed\",\n              status: \"error\",\n              body: (\n                <Text>\n                  Claim failed: It has already been claimed or another\n                  error occurred\n                </Text>\n              ),\n              closeHandler: close,\n              duration: null,\n            })\n          } else {\n            // @ts-ignore\n            const code = error.cause.code\n            if (code === 4001) {\n              // @ts-ignore\n              const message = error.cause.message;\n              console.error(\"Claim failed:\", error)\n\n              addToast({\n                heading: \"Claim Failed\",\n                status: \"error\",\n                body: (\n                  <Text>Claim failed: {message}</Text>\n                ),\n                closeHandler: close,\n                duration: null,\n              })\n            }else {\n              console.error(\"Claim failed:\", error)\n              addToast({\n                heading: \"Claim Failed\",\n                status: \"error\",\n                body: (\n                  <Text>Claim failed: {(error as Error).message}</Text>\n                ),\n                closeHandler: close,\n                duration: null,\n              })\n            }\n          }\n        } else {\n          console.error(\"An unknown error occurred:\", error)\n          addToast({\n            heading: \"Unknown Error\",\n            status: \"error\",\n            body: (\n              <Text>\n                An unknown error occurred: {(error as Error).message}\n              </Text>\n            ),\n            closeHandler: close,\n            duration: null,\n          })\n        }\n      }\n    } else {\n      console.error(\"Web3 provider not found or no merkle data\")\n      addToast({\n        heading: \"Error\",\n        status: \"error\",\n        body: <Text>Web3 provider not found or no merkle data</Text>,\n        closeHandler: close,\n        duration: null,\n      })\n    }\n  }\n\n  return (\n    <VStack spacing={4} alignItems=\"flex-start\">\n      <CardStat\n        label={`Merkle ${cellarConfig.chain.id === \"arbitrum\" ? \"ARB\" : \"OP\"} Rewards`}\n        tooltip={`Clicking 'Claim Merkle Rewards' button you will receive your collected rewards.`}\n        alignSelf=\"flex-start\"\n        spacing={0}\n      >\n        {\n          userAddress && merklePoints !== null\n            ? merklePoints\n            : \"--\"\n        }\n      </CardStat>\n\n      <BaseButton\n        onClick={handleClaimMerklePoints}\n        isDisabled={\n          !userAddress ||\n          merklePoints === null ||\n          merklePoints === \"0.00\" ||\n          (cellarConfig.chain.id === \"arbitrum\" && chain?.id !== 42161) ||  // Disable if not on Arbitrum chain\n          (cellarConfig.chain.id === \"optimism\" && chain?.id !== 10) // Disable if not on on Optimism chain\n        }\n      >\n        Claim Merkle Rewards\n      </BaseButton>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/PortfolioCard/PointsDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/PortfolioCard/Rewards.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":37,"column":38,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":37,"endColumn":53,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[1488,1489],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2104,2107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2104,2107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":104,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":104,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3241,3254],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6117,6120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6117,6120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6964,6967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6964,6967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SimpleGrid, VStack, Text, HStack } from \"@chakra-ui/react\"\nimport { CardStat } from \"components/CardStat\"\nimport { InlineImage } from \"components/InlineImage\"\nimport { Link } from \"components/Link\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { ExternalLinkIcon } from \"components/_icons\"\nimport { useGeo } from \"context/geoContext\"\nimport { chainConfig } from \"data/chainConfig\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport { ConfigProps } from \"data/types\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useIsMounted } from \"hooks/utils/useIsMounted\"\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { useImportToken } from \"hooks/web3/useImportToken\"\nimport { analytics } from \"utils/analytics\"\nimport { useAccount } from \"wagmi\"\n\nexport const Rewards = ({\n  cellarConfig,\n}: {\n  cellarConfig: ConfigProps\n}) => {\n  const isMounted = useIsMounted()\n  const { isConnected, chain: wagmiChain } = useAccount()\n  const { data: userData, refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n  const { userStakes } = userData || {}\n  const { stakerSigner } = useCreateContracts(cellarConfig)\n  const { addToast, close } = useBrandedToast()\n  const { address } = useAccount()\n\n  let buttonsEnabled = true\n  if (cellarConfig.chain.wagmiId !== wagmiChain?.id!) {\n    buttonsEnabled = false\n  }\n\n  const importToken = useImportToken({\n    onSuccess: (data) => {\n      const tokenData = data as unknown as { symbol: string }\n      addToast({\n        heading: \"Import Token\",\n        status: \"success\",\n        body: <Text>{tokenData.symbol} added to metamask</Text>,\n        closeHandler: close,\n      })\n    },\n    onError: (error) => {\n      const e = error as Error\n      addToast({\n        heading: \"Import Token\",\n        status: \"error\",\n        body: <Text>{e.message}</Text>,\n        closeHandler: close,\n      })\n    },\n  })\n\n  const userRewards =\n    (userStakes as any)?.totalClaimAllRewards?.value.toString()\n\n  const claimAllDisabled =\n    !isConnected ||\n    !userRewards ||\n    parseInt(userRewards) <= 0 ||\n    !buttonsEnabled\n\n  // Get somm token\n  const chainObj = chainConfig.find(\n    (c) => c.id === cellarConfig.chain.id\n  )!\n\n  const sommToken = tokenConfig.find(\n    (t) => t.coinGeckoId === \"sommelier\" && t.chain === chainObj.id\n  )!\n\n  let rewardTokenAddress = sommToken.address\n  let rewardTokenImageUrl = sommToken.src\n  let rewardTokenName = sommToken.symbol\n\n  // Custom processing for if reward is not SOMM\n  // -- Check if cellar config has customReward field\n  if (\n    cellarConfig.customReward &&\n    cellarConfig.customReward.showAPY === false\n  ) {\n    rewardTokenAddress = cellarConfig.customReward.tokenAddress\n    rewardTokenImageUrl = cellarConfig.customReward.imagePath\n    rewardTokenName = cellarConfig.customReward.tokenSymbol\n  }\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const geo = useGeo()\n  const handleClaimAll = async () => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    // analytics.track(\"rewards.claim-started\")\n\n    // @ts-ignore\n    const hash = await stakerSigner?.write.claimAll([], { account: address })\n    await doHandleTransaction({\n      cellarConfig,\n      hash,\n      onSuccess: () => {\n        refetch()\n        analytics.track(\"rewards.claim-succeeded\")\n      },\n      onError: () => analytics.track(\"rewards.claim-failed\"),\n      toastBody: {\n        successWithParams: (result) => {\n          const fullImageUrl = `${window.origin}${rewardTokenImageUrl}`\n          return (\n            <>\n              <Text>Successful</Text>\n              <Link\n                display=\"flex\"\n                alignItems=\"center\"\n                href={`${cellarConfig.chain.blockExplorer.url}/tx/${result?.data?.transactionHash}`}\n                isExternal\n              >\n                <Text as=\"span\">{`View on ${cellarConfig.chain.blockExplorer.name}`}</Text>\n                <ExternalLinkIcon ml={2} />\n              </Link>\n              <Text\n                onClick={() => {\n                  importToken.mutate({\n                    address: rewardTokenAddress,\n                    imageUrl: fullImageUrl,\n                    chain: cellarConfig.chain.id,\n                  })\n                }}\n                textDecor=\"underline\"\n                as=\"button\"\n              >\n                Import Reward token to wallet\n              </Text>\n            </>\n          )\n        },\n      },\n    })\n    refetch()\n  }\n  return (\n    <SimpleGrid\n      templateColumns=\"max-content\"\n      templateRows={\n        cellarConfig.customReward?.showSommRewards\n          ? \"\"\n          : \"repeat(2, 1fr)\"\n      }\n      spacing={4}\n      alignItems=\"flex-end\"\n      //display={claimAllDisabled ? \"none\" : \"grid\"}\n    >\n      <VStack align=\"flex-start\">\n        {cellarConfig.customReward?.showBondingRewards ? (\n          <HStack>\n            <a\n              href={cellarConfig?.customReward?.rewardHyperLink}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title={\n                cellarConfig?.customReward?.customRewardMessageTooltip\n              }\n            >\n              <CardStat\n                label={\n                  cellarConfig?.customReward?.customRewardHeader ??\n                  \"rewards\"\n                }\n                tooltip={\n                  cellarConfig?.customReward\n                    ?.customRewardMessageTooltip ??\n                  `Amount of ${rewardTokenName} earned and available to be claimed`\n                }\n              >\n                <InlineImage\n                  src={rewardTokenImageUrl}\n                  alt={`${rewardTokenName} logo`}\n                  boxSize={5}\n                />\n                <Text textAlign=\"center\">\n                  {isMounted &&\n                    (cellarConfig.customReward?.customRewardMessage ??\n                      (isConnected\n                        ? (userStakes as any)?.totalClaimAllRewards\n                            ?.formatted || \"...\"\n                        : \"--\"))}\n                </Text>\n              </CardStat>\n            </a>\n            <br />\n          </HStack>\n        ) : null}\n        {cellarConfig.customReward?.showSommRewards ||\n        cellarConfig.customReward?.showSommRewards === undefined ? (\n          <>\n            <HStack>\n              <CardStat\n                label={\"SOMM Rewards\"}\n                tooltip={`Amount of SOMM earned and available to be claimed`}\n              >\n                <InlineImage\n                  src={sommToken.src}\n                  alt={`SOMM logo`}\n                  boxSize={5}\n                />\n                <Text textAlign=\"center\">\n                  {isMounted &&\n                    (isConnected\n                      ? (userStakes as any)?.totalClaimAllRewards?.formatted ||\n                        \"...\"\n                      : \"--\")}\n                </Text>\n              </CardStat>\n            </HStack>\n          </>\n        ) : null}\n      </VStack>\n      {cellarConfig?.customReward?.showClaim !== false ? (\n        <BaseButton\n          disabled={claimAllDisabled}\n          onClick={handleClaimAll}\n        >\n          {cellarConfig?.customReward?.customClaimMsg ?? `Claim All`}\n        </BaseButton>\n      ) : null}\n    </SimpleGrid>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/PortfolioCard/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10977,10980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10977,10980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13690,13693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13690,13693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":401,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13714,13717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13714,13717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":519,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18583,18586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18583,18586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":519,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18606,18609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18606,18609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\"\nimport {\n  Avatar,\n  BoxProps,\n  Heading,\n  HStack,\n  Icon,\n  Image,\n  Link,\n  SimpleGrid,\n  Spacer,\n  Stack,\n  Text,\n  useTheme,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { CardStat } from \"components/CardStat\"\nimport { CardStatRow } from \"components/CardStatRow\"\nimport { TokenAssets } from \"components/TokenAssets\"\nimport { BondButton } from \"components/_buttons/BondButton\"\nimport ConnectButton from \"components/_buttons/ConnectButton\"\nimport { DepositButton } from \"components/_buttons/DepositButton\"\nimport { WithdrawButton } from \"components/_buttons/WithdrawButton\"\nimport { WithdrawQueueButton } from \"components/_buttons/WithdrawQueueButton\"\nimport { LighterSkeleton } from \"components/_skeleton\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { useWithdrawRequestStatus } from \"data/hooks/useWithdrawRequestStatus\"\nimport { getTokenConfig, Token } from \"data/tokenConfig\"\nimport {\n  isBondedDisabled,\n  isBondingEnabled,\n  isRewardsEnabled,\n  isWithdrawQueueEnabled,\n  lpTokenTooltipContent,\n  showNetValueInAsset,\n} from \"data/uiConfig\"\nimport { formatDistanceToNowStrict, isFuture } from \"date-fns\"\nimport { useIsMounted } from \"hooks/utils/useIsMounted\"\nimport { useRouter } from \"next/router\"\nimport { FaExternalLinkAlt } from \"react-icons/fa\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { formatDistance } from \"utils/formatDistance\"\nimport { useAccount } from \"wagmi\"\nimport BondingTableCard from \"../BondingTableCard\"\nimport { InnerCard } from \"../InnerCard\"\nimport { TransparentCard } from \"../TransparentCard\"\nimport { Rewards } from \"./Rewards\"\nimport WithdrawQueueCard from \"../WithdrawQueueCard\"\nimport { CellarNameKey } from \"data/types\"\nimport { MerklePoints } from \"./MerklePoints/MerklePoints\"\n\nexport const PortfolioCard = (props: BoxProps) => {\n  const theme = useTheme()\n  const isMounted = useIsMounted()\n  const {\n    address,\n    isConnected: connected,\n    chain: wagmiChain,\n  } = useAccount()\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n  const dashboard = cellarDataMap[id].dashboard\n\n  const depositTokens = cellarDataMap[id].depositTokens.list\n  const depositTokenConfig = getTokenConfig(\n    depositTokens,\n    cellarConfig.chain.id\n  ) as Token[]\n\n  const [isConnected, setConnected] = useState(false)\n  useEffect(() => {\n    setConnected(connected)\n  }, [connected])\n\n  const { lpToken } = useUserBalance(cellarConfig)\n  let { data: lpTokenData } = lpToken\n  const { data: strategyData, isLoading: isStrategyLoading } =\n    useStrategyData(\n      cellarConfig.cellar.address,\n      cellarConfig.chain.id\n    )\n  let { data: userData, isLoading: isUserDataLoading } =\n    useUserStrategyData(\n      cellarConfig.cellar.address,\n      cellarConfig.chain.id\n    )\n\n  const activeAsset = strategyData?.activeAsset\n  const stakingEnd = strategyData?.stakingEnd\n\n  const isStakingAllowed = stakingEnd?.endDate\n    ? isFuture(stakingEnd.endDate)\n    : false\n\n  const buttonsEnabled =\n    strategyData?.config.chain.wagmiId === wagmiChain?.id\n\n  if (!buttonsEnabled) {\n    userData = undefined\n    lpTokenData = undefined\n  }\n\n  const netValue = userData?.userStrategyData.userData?.netValue\n  const userStakes = userData?.userStakes\n\n  const lpTokenDisabled =\n    !lpTokenData || Number(lpTokenData?.value ?? \"0\") <= 0\n\n  // Check if user has any value in the vault (either LP tokens or net value)\n  const hasValueInVault =\n    (lpTokenData && Number(lpTokenData?.value ?? \"0\") > 0) ||\n    (netValue && Number(netValue?.value ?? \"0\") > 0)\n\n  const baseAssetValue =\n    userData?.userStrategyData.userData?.netValueInAsset?.formatted\n\n  const isActiveWithdrawRequest =\n    useWithdrawRequestStatus(cellarConfig)\n\n  return (\n    <TransparentCard\n      {...props}\n      backgroundColor=\"surface.secondary\"\n      p={8}\n      overflow=\"none\"\n      zIndex={1}\n    >\n      <VStack align=\"stretch\" spacing={8}>\n        <CardStatRow\n          gap={{ base: 4, md: 8, lg: 12 }}\n          align=\"flex-start\"\n          justify=\"flex-start\"\n          direction={{ base: \"column\", md: \"row\" }}\n          wrap=\"wrap\"\n        >\n          <SimpleGrid\n            templateColumns={{\n              base: \"repeat(1, max-content)\",\n              md: \"repeat(2, max-content)\",\n            }}\n          >\n            <CardStat\n              label=\"Net Value\"\n              tooltip=\"Net value of assets in the strategy including SOMM rewards\"\n            >\n              {isMounted &&\n                (isConnected ? netValue?.formatted || \"...\" : \"--\")}\n            </CardStat>\n\n            {showNetValueInAsset(cellarConfig) && (\n              <CardStat\n                label=\"Base Asset Value\"\n                tooltip={\n                  <Text>\n                    Total value of assets denominated in base asset\n                    <Avatar\n                      ml=\"-2.5px\"\n                      boxSize={6}\n                      src={activeAsset?.src}\n                      name={activeAsset?.alt}\n                      borderWidth={2}\n                      borderColor=\"surface.bg\"\n                      bg=\"surface.bg\"\n                    />\n                    {activeAsset?.symbol}. excluding SOMM rewards\n                  </Text>\n                }\n              >\n                {isMounted && (isConnected ? baseAssetValue : \"--\")}\n              </CardStat>\n            )}\n\n            <CardStat\n              label=\"deposit assets\"\n              tooltip=\"Accepted deposit assets\"\n              alignSelf=\"flex-start\"\n              spacing={0}\n            >\n              <TokenAssets\n                tokens={depositTokenConfig}\n                activeAsset={activeAsset?.address || \"\"}\n                displaySymbol\n              />\n            </CardStat>\n            {/* TODO: Verify PNL result */}\n            {/* <CardStat\n              label=\"pnl\"\n              tooltip={`${\n                ((outputUserData.data.pnl &&\n                  outputUserData.data.pnl.value.toFixed(5, 0)) ||\n                  \"...\") + \"%\"\n              }: This represents percentage gains compared to current deposits`}\n              labelProps={{\n                textTransform: \"uppercase\",\n              }}\n            >\n              {isConnected ? (\n                <Apy\n                  apy={\n                    (outputUserData.data.pnl &&\n                      `${outputUserData.data.pnl.formatted}`) ||\n                    \"...\"\n                  }\n                />\n              ) : (\n                \"--\"\n              )}\n            </CardStat> */}\n            <Stack spacing={3} direction=\"row\">\n              {isMounted &&\n                (isConnected ? (\n                  <>\n                    <VStack\n                      spacing={3}\n                      width=\"100%\"\n                      paddingTop={\"1em\"}\n                    >\n                      <HStack>\n                        {!strategyData?.deprecated && (\n                          <DepositButton\n                            disabled={\n                              !isConnected ||\n                              strategyData?.isContractNotReady ||\n                              !buttonsEnabled\n                            }\n                          />\n                        )}\n                        {!isWithdrawQueueEnabled(cellarConfig) && (\n                          <WithdrawButton\n                            isDeprecated={strategyData?.deprecated}\n                            disabled={\n                              !hasValueInVault || !buttonsEnabled\n                            }\n                          />\n                        )}\n                      </HStack>\n                      {/*\n                      <>\n                        <WithdrawQueueButton\n                          chain={cellarConfig.chain}\n                          buttonLabel=\"Enter Withdraw Queue\"\n                          disabled={\n                            lpTokenDisabled ||\n                            !buttonsEnabled ||\n                            isActiveWithdrawRequest\n                          }\n                          showTooltip={true}\n                        />\n                      </>\n                        */}\n                      {isWithdrawQueueEnabled(cellarConfig) && (\n                        <WithdrawQueueButton\n                          chain={cellarConfig.chain}\n                          buttonLabel=\"Enter Withdraw Queue\"\n                          disabled={\n                            !hasValueInVault || !buttonsEnabled\n                          }\n                          showTooltip={true}\n                        />\n                      )}\n                    </VStack>\n                  </>\n                ) : (\n                  <>\n                    <HStack paddingTop={\"1em\"}>\n                      <ConnectButton\n                        overridechainid={cellarConfig.chain.id}\n                      />\n                    </HStack>\n                  </>\n                ))}\n            </Stack>\n          </SimpleGrid>\n          {!isBondedDisabled(cellarConfig) ? (\n            <>\n              <SimpleGrid\n                templateColumns=\"repeat(2, max-content)\"\n                templateRows=\"repeat(2, 1fr)\"\n                spacing={4}\n                alignItems=\"flex-end\"\n              >\n                <VStack align=\"flex-start\">\n                  <CardStat\n                    label=\"Available LP Tokens\"\n                    tooltip={lpTokenTooltipContent(cellarConfig)}\n                  >\n                    {cellarConfig.lpToken.imagePath && (\n                      <Image\n                        src={cellarConfig.lpToken.imagePath}\n                        alt=\"lp token image\"\n                        height=\"24px\"\n                        mr={2}\n                      />\n                    )}\n                    {isMounted &&\n                      (isConnected\n                        ? (lpTokenData &&\n                            toEther(\n                              lpTokenData.value,\n                              lpTokenData.decimals,\n                              true,\n                              2\n                            )) ||\n                          \"...\"\n                        : \"--\")}\n                  </CardStat>\n                </VStack>\n                {isBondingEnabled(cellarConfig) && (\n                  <>\n                    <VStack align=\"flex-start\">\n                      <CardStat\n                        label=\"Bonded LP Tokens\"\n                        tooltip=\"Bonded LP tokens earn yield from the vault and liquidity mining rewards\"\n                      >\n                        {isMounted &&\n                          (isConnected\n                            ? (userStakes as any)?.totalBondedAmount\n                                ?.formatted || \"...\"\n                            : \"--\")}\n                      </CardStat>\n                    </VStack>\n                    {isMounted &&\n                      /* isMerkleRewardsException(cellarConfig) || */ isStakingAllowed && (\n                        <BondButton\n                          disabled={\n                            lpTokenDisabled || !buttonsEnabled\n                          }\n                        />\n                      )}\n                  </>\n                )}\n              </SimpleGrid>\n              {isRewardsEnabled(cellarConfig) && (\n                <Rewards cellarConfig={cellarConfig} />\n              )}\n            </>\n          ) : (\n            <VStack align=\"flex-start\">\n              <CardStat\n                label=\"tokens\"\n                tooltip={lpTokenTooltipContent(cellarConfig)}\n              >\n                {cellarConfig.lpToken.imagePath && (\n                  <Image\n                    src={cellarConfig.lpToken.imagePath}\n                    alt=\"lp token image\"\n                    height=\"24px\"\n                    mr={2}\n                  />\n                )}\n                {isMounted &&\n                  (isConnected\n                    ? (lpTokenData &&\n                        toEther(\n                          lpTokenData.formatted,\n                          lpTokenData.decimals,\n                          true,\n                          2\n                        )) ||\n                      \"...\"\n                    : \"--\")}\n              </CardStat>\n            </VStack>\n          )}\n\n          {(cellarConfig.cellarNameKey ===\n            CellarNameKey.REAL_YIELD_ETH_ARB ||\n            cellarConfig.cellarNameKey ===\n              CellarNameKey.REAL_YIELD_USD_ARB ||\n            cellarConfig.cellarNameKey ===\n              CellarNameKey.REAL_YIELD_ETH_OPT) && (\n            <MerklePoints\n              userAddress={address}\n              cellarConfig={cellarConfig}\n            />\n          )}\n\n          <CardStat label=\"Strategy Dashboard\">\n            {strategyData ? (\n              <HStack\n                as={Link}\n                href={`${dashboard}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <Text as=\"span\" fontWeight=\"bold\" fontSize={21}>\n                  {strategyData?.name}\n                </Text>\n                <Icon as={FaExternalLinkAlt} color=\"purple.base\" />\n              </HStack>\n            ) : (\n              <Text>Loading...</Text>\n            )}\n          </CardStat>\n        </CardStatRow>\n        {isBondingEnabled(cellarConfig) && (\n          <>\n            {(userStakes as any) && !(userStakes as any).userStakes?.length &&\n              stakingEnd?.endDate &&\n              isFuture(stakingEnd?.endDate) && (\n                <>\n                  {cellarConfig.customReward\n                    ?.customRewardLongMessage ? (\n                    <InnerCard\n                      backgroundColor=\"surface.tertiary\"\n                      mt={8}\n                      px={7}\n                      py={7}\n                    >\n                      <Stack\n                        flexDir={{ base: \"column\", md: \"row\" }}\n                        alignItems={{\n                          base: \"flex-start\",\n                          md: \"center\",\n                        }}\n                        gap={{ base: 0, md: 4 }}\n                      >\n                        <>\n                          <Image\n                            src={cellarConfig.customReward?.imagePath}\n                            alt={`${cellarConfig.customReward?.tokenSymbol} logo`}\n                            boxSize={6}\n                          />\n                          <Heading size=\"16px\">\n                            {\n                              cellarConfig.customReward\n                                ?.customRewardLongMessage\n                            }\n                          </Heading>\n                        </>\n\n                        <Spacer />\n                        <LighterSkeleton\n                          isLoaded={!isStrategyLoading}\n                          height={4}\n                        >\n                          <Text fontSize=\"xs\">\n                            {stakingEnd?.endDate &&\n                            isFuture(stakingEnd.endDate)\n                              ? `Rewards program ends in ${formatDistanceToNowStrict(\n                                  cellarConfig.customReward\n                                    ?.stakingDurationOverride ??\n                                    stakingEnd.endDate,\n                                  {\n                                    locale: { formatDistance },\n                                  }\n                                )}`\n                              : \"Program Ended\"}\n                          </Text>\n                        </LighterSkeleton>\n                      </Stack>\n                    </InnerCard>\n                  ) : null}\n                  {cellarConfig.customReward?.showSommRewards ||\n                  cellarConfig.customReward?.showSommRewards ===\n                    undefined ? (\n                    <InnerCard\n                      backgroundColor=\"surface.tertiary\"\n                      mt={8}\n                      px={7}\n                      py={7}\n                    >\n                      <Stack\n                        flexDir={{ base: \"column\", md: \"row\" }}\n                        alignItems={{\n                          base: \"flex-start\",\n                          md: \"center\",\n                        }}\n                        gap={{ base: 0, md: 4 }}\n                      >\n                        <Image\n                          src=\"/assets/icons/somm.png\"\n                          alt=\"somm logo\"\n                          boxSize={6}\n                        />\n                        <Heading size=\"16px\">\n                          Earn{\" \"}\n                          <span\n                            style={{\n                              color: theme.colors.lime.base,\n                            }}\n                          >\n                            {strategyData?.rewardsApy?.formatted}\n                          </span>{\" \"}\n                          APY in SOMM rewards when you bond.\n                        </Heading>\n                        <Spacer />\n                        <LighterSkeleton\n                          isLoaded={!isStrategyLoading}\n                          height={4}\n                        >\n                          <Text fontSize=\"xs\">\n                            {stakingEnd?.endDate &&\n                            isFuture(stakingEnd.endDate)\n                              ? `Rewards program ends in ${formatDistanceToNowStrict(\n                                  stakingEnd.endDate,\n                                  {\n                                    locale: { formatDistance },\n                                  }\n                                )}`\n                              : \"Program Ended\"}\n                          </Text>\n                        </LighterSkeleton>\n                      </Stack>\n                    </InnerCard>\n                  ) : null}\n                </>\n              )}\n            {isConnected && (\n              <LighterSkeleton\n                h={!isUserDataLoading ? \"none\" : \"100px\"}\n                borderRadius={24}\n                isLoaded={!isUserDataLoading}\n              >\n                {isConnected &&\n                  Boolean((userStakes as any) && (userStakes as any).userStakes?.length) && (\n                    <BondingTableCard />\n                  )}\n              </LighterSkeleton>\n            )}\n            {isConnected && isActiveWithdrawRequest && (\n              <LighterSkeleton\n                h={!isUserDataLoading ? \"none\" : \"100px\"}\n                borderRadius={24}\n                isLoaded={!isUserDataLoading}\n              >\n                {isConnected && <WithdrawQueueCard />}\n              </LighterSkeleton>\n            )}\n          </>\n        )}\n      </VStack>\n    </TransparentCard>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SnapshotCard/CampaignTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SnapshotCard/InputEthereumAddress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getValues' is assigned a value but never used.","line":22,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":26,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Stack,\n  Input,\n  Text,\n  HStack,\n  InputProps,\n  FormErrorMessage,\n  Box,\n} from \"@chakra-ui/react\"\nimport { InformationIcon, MoneyWalletIcon } from \"components/_icons\"\nimport { isAddress } from 'viem'\nimport { useBrandedToast } from \"hooks/chakra\"\nimport React, { useState } from \"react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useAccount } from \"wagmi\"\nimport { SnapshotFormValues } from \".\"\n\nexport const InputEthereumAddress: React.FC<\n  InputProps & { disabled?: boolean }\n> = ({ disabled, ...rest }) => {\n  const { addToast, closeAll } = useBrandedToast()\n  const { register, setValue, getValues, getFieldState } =\n    useFormContext<SnapshotFormValues>()\n  const isError = !!getFieldState(\"eth_address\").error\n  const [isActive, setActive] = useState(false)\n  const { address, isConnected } = useAccount()\n\n  const onAutofillClick = async () => {\n    try {\n      if (!address) throw new Error(\"No wallet connected\")\n      setValue(\"eth_address\", address, {\n        shouldValidate: true,\n      })\n    } catch (e) {\n      const error = e as Error\n      addToast({\n        heading: \"Import from Wallet\",\n        body: <Text>{error.message}</Text>,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n    }\n  }\n\n  return (\n    <Stack spacing={2}>\n      <HStack justifyContent=\"space-between\">\n        <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n          Ethereum Address\n        </Text>\n        <HStack\n          as=\"button\"\n          type=\"button\"\n          spacing={1}\n          onClick={onAutofillClick}\n        >\n          <Text fontWeight=\"bold\" color=\"white\" fontSize=\"xs\">\n            Import ETH address\n          </Text>\n          <MoneyWalletIcon boxSize=\"10px\" />\n        </HStack>\n      </HStack>\n      <Box\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        boxShadow={isError ? \"redOutline1\" : \"purpleOutline1\"}\n        borderRadius=\"16px\"\n      >\n        <Input\n          id=\"eth_address\"\n          placeholder=\"Ethereum address\"\n          fontSize=\"xs\"\n          fontWeight={700}\n          backgroundColor=\"surface.tertiary\"\n          variant=\"unstyled\"\n          borderRadius=\"16px\"\n          px={4}\n          py={6}\n          maxH=\"64px\"\n          type=\"text\"\n          isDisabled={disabled}\n          {...register(\"eth_address\", {\n            required: \"Ethereum address is required\",\n            validate: (value) =>\n              isAddress(value) ||\n              \"This is not a valid Ethereum address\",\n          })}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          {...rest}\n        />\n      </Box>\n      {isError && (\n        <FormErrorMessage>\n          <HStack spacing=\"6px\">\n            <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n            <Text\n              fontSize=\"xs\"\n              fontWeight=\"semibold\"\n              color=\"red.light\"\n            >\n              Ethereum address is not valid—make sure it is correct.\n            </Text>\n          </HStack>\n        </FormErrorMessage>\n      )}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SnapshotCard/InputSommelierAddress.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'closeAll' is assigned a value but never used.","line":23,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isActive' is assigned a value but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":27,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":39,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":1,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":123,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3585,3689],"text":"\n              Somm address is not valid—make sure it&apos;s from a\n              Cosmos wallet.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3585,3689],"text":"\n              Somm address is not valid—make sure it&lsquo;s from a\n              Cosmos wallet.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3585,3689],"text":"\n              Somm address is not valid—make sure it&#39;s from a\n              Cosmos wallet.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3585,3689],"text":"\n              Somm address is not valid—make sure it&rsquo;s from a\n              Cosmos wallet.\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, FC } from \"react\";\nimport {\n  Stack,\n  Input,\n  Text,\n  HStack,\n  FormErrorMessage,\n  Image,\n  Box,\n  InputProps,\n} from \"@chakra-ui/react\"\nimport { useFormContext } from \"react-hook-form\"\nimport { Link } from \"components/Link\"\nimport { ExternalLinkIcon, InformationIcon } from \"components/_icons\"\nimport { getKeplr, mainnetChains, useAccount } from \"graz\"\nimport { validateSommelierAddress } from \"utils/validateSommelierAddress\"\nimport { useBrandedToast } from \"hooks/chakra\"\ninterface InputSommelierAddressProps extends InputProps {\n  disabled?: boolean; \n}\n\nexport const InputSommelierAddress: FC<InputSommelierAddressProps> = ({ disabled, ...rest }) => {\n  const { addToast, closeAll } = useBrandedToast()\n  const { register, setValue, getFieldState } = useFormContext()\n  const isError = !!getFieldState(\"somm_address\").error\n  const [isActive, setActive] = useState(false)\n  const { isConnected } = useAccount()\n\n  const onAutofillClick = async () => {\n    try {\n      const keplr = await getKeplr()\n      if (!keplr) throw new Error(\"Keplr extension not found\")\n      const key = await keplr.getKey(mainnetChains.sommelier.chainId)\n      if (!key.bech32Address) throw new Error(\"Address not defined\")\n      setValue(\"somm_address\", key.bech32Address, {\n        shouldValidate: true,\n      })\n    } catch (e) {\n      const error = e as Error\n      addToast({\n        heading: \"Keplr not found\",\n        status: \"error\",\n        body: (\n          <Text>\n            {\" \"}\n            <>\n              <Link\n                display=\"flex\"\n                alignItems=\"center\"\n                href=\"https://www.keplr.app/download\"\n                isExternal\n              >\n                <Text as=\"span\">Please install Keplr extension</Text>\n                <ExternalLinkIcon ml={2} />\n              </Link>\n            </>\n          </Text>\n        ),\n        closeHandler: close,\n        duration: null,\n      })\n    }\n  }\n\n  return (\n    <Stack spacing={2}>\n      <HStack justifyContent=\"space-between\">\n        <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n          Somm Address\n        </Text>\n        <HStack\n          as=\"button\"\n          type=\"button\"\n          spacing={1}\n          onClick={onAutofillClick}\n        >\n          <Text fontWeight=\"bold\" color=\"white\" fontSize=\"xs\">\n            Import SOMM address\n          </Text>\n          <Image\n            src=\"/assets/images/keplr.png\"\n            alt=\"Keplr logo\"\n            boxSize=\"4\"\n          />\n        </HStack>\n      </HStack>\n      <Box\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        boxShadow={isError ? \"redOutline1\" : \"purpleOutline1\"}\n        borderRadius=\"16px\"\n      >\n        <Input\n          id=\"somm_address\"\n          placeholder=\"Somm address\"\n          fontSize=\"xs\"\n          fontWeight={700}\n          backgroundColor=\"surface.tertiary\"\n          variant=\"unstyled\"\n          borderRadius=\"16px\"\n          px={4}\n          py={6}\n          maxH=\"64px\"\n          isDisabled={disabled}\n          {...register(\"somm_address\", {\n            required: \"Somm address is required\",\n            validate: validateSommelierAddress,\n          })}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          {...rest}\n        />\n      </Box>\n      {isError && (\n        <FormErrorMessage>\n          <HStack spacing=\"6px\">\n            <InformationIcon color=\"red.base\" boxSize=\"12px\" />\n            <Text\n              fontSize=\"xs\"\n              fontWeight=\"semibold\"\n              color=\"red.light\"\n            >\n              Somm address is not valid—make sure it's from a\n              Cosmos wallet.\n            </Text>\n          </HStack>\n        </FormErrorMessage>\n      )}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SnapshotCard/SommelierAddress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SnapshotCard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/StrategyBreakdownCard/FAQAccordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/StrategyBreakdownCard/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/StrategyBreakdownCard/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/SwapSettingsCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/TokenPricePerfomaceCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":45,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  BoxProps,\n  Button,\n  HStack,\n  Skeleton,\n  Stack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport { TransparentCard } from \"./TransparentCard\"\nimport { CardHeading } from \"components/_typography/CardHeading\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { PercentageText } from \"components/PercentageText\"\nimport { ErrorCard } from \"./ErrorCard\"\nimport { LineSeries, Point } from \"@nivo/line\"\nimport { ChartTooltipItem } from \"components/_charts/ChartTooltipItem\"\nimport { formatPercentage } from \"utils/chartHelper\"\nimport { format } from \"date-fns\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { useTokenPriceChart } from \"data/context/tokenPriceChartContext\"\nimport { TokenPriceChart } from \"components/_charts/TokenPriceChart\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\n\nexport const TokenPricePerfomanceCard = (props: BoxProps) => {\n  const { data, timeArray, tokenPriceChange, isFetching, isError } =\n    useTokenPriceChart()\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n  const { data: strategyData } = useStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n  const tokenPrice = strategyData?.tokenPrice\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\")\n  const [timeline, setTimeline] = useState<string>(\"1M\")\n  const [pointActive, setPointActive] = useState<Point<LineSeries>>()\n\n  const MobileTooltip = () => {\n    if (!!pointActive && !isLarger768) {\n      const { id: pointId } = pointActive\n      const [_, i] = pointId.split(\".\")\n      return (\n        <Stack\n          p={4}\n          bg=\"surface.blackTransparent\"\n          borderWidth={1}\n          borderColor=\"purple.base\"\n          borderRadius={8}\n          textTransform=\"capitalize\"\n        >\n          {data.series?.map((item) => {\n            const name = (() => {\n              if (item.id === \"token-price\")\n                return cellarDataMap[id]?.name\n              if (item.id === \"usdc\") return \"USDC\"\n              return \"\"\n            })()\n            return (\n              <ChartTooltipItem\n                key={item.id}\n                backgroundColor=\"neutral.100\"\n                name={name}\n                value={`$${\n                  data.series?.find((s) => s.id === item.id)?.data[\n                    Number(i)\n                  ]?.y\n                }`}\n                percentage={`${formatPercentage(\n                  String(\n                    data.series?.find((s) => s.id === item.id)?.data[\n                      Number(i)\n                    ]?.y\n                  )\n                )}%`}\n              />\n            )\n          })}\n          <Text color=\"neutral.400\">\n            {format(\n              new Date(\n                String(data.series?.[0].data[Number(i)]?.x)\n              ),\n              \"MMM, d, yyyy, HH:mm\"\n            )}\n          </Text>\n        </Stack>\n      )\n    }\n    return null\n  }\n\n  if (isError) {\n    return <ErrorCard />\n  }\n  return (\n    <Skeleton\n      h={isFetching ? \"450px\" : \"none\"}\n      startColor=\"surface.primary\"\n      endColor=\"surface.secondary\"\n      borderRadius={{ base: 0, sm: 24 }}\n      isLoaded={!isFetching}\n    >\n      <TransparentCard\n        px={{ base: 6, sm: 6, md: 8 }}\n        py={{ base: 6, md: 8 }}\n        overflow=\"visible\"\n        {...props}\n      >\n        <VStack spacing={6} align=\"stretch\">\n          <Box h=\"20rem\" mb={{ base: 12, sm: \"2.2rem\", md: 0 }}>\n            <HStack\n              justify=\"space-between\"\n              align=\"flex-start\"\n              wrap=\"wrap\"\n              rowGap={2}\n            >\n              <HStack spacing={8}>\n                <VStack spacing={0} align=\"flex-start\">\n                  <CardHeading>Token Price</CardHeading>\n                  <HStack>\n                    <Text fontSize=\"2.5rem\" fontWeight=\"bold\">\n                      {tokenPrice || \"--\"}\n                    </Text>\n                    <PercentageText\n                      data={Number(tokenPriceChange?.yFormatted)}\n                      arrow\n                    />\n                  </HStack>\n                  <Text color=\"neutral.400\" fontSize=\"0.625rem\">\n                    {tokenPriceChange?.xFormatted}\n                  </Text>\n                </VStack>\n              </HStack>\n              <HStack spacing={2}>\n                {timeArray.map((button, i) => {\n                  const { title, onClick } = button\n                  const isSelected = title === timeline\n\n                  return (\n                    <Button\n                      key={i}\n                      variant=\"unstyled\"\n                      p={4}\n                      py={1}\n                      color={isSelected ? \"white\" : \"neutral.400\"}\n                      bg={\n                        isSelected\n                          ? \"surface.tertiary\"\n                          : \"surface.secondary\"\n                      }\n                      borderRadius={8}\n                      borderWidth={1}\n                      borderColor={\n                        isSelected\n                          ? \"purple.dark\"\n                          : \"surface.tertiary\"\n                      }\n                      backdropFilter=\"blur(8px)\"\n                      fontSize=\"sm\"\n                      fontWeight=\"semibold\"\n                      onClick={() => {\n                        const eventName = `cellar.strategy-perfomance-selected-${title}`\n                        analytics.safeTrack(eventName.toLowerCase())\n                        setTimeline(title)\n                        onClick()\n                      }}\n                    >\n                      {title}\n                    </Button>\n                  )\n                })}\n              </HStack>\n            </HStack>\n            <TokenPriceChart\n              timeline={timeline}\n              name={cellarDataMap[id].name}\n              pointActive={pointActive}\n              setPointActive={setPointActive}\n            />\n          </Box>\n          <Stack>\n            <MobileTooltip />\n          </Stack>\n        </VStack>\n      </TransparentCard>\n    </Skeleton>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/TransparentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_cards/WithdrawQueueCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'seconds' is assigned a value but never used.","line":44,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setWithdrawRequestData'. Either include it or remove the dependency array.","line":145,"column":6,"nodeType":"ArrayExpression","endLine":145,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [address, cellarConfig, boringQueueWithdrawals, setWithdrawRequestData]","fix":{"range":[4508,4555],"text":"[address, cellarConfig, boringQueueWithdrawals, setWithdrawRequestData]"}}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":180,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":180,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[5444,5457],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":198,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":198,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[6017,6030],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":213,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useMemo, useState } from \"react\"\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableContainer,\n  TableProps,\n  Flex,\n  Tooltip,\n  HStack,\n  Text,\n  Heading,\n  Image,\n  Link,\n} from \"@chakra-ui/react\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { InformationIcon } from \"components/_icons\"\nimport { InnerCard } from \"./InnerCard\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useGeo } from \"context/geoContext\"\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\"\nimport { formatUnits, getAddress, getContract } from \"viem\"\nimport { WithdrawQueueButton } from \"components/_buttons/WithdrawQueueButton\"\nimport { estimateGasLimitWithRetry } from \"utils/estimateGasLimit\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { WithdrawQueue } from \"../../abi/types/WithdrawQueue\"\nimport { useBoringQueueWithdrawals } from \"data/hooks/useBoringQueueWithdrawals\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\n\nfunction formatTimeRemaining(deadline: number): string {\n  const deadlineInMs = deadline * 1000\n  const now = new Date().getTime()\n  const timeLeft = deadlineInMs - now\n\n  if (timeLeft < 0) {\n    return \"Expired\"\n  }\n\n  const seconds = Math.floor((timeLeft / 1000) % 60)\n  const minutes = Math.floor((timeLeft / 1000 / 60) % 60)\n  const hours = Math.floor((timeLeft / (1000 * 60 * 60)) % 24)\n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24))\n\n  let timeString = \"\"\n  if (days > 0) timeString += `${days}d `\n  if (hours > 0) timeString += `${hours}h `\n  if (minutes > 0) timeString += `${minutes}m `\n  //if (seconds > 0) timeString += `${seconds}s`\n\n  return timeString.trim()\n}\n\nconst WithdrawQueueCard = (props: TableProps) => {\n  const { addToast, closeAll } = useBrandedToast()\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n  const { address } = useAccount()\n\n  const { data: boringQueueWithdrawals } = useBoringQueueWithdrawals(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id,\n    { enabled: !!cellarConfig.boringQueue }\n  )\n\n  const { data: walletClient } = useWalletClient()\n  const publicClient = usePublicClient()\n\n  const withdrawQueueContract = useMemo(() => {\n    if (!publicClient) return\n    return getContract({\n      address: getAddress(cellarConfig.chain.withdrawQueueAddress),\n      abi: WithdrawQueue,\n      client: {\n        wallet: walletClient,\n        public: publicClient,\n      },\n    })\n  }, [\n    publicClient,\n    walletClient,\n    cellarConfig.chain.withdrawQueueAddress,\n  ])\n\n  const { boringQueue } = useCreateContracts(cellarConfig)\n\n  const [pendingWithdrawShares, setPendingWithdrawShares] =\n    useState(0)\n  const [pendingWithdrawSharePrice, setPendingWithdrawSharePrice] =\n    useState(0)\n  const [pendingWithdrawDeadline, setPendingWithdrawDeadline] =\n    useState(0)\n\n  // Check if a user has an active withdraw request\n  const setWithdrawRequestData = async () => {\n    try {\n      if (\n        walletClient &&\n        withdrawQueueContract &&\n        address &&\n        cellarConfig &&\n        !boringQueueWithdrawals\n      ) {\n        const withdrawRequest =\n          await withdrawQueueContract?.read.getUserWithdrawRequest([\n            address,\n            cellarConfig.cellar.address as `0x${string}`,\n          ])\n\n        setPendingWithdrawShares(Number(withdrawRequest.sharesToWithdraw))\n        setPendingWithdrawSharePrice(\n          Number(\n            formatUnits(\n              withdrawRequest.executionSharePrice,\n              cellarConfig.baseAsset.decimals\n            )\n          )\n        )\n        setPendingWithdrawDeadline(Number(withdrawRequest.deadline))\n      } else if (boringQueueWithdrawals) {\n        const request = boringQueueWithdrawals.open_requests[0].metadata\n\n        setPendingWithdrawShares(Number(request.amountOfShares))\n        setPendingWithdrawSharePrice(request.amountOfAssets / request.amountOfShares)\n        setPendingWithdrawDeadline(request.creationTime + request.secondsToDeadline)\n      } else {\n        setPendingWithdrawShares(0)\n        setPendingWithdrawSharePrice(0)\n        setPendingWithdrawDeadline(0)\n      }\n    } catch (error) {\n      console.log(error)\n      setPendingWithdrawShares(0)\n      setPendingWithdrawSharePrice(0)\n      setPendingWithdrawDeadline(0)\n    }\n  }\n\n  useEffect(() => {\n    setWithdrawRequestData()\n  }, [address, cellarConfig, boringQueueWithdrawals])\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const geo = useGeo()\n\n  const handleCancellation = async () => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n\n    try {\n      let hash;\n\n      if (boringQueueWithdrawals) {\n        const request =\n          boringQueueWithdrawals.open_requests[0].metadata\n\n        const withdrawTouple = [\n          request.nonce,\n          address,\n          request.assetOut,\n          request.amountOfShares,\n          request.amountOfAssets,\n          request.creationTime,\n          request.secondsToMaturity,\n          request.secondsToDeadline,\n        ]\n        const gasLimitEstimated = await estimateGasLimitWithRetry(\n          boringQueue?.estimateGas.cancelOnChainWithdraw,\n          boringQueue?.simulate.cancelOnChainWithdraw,\n          [withdrawTouple],\n          330000,\n          address\n        )\n        // @ts-ignore\n        hash = await boringQueue?.write.cancelOnChainWithdraw(\n          [withdrawTouple],\n          {\n            gas: gasLimitEstimated,\n            account: address,\n          }\n        )\n      } else {\n        const withdrawTouple = [0, 0, 0]\n\n        const gasLimitEstimated = await estimateGasLimitWithRetry(\n          withdrawQueueContract?.estimateGas.updateWithdrawRequest,\n          withdrawQueueContract?.simulate.updateWithdrawRequest,\n          [cellarConfig.cellar.address, withdrawTouple],\n          330000,\n          address\n        )\n        // @ts-ignore\n        hash = await withdrawQueueContract?.write.updateWithdrawRequest(\n          [cellarConfig.cellar.address, withdrawTouple],\n          {\n            gas: gasLimitEstimated,\n            account: address,\n          }\n        )\n      }\n      \n\n      const onSuccess = () => {\n         // Can track here if we want\n      }\n\n      const onError = (error: Error) => {\n        // Can track here if we want\n      }\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess,\n        onError,\n      })\n    } catch (e) {\n      const error = e as Error\n\n      if (error.message === \"GAS_LIMIT_ERROR\") {\n        addToast({\n          heading: \"Transaction not submitted\",\n          body: (\n            <Text>\n              Your transaction has failed, if it does not work after\n              waiting some time and retrying please send a message in\n              our{\" \"}\n              {\n                <Link\n                  href=\"https://discord.com/channels/814266181267619840/814279703622844426\"\n                  isExternal\n                  textDecoration=\"underline\"\n                >\n                  Discord Support channel\n                </Link>\n              }{\" \"}\n              tagging a member of the front end team.\n            </Text>\n          ),\n          status: \"info\",\n          closeHandler: closeAll,\n        })\n      } else {\n        console.error(error)\n        addToast({\n          heading: \"Error cancelling withdraw request\",\n          body: <Text>Withdraw Queue Cancellation Aborted</Text>,\n          status: \"error\",\n          closeHandler: closeAll,\n        })\n      }\n    }\n  }\n\n  return (\n    <InnerCard\n      bg=\"surface.tertiary\"\n      backdropFilter=\"none\"\n      pt={6}\n      px={4}\n      pb={4}\n    >\n      <TableContainer>\n        <HStack justifyContent=\"space-between\" px={4} pt={2} pb={4}>\n          <Tooltip\n            hasArrow\n            arrowShadowColor=\"purple.base\"\n            label=\"Your active withdraw requests for this vault. Only 1 may be open at a time, per vault.\"\n            placement=\"top\"\n            bg=\"surface.bg\"\n            color=\"neutral.300\"\n            textAlign={\"center\"}\n          >\n            <HStack spacing={2} align=\"center\">\n              <Heading fontSize=\"lg\">\n                Pending Withdraws in Queue\n              </Heading>\n              <InformationIcon color=\"neutral.300\" boxSize={3.5} />\n            </HStack>\n          </Tooltip>\n        </HStack>\n        <Table\n          variant=\"unstyled\"\n          css={{\n            \"td, th\": {\n              padding: \"12px 16px\",\n              height: \"56px\",\n            },\n            th: {\n              height: \"max-content\",\n            },\n          }}\n          {...props}\n        >\n          <Thead>\n            <Tr color=\"neutral.300\">\n              <Th\n                fontSize={10}\n                fontWeight=\"normal\"\n                textTransform=\"capitalize\"\n              >\n                Shares\n              </Th>\n              <Tooltip\n                hasArrow\n                arrowShadowColor=\"purple.base\"\n                label=\"The target share price for this withdraw based on your previously selected share price discount at the time of your withdraw request submission.\"\n                placement=\"top\"\n                bg=\"surface.bg\"\n                color=\"neutral.300\"\n                textAlign={\"center\"}\n              >\n                <Th\n                  fontSize={10}\n                  fontWeight=\"normal\"\n                  textTransform=\"capitalize\"\n                >\n                  <HStack spacing={1} align=\"center\">\n                    <Text>Target Share Price</Text>\n                    <InformationIcon\n                      color=\"neutral.300\"\n                      boxSize={3}\n                    />\n                  </HStack>\n                </Th>\n              </Tooltip>\n              <Tooltip\n                hasArrow\n                arrowShadowColor=\"purple.base\"\n                label=\"The amount of time remaining for your withdraw request to be fulfilled. If this time expires with your request unfulfilled, your withdraw request will be cancelled.\"\n                placement=\"top\"\n                bg=\"surface.bg\"\n                color=\"neutral.300\"\n                textAlign={\"center\"}\n              >\n                <Th\n                  fontSize={10}\n                  fontWeight=\"normal\"\n                  textTransform=\"capitalize\"\n                >\n                  <HStack spacing={1} align=\"center\">\n                    <Text>Remaining Time to Fulfill</Text>\n                    <InformationIcon\n                      color=\"neutral.300\"\n                      boxSize={3}\n                    />\n                  </HStack>\n                </Th>\n              </Tooltip>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody fontWeight=\"bold\">\n            <Tr\n              key={0}\n              _hover={{\n                bg: \"surface.secondary\",\n                \"td:first-of-type\": {\n                  borderRadius: \"32px 0 0 32px\",\n                  overflow: \"hidden\",\n                },\n                \"td:last-of-type\": {\n                  borderRadius: \"0 32px 32px 0\",\n                  overflow: \"hidden\",\n                },\n              }}\n              _last={{\n                border: \"none\",\n              }}\n            >\n              <Td>\n                <HStack spacing={2}>\n                  <Image\n                    src={cellarConfig.lpToken.imagePath}\n                    alt=\"lp token image\"\n                    height=\"20px\"\n                  />\n                  <Text textAlign=\"right\">\n                    {(\n                      pendingWithdrawShares /\n                      10 ** cellarConfig.cellar.decimals\n                    ).toLocaleString()}\n                  </Text>\n                </HStack>\n              </Td>\n              <Td>\n                <HStack spacing={2}>\n                  <Text textAlign=\"right\">\n                    {pendingWithdrawSharePrice.toLocaleString()}\n                  </Text>\n                </HStack>\n              </Td>\n              <Td>\n                <HStack spacing={2}>\n                  <Text textAlign=\"right\">\n                    {formatTimeRemaining(pendingWithdrawDeadline)}\n                  </Text>\n                </HStack>\n              </Td>\n              <Td fontWeight=\"normal\">\n                <Flex justify=\"flex-end\">\n                  <HStack spacing={2}>\n                    <WithdrawQueueButton\n                      size=\"sm\"\n                      chain={cellarConfig.chain}\n                      buttonLabel=\"Replace Withdraw Request\"\n                      onSuccessfulWithdraw={setWithdrawRequestData}\n                    />\n                    <SecondaryButton\n                      size=\"sm\"\n                      onClick={() => {\n                        // Submit Cancel\n                        handleCancellation()\n\n                        // Refresh Data\n                        setWithdrawRequestData()\n                      }}\n                    >\n                      Cancel Request\n                    </SecondaryButton>\n                  </HStack>\n                </Flex>\n              </Td>\n            </Tr>\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </InnerCard>\n  )\n}\n\nexport default WithdrawQueueCard\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/ApyChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":49,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2938,2941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2938,2941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Stack, Text } from \"@chakra-ui/react\"\nimport { linearGradientDef } from \"@nivo/core\"\nimport { LineSeries, Point, PointTooltipProps, AllowedValue } from \"@nivo/line\"\nimport { useNivoThemes } from \"hooks/nivo\"\nimport dynamic from \"next/dynamic\"\nimport {\n  Dispatch,\n  FunctionComponent,\n  SetStateAction,\n  useMemo\n} from \"react\"\nimport { colors } from \"theme/colors\"\nimport { format, isSameDay, isSameHour } from \"date-fns\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { ChartPoint } from \"./ChartPoint\"\nimport { ChartTooltipItem } from \"./ChartTooltipItem\"\nimport { useApyChart } from \"data/context/apyChartContext\"\nconst LineChart = dynamic(\n  () => import(\"components/_charts/LineChart\"),\n  {\n    ssr: false,\n  }\n)\ninterface TokenPriceChartProps {\n  timeline: string\n  pointActive?: Point<LineSeries>\n  setPointActive: Dispatch<\n    SetStateAction<Point<LineSeries> | undefined>\n  >\n}\nexport const ApyChart = ({\n  timeline,\n  pointActive,\n  setPointActive,\n}: TokenPriceChartProps) => {\n  const { data } = useApyChart()\n  const { chartTheme } = useNivoThemes()\n  const onMouseMove = (\n    point: Point<LineSeries>\n  ) => {\n    setPointActive(point)\n  }\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\")\n\n  const ToolTip: FunctionComponent<PointTooltipProps<LineSeries>> = ({\n    point,\n  }) => {\n    const { id } = point\n    const [_, i] = id.split(\".\")\n    if (isLarger768) {\n      return (\n        <Stack\n          p={4}\n          bg=\"surface.blackTransparent\"\n          borderWidth={1}\n          borderColor=\"purple.base\"\n          borderRadius={8}\n          textTransform=\"capitalize\"\n        >\n          {data.series?.map((item) => {\n            return (\n              <ChartTooltipItem\n                key={item.id}\n                backgroundColor=\"neutral.100\"\n                name={data.label + \" Moving Average APY\"}\n                percentage={`${String(\n                  data.series?.find((s) => s.id === item.id)?.data[\n                    Number(i)\n                  ]?.y\n                )}`}\n              />\n            )\n          })}\n          <Text color=\"neutral.400\">\n            {format(\n              new Date(\n                String(data.series?.[0].data[Number(i)].x)\n              ),\n              \"MMM, d, yyyy, HH:mm\"\n            )}\n          </Text>\n        </Stack>\n      )\n    }\n    return null\n  }\n\n  const Point = ({\n    color,\n    datum,\n  }: {\n    color: string\n    datum: { x: AllowedValue; y: AllowedValue }\n  }) => {\n    const active =\n      timeline === \"1D\"\n        ? isSameHour(\n            new Date(String(datum.x)),\n            new Date(String(pointActive?.data.x))\n          )\n        : isSameDay(\n            new Date(String(datum.x)),\n            new Date(String(pointActive?.data.x))\n          )\n    if (active) {\n      return <ChartPoint fill={color} stroke=\"neutral.100\" />\n    }\n    return null\n  }\n\n  const hourlyAxisBottom = useMemo<any>(() => {\n    if (timeline === \"1D\") {\n      return {\n        axisBottom: {\n          format: \"%d.%b %H:%M\",\n          tickValues: isLarger768 ? \"every 3 hours\" : \"every 6 hours\",\n        },\n      }\n    }\n    if (timeline === \"7D\" || timeline === \"30D\") {\n      // show format in day.month\n      return {\n        axisBottom: {\n          format: \"%d.%b\",\n          tickValues: isLarger768 ? \"every 2 days\" : \"every 5 days\",\n        },\n      }\n    }\n    if (\n      timeline === \"1Y\" ||\n      timeline === \"ALL\" ||\n      timeline === \"All\"\n    ) {\n      if (data.series && data.series[0].data.length < 30) {\n        return {\n          axisBottom: {\n            format: \"%d.%b\",\n            tickValues: isLarger768 ? \"every 3 days\" : \"every 5 days\",\n          },\n        }\n      }\n      if (data.series && data.series[0].data.length < 60) {\n        return {\n          axisBottom: {\n            format: \"%d.%b\",\n            tickValues: isLarger768\n              ? \"every 5 days\"\n              : \"every 10 days\",\n          },\n        }\n      }\n      // show format in month.year\n      return {\n        axisBottom: {\n          format: \"%b.%y\",\n          tickValues: \"every 1 month\",\n        },\n      }\n    }\n  }, [isLarger768, timeline, data])\n\n  return (\n    <LineChart\n      {...data.chartProps}\n      {...hourlyAxisBottom}\n      data={data.series || []}\n      colors={colors.neutral[100]}\n      animate={false}\n      crosshairType=\"x\"\n      defs={[\n        linearGradientDef(\"gradientA\", [\n          { offset: 0, color: \"inherit\" },\n          { offset: 100, color: \"inherit\", opacity: 0 },\n        ]),\n      ]}\n      margin={{ bottom: 110, left: 35, right: 18, top: 20 }}\n      theme={chartTheme}\n      onMouseMove={onMouseMove}\n      onMouseLeave={() => {\n        setPointActive(undefined)\n      }}\n      tooltip={ToolTip}\n      pointSymbol={Point}\n      pointSize={16}\n      enablePoints\n      yScale={{\n        type: \"linear\",\n        stacked: false,\n        max: \"auto\",\n        clamp: true,\n        nice: true,\n        stepSize: 1,\n      }}\n      axisLeft={{\n        renderTick: (tick) => {\n          return (\n            <g\n              transform={`translate(${tick.x + 3},${tick.y})`}\n              style={{ opacity: 1 }}\n            >\n              <line\n                x1=\"0\"\n                x2=\"-3\"\n                y1=\"0\"\n                y2=\"0\"\n                style={{\n                  stroke: \"rgb(237, 235, 245)\",\n                  strokeWidth: 1,\n                }}\n              />\n              <text\n                transform=\"translate(-4, 0)\"\n                textAnchor=\"end\"\n                dominantBaseline=\"central\"\n                style={{\n                  fontFamily: \"sans-serif\",\n                  fontSize: 9,\n                  fill: \"rgb(237, 235, 245)\",\n                }}\n              >\n                {tick.value} %\n              </text>\n            </g>\n          )\n        },\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legendPosition: \"middle\",\n        tickValues: 5,\n      }}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/BarChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[153,156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[153,156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[286,289],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[286,289],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC } from \"react\"\nimport { BarSvgProps, ResponsiveBar } from \"@nivo/bar\"\nimport { ToolTip } from \"./BarToolTip\"\n\nconst BarChart: FC<BarSvgProps<any>> = ({ data, ...rest }) => {\n  return (\n    <ResponsiveBar\n      data={data}\n      enableLabel={false}\n      tooltip={ToolTip as any}\n      {...rest}\n    />\n  )\n}\n\nexport default BarChart\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/BarToolTip.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Circle,\n  ComponentWithAs,\n  forwardRef,\n  HStack,\n  Text,\n} from \"@chakra-ui/react\"\nimport { BarTooltipProps } from \"@nivo/bar\"\n\nexport const ToolTip: ComponentWithAs<\"span\", BarTooltipProps<any>> = forwardRef(\n  ({ color, id, value }, ref) => {\n    return (\n      <HStack\n        ref={ref}\n        as=\"span\"\n        px={3}\n        py={1}\n        bg=\"surface.bg\"\n        borderWidth={1}\n        borderColor=\"purple.base\"\n        borderRadius={4}\n      >\n        <Circle size={4} bgColor={color} />\n        <Text textTransform=\"capitalize\">\n          {id}: {value}%\n        </Text>\n      </HStack>\n    )\n  }\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/ChartPoint.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/ChartTooltipItem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/Legend.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/LineChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/LineChartArea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/LineToolTip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_charts/TokenPriceChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":54,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3355,3358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3355,3358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Stack, Text } from \"@chakra-ui/react\"\nimport { linearGradientDef } from \"@nivo/core\"\nimport {\n  LineSeries,\n  Point,\n  PointTooltipProps,\n} from \"@nivo/line\"\nimport { useNivoThemes } from \"hooks/nivo\"\nimport dynamic from \"next/dynamic\"\nimport {\n  Dispatch,\n  FunctionComponent,\n  SetStateAction,\n  useMemo\n} from \"react\"\nimport { colors } from \"theme/colors\"\nimport { format, isSameDay, isSameHour } from \"date-fns\"\nimport { formatPercentage } from \"utils/chartHelper\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { ChartPoint } from \"./ChartPoint\"\nimport { ChartTooltipItem } from \"./ChartTooltipItem\"\nimport { useTokenPriceChart } from \"data/context/tokenPriceChartContext\"\nconst LineChart = dynamic(\n  () => import(\"components/_charts/LineChart\"),\n  {\n    ssr: false,\n  }\n)\ninterface TokenPriceChartProps {\n  timeline: string\n  name: string\n  pointActive?: Point<LineSeries>\n  setPointActive: Dispatch<SetStateAction<Point<LineSeries> | undefined>>\n}\nexport const TokenPriceChart = ({\n  timeline,\n  name: strategyTokenName,\n  pointActive,\n  setPointActive,\n}: TokenPriceChartProps) => {\n  const { data } = useTokenPriceChart()\n  const { chartTheme } = useNivoThemes()\n  const onMouseMove = (\n    point: Point<LineSeries>\n  ) => {\n    setPointActive(point)\n  }\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\")\n\n  const ToolTip: FunctionComponent<PointTooltipProps<LineSeries>> = ({\n    point,\n  }) => {\n    const { id } = point\n    const [_, i] = id.split(\".\")\n    if (isLarger768) {\n      return (\n        <Stack\n          p={4}\n          bg=\"surface.blackTransparent\"\n          borderWidth={1}\n          borderColor=\"purple.base\"\n          borderRadius={8}\n          textTransform=\"capitalize\"\n        >\n          {data.series?.map((item) => {\n            const name = (() => {\n              if (item.id === \"token-price\") return strategyTokenName\n              return \"\"\n            })()\n            return (\n              <ChartTooltipItem\n                key={item.id}\n                backgroundColor=\"neutral.100\"\n                name={name}\n                value={`$${\n                  data.series?.find((s) => s.id === item.id)?.data[\n                    Number(i)\n                  ]?.y\n                }`}\n                percentage={`${formatPercentage(\n                  String(\n                    data.series?.find((s) => s.id === item.id)?.data[\n                      Number(i)\n                    ]?.y\n                  )\n                )}%`}\n              />\n            )\n          })}\n          <Text color=\"neutral.400\">\n            {format(\n              new Date(String(data.series?.[0].data[Number(i)].x)),\n              \"MMM, d, yyyy, HH:mm\"\n            )}\n          </Text>\n        </Stack>\n      )\n    }\n    return null\n  }\n\n  const Point = ({\n    color,\n    datum,\n  }: {\n    color: string\n    datum: { x: Date; y: string }\n  }) => {\n    const active =\n      timeline === \"1D\"\n        ? isSameHour(\n            new Date(String(datum.x)),\n            new Date(String(pointActive?.data.x))\n          )\n        : isSameDay(\n            new Date(String(datum.x)),\n            new Date(String(pointActive?.data.x))\n          )\n    if (active) {\n      return <ChartPoint fill={color} stroke={colors.neutral[100]} />\n    }\n    return null\n  }\n\n  const hourlyAxisBottom = useMemo<any>(() => {\n    if (timeline === \"1D\") {\n      return {\n        axisBottom: {\n          format: \"%d.%b %H:%M\",\n          tickValues: isLarger768 ? \"every 3 hours\" : \"every 6 hours\",\n        },\n      }\n    }\n    if (timeline === \"1W\" || timeline === \"1M\") {\n      // show format in day.month\n      return {\n        axisBottom: {\n          format: \"%d.%b\",\n          tickValues:\n            timeline === \"1W\"\n              ? isLarger768\n                ? \"every 1 day\"\n                : \"every 2 days\"\n              : isLarger768\n              ? \"every 2 days\"\n              : \"every 5 days\",\n        },\n      }\n    }\n    if (\n      timeline === \"1Y\" ||\n      timeline === \"ALL\" ||\n      timeline === \"All\"\n    ) {\n      if (data.series && data.series[0].data.length < 30) {\n        return {\n          axisBottom: {\n            format: \"%d.%b\",\n            tickValues: isLarger768 ? \"every 3 days\" : \"every 5 days\",\n          },\n        }\n      }\n      if (data.series && data.series[0].data.length < 60) {\n        return {\n          axisBottom: {\n            format: \"%d.%b\",\n            tickValues: isLarger768\n              ? \"every 5 days\"\n              : \"every 10 days\",\n          },\n        }\n      }\n      // show format in month.year\n      return {\n        axisBottom: {\n          format: \"%b.%y\",\n          tickValues: \"every 1 month\",\n        },\n      }\n    }\n  }, [isLarger768, timeline, data])\n\n  return (\n    <LineChart\n      {...data.chartProps}\n      {...hourlyAxisBottom}\n      data={data.series || []}\n      colors={colors.neutral[100]}\n      enableArea={true}\n      animate={false}\n      crosshairType=\"x\"\n      defs={[\n        linearGradientDef(\"gradientA\", [\n          { offset: 0, color: \"inherit\" },\n          { offset: 100, color: \"inherit\", opacity: 0 },\n        ]),\n      ]}\n      fill={[{ match: \"*\", id: \"gradientA\" }]}\n      margin={{ bottom: 110, left: 26, right: 18, top: 20 }}\n      theme={chartTheme}\n      onMouseMove={onMouseMove}\n      onMouseLeave={() => {\n        setPointActive(undefined)\n      }}\n      tooltip={ToolTip}\n      pointSymbol={Point}\n      pointSize={16}\n      enablePoints\n      yScale={{\n        type: \"linear\",\n        stacked: false,\n        max: \"auto\",\n        min: \"auto\",\n      }}\n      axisLeft={{\n        tickRotation: 0,\n        legendPosition: \"middle\",\n        renderTick: (tick) => {\n          return (\n            <g\n              transform={`translate(${tick.x + 3},${tick.y})`}\n              style={{ opacity: 1 }}\n            >\n              <line\n                x1=\"0\"\n                x2=\"-3\"\n                y1=\"0\"\n                y2=\"0\"\n                style={{\n                  stroke: \"rgb(237, 235, 245)\",\n                  strokeWidth: 1,\n                }}\n              />\n              <text\n                transform=\"translate(-4, 0)\"\n                textAnchor=\"end\"\n                dominantBaseline=\"central\"\n                style={{\n                  fontFamily: \"sans-serif\",\n                  fontSize: 9,\n                  fill: \"rgb(237, 235, 245)\",\n                }}\n              >\n                {tick.value} %\n              </text>\n            </g>\n          )\n        },\n      }}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_columns/SidebarColumn.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PercentageText } from \"components/PercentageText\"\nimport { StrategySection } from \"components/_tables/StrategySection\"\nimport { Timeline } from \"data/context/homeContext\"\nimport { CellValue } from \"react-table\"\n\ntype SidebarColumnProps = {\n  timeline: Timeline\n}\n\nexport const SidebarColumn = ({ timeline }: SidebarColumnProps) => {\n  return [\n    {\n      Header: \"Vault\",\n      accessor: \"name\",\n      Cell: ({ row }: any) => {\n        return (\n          <StrategySection\n            icon={row.original.userStrategyData.strategyData.logo}\n            title={row.original.userStrategyData.strategyData.name}\n            description={\n              row.original.userStrategyData.strategyData.description\n            }\n            netValue={\n              row.original.userStrategyData.userData.netValue\n                .formatted\n            }\n            rewards={\n              row.original.userStrategyData.userData\n                .claimableSommReward?.value\n                ? row.original.userStrategyData.userData\n                    .claimableSommReward?.formatted\n                : \"--\"\n            }\n            badges={row.original.config.badges}\n          />\n        )\n      },\n      disableSortBy: true,\n    },\n    {\n      Header: timeline.title,\n      accessor: `userStrategyData.strategyData.changes.${timeline.value}`,\n      Cell: ({ cell: { value } }: CellValue) => (\n        <PercentageText data={value} arrowT2 fontWeight={600} />\n      ),\n      sortType: \"basic\",\n    },\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_columns/StrategyDesktopColumn.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DepositAndWithdrawButton' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StrategySection' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trackVaultInteraction' is defined but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AssetAvatarGroup' is assigned a value but never used.","line":56,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":23},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":56,"column":26,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":68,"endColumn":3},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":70,"column":21,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":84,"endColumn":3},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDepositModalOpen' is defined but never used.","line":87,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2173,2176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2173,2176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4672,4675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4672,4675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6207,6210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6207,6210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":238,"column":39,"nodeType":"Identifier","endLine":238,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":284,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":284,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7660,7663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7660,7663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Avatar,\n  AvatarGroup,\n  Badge,\n  Box,\n  Flex,\n  HStack,\n  Text,\n  Tooltip,\n} from \"@chakra-ui/react\"\nimport { DepositAndWithdrawButton } from \"components/_buttons/DepositAndWithdrawButton\"\nimport { VaultActionButton } from \"components/_buttons/VaultActionButton\"\nimport StrategyRow from \"components/_vaults/StrategyRow\"\nimport { InformationIcon } from \"components/_icons\"\nimport { StrategySection } from \"components/_tables/StrategySection\"\nimport { AvatarTooltip } from \"components/_tooltip/AvatarTooltip\"\nimport { Chain } from \"data/chainConfig\"\nimport { DepositModalType } from \"data/hooks/useDepositModalStore\"\nimport { Token } from \"data/tokenConfig\"\nimport { memo, useState } from \"react\"\nimport { CellValue } from \"react-table\"\nimport { analytics } from \"utils/analytics\"\n\ntype StrategyDesktopColumnProps = {\n  onDepositModalOpen: ({\n    id,\n    type,\n  }: {\n    id: string\n    type: DepositModalType\n  }) => void\n}\n\ntype RowData = {\n  original: {\n    baseApySumRewards?: {\n      formatted?: string\n    }\n    activeAsset: {\n      symbol: string\n    }\n    config: {\n      chain: {\n        displayName: string\n      }\n    }\n  }\n}\n\nfunction trackVaultInteraction(vaultName: string) {\n  analytics.track(\"vault.interacted\", {\n    vault: vaultName,\n  })\n}\n\nconst AssetAvatarGroup = memo(({ assets }: { assets: Token[] }) => {\n  return (\n    <AvatarGroup size=\"sm\">\n      {assets?.map((asset: Token) => (\n        <Avatar\n          name={asset?.symbol}\n          src={asset?.src}\n          key={asset?.symbol}\n        />\n      ))}\n    </AvatarGroup>\n  )\n})\n\nconst ChainAvatar = memo(({ chain }: { chain: Chain }) => (\n  <AvatarGroup>\n    <Avatar\n      name={chain.displayName}\n      src={chain.logoPath}\n      key={chain.id}\n      background={\"transparent\"}\n      border={\"none\"}\n      sx={{\n        width: \"2.0em\",\n        height: \"2.0em\",\n      }}\n    />\n  </AvatarGroup>\n))\n\nexport const StrategyDesktopColumn = ({\n  onDepositModalOpen,\n}: StrategyDesktopColumnProps) => {\n  return [\n    {\n      Header: () => (\n        <span style={{ textAlign: \"left\", width: \"100%\" }}>\n          Vault\n        </span>\n      ),\n      accessor: \"name\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) {\n          return <StrategyRow vault={row.original} />\n        }\n        const shortDesc = row.original?.shortDescription\n        const providerText =\n          row.original?.provider?.title || row.original?.provider\n        return (\n          <Box>\n            <HStack spacing={2}>\n              <Text fontWeight=\"bold\">{row.original?.name}</Text>\n            </HStack>\n            <HStack spacing={2} mt=\"1\">\n              {providerText && (\n                <Text fontSize=\"sm\" color=\"whiteAlpha.800\">\n                  {providerText}\n                </Text>\n              )}\n            </HStack>\n            {shortDesc && (\n              <Text mt=\"1\" fontSize=\"sm\" color=\"whiteAlpha.800\">\n                {shortDesc}\n              </Text>\n            )}\n          </Box>\n        )\n      },\n      disableSortBy: false,\n      sortType: (rowA: RowData, rowB: RowData) => {\n        // Sort by active asset asset\n        const valA =\n          rowA.original.activeAsset?.symbol.toLowerCase() || \"\"\n        const valB =\n          rowB.original.activeAsset?.symbol.toLowerCase() || \"\"\n\n        // Normal Sorting\n        if (valA > valB) return 1\n\n        if (valB > valA) return -1\n\n        return 0\n      },\n    },\n    {\n      Header: \"TVL\",\n      accessor: \"tvm.value\",\n      Cell: ({\n        row: {\n          original: { launchDate, tvm, isHero, isSommNative },\n        },\n      }: {\n        row: {\n          original: {\n            launchDate: number\n            tvm: { value: number; formatted: string }\n            isHero: boolean\n            isSommNative?: boolean\n          }\n        }\n      }) => {\n        if (isSommNative) return null\n        return (\n          <Text\n            fontWeight={550}\n            fontSize={isHero ? \"20px\" : \"16px\"}\n            textAlign=\"right\"\n          >\n            {launchDate && launchDate > Date.now()\n              ? \"--\"\n              : tvm?.formatted ?? \"--\"}\n          </Text>\n        )\n      },\n    },\n    {\n      Header: () => (\n        <Tooltip\n          arrowShadowColor=\"purple.base\"\n          label=\"Net rewards inclusive of base yield and any rewards program when active\"\n          placement=\"top\"\n          color=\"neutral.300\"\n          bg=\"surface.bg\"\n        >\n          <HStack spacing={1}>\n            <Text>Net Rewards</Text>\n            <InformationIcon color=\"neutral.400\" boxSize={3} />\n          </HStack>\n        </Tooltip>\n      ),\n      accessor: \"baseApy\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) return null\n        const launchDate = row.original.launchDate\n        const value = row.original.baseApySumRewards?.formatted\n        if (launchDate && launchDate > Date.now()) {\n          return (\n            <Text fontWeight={550} fontSize=\"16px\" textAlign=\"right\">\n              --\n            </Text>\n          )\n        }\n        return (\n          <Text fontWeight={600} fontSize=\"16px\" textAlign=\"right\">\n            {value ?? \"--\"}\n          </Text>\n        )\n      },\n      sortType: (rowA: RowData, rowB: RowData) => {\n        // Convert the value to number, if it doesn't exist, default to 0\n        const valA = parseFloat(\n          rowA.original.baseApySumRewards?.formatted || \"0\"\n        )\n        const valB = parseFloat(\n          rowB.original.baseApySumRewards?.formatted || \"0\"\n        )\n\n        // Sort from highest to lowest\n        return valB - valA\n      },\n    },\n    {\n      Header: () => (\n        <Tooltip\n          arrowShadowColor=\"purple.base\"\n          label=\"The chain the vault is deployed on\"\n          placement=\"top\"\n          color=\"neutral.300\"\n          bg=\"surface.bg\"\n        >\n          <HStack\n            style={{ textAlign: \"right\", width: \"100%\" }}\n            justifyContent={\"right\"}\n          >\n            <Text>Chain</Text>\n            <InformationIcon color=\"neutral.400\" boxSize={3} />\n          </HStack>\n        </Tooltip>\n      ),\n      accessor: \"chain\",\n      Cell: ({ cell: { row } }: CellValue) => {\n        if ((row as any)?.original?.isSommNative) return null\n        const [isHover, setIsHover] = useState(false)\n        const handleMouseOver = () => {\n          setIsHover(true)\n        }\n        const handleMouseLeave = () => {\n          setIsHover(false)\n        }\n        if (!row)\n          return (\n            <Text fontWeight={600} fontSize=\"12px\">\n              --\n            </Text>\n          )\n        return (\n          <Box\n            aria-label={`Chain: ${row.original.config.chain.displayName}`}\n            onMouseLeave={handleMouseLeave}\n            onMouseOver={handleMouseOver}\n            w={\"80%\"}\n          >\n            <HStack justifyContent={\"right\"}>\n              <ChainAvatar chain={row.original.config.chain} />\n            </HStack>\n            <Flex alignItems=\"center\" direction=\"column\">\n              {isHover && (\n                <AvatarTooltip chains={[row.original.config.chain]} />\n              )}\n            </Flex>\n          </Box>\n        )\n      },\n      disableSortBy: false,\n      sortType: (rowA: RowData, rowB: RowData) => {\n        const valA =\n          rowA.original.config.chain.displayName.toLowerCase() || \"\"\n        const valB =\n          rowB.original.config.chain.displayName.toLowerCase() || \"\"\n        if (valA > valB) return 1\n        if (valB > valA) return -1\n        return 0\n      },\n    },\n    // Deposit column\n    {\n      Header: () => <Text>Action</Text>,\n      id: \"deposit\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) return null\n        return <VaultActionButton vault={row.original} />\n      },\n    },\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_columns/StrategyMobileColumn.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Timeline' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DepositModalType' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[657,660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[657,660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2289,2292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2289,2292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Text } from \"@chakra-ui/react\"\nimport { StrategySection } from \"components/_tables/StrategySection\"\nimport StrategyRow from \"components/_vaults/StrategyRow\"\nimport { Timeline } from \"data/context/homeContext\"\nimport { DepositModalType } from \"data/hooks/useDepositModalStore\"\n\ntype RowData = {\n  original: {\n    baseApySumRewards?: {\n      formatted?: string\n    }\n    activeAsset: {\n      symbol: string\n    }\n  }\n}\n\nexport const StrategyMobileColumn = () => {\n  return [\n    {\n      Header: () => (\n        <span style={{ textAlign: \"left\", width: \"100%\" }}>\n          Vault\n        </span>\n      ),\n      accessor: \"name\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) {\n          return <StrategyRow vault={row.original} />\n        }\n        return (\n          <StrategySection\n            icon={row.original.logo}\n            title={row.original.name}\n            provider={row.original.provider.title}\n            type={row.original.type}\n            date={row.original.launchDate}\n            description={row.original.description}\n            isDeprecated={row.original.deprecated}\n            badges={row.original.config.badges}\n            isSommNative={row.original.isSommNative}\n          />\n        )\n      },\n      disableSortBy: false,\n      sortType: (rowA: RowData, rowB: RowData) => {\n        // Sort by active asset asset\n        const valA =\n          rowA.original.activeAsset?.symbol.toLowerCase() || \"\"\n        const valB =\n          rowB.original.activeAsset?.symbol.toLowerCase() || \"\"\n\n        // Normal Sorting\n        if (valA > valB) return 1\n\n        if (valB > valA) return -1\n\n        return 0\n      },\n    },\n    {\n      Header: \"TVL\",\n      accessor: \"tvm.value\",\n      Cell: ({\n        row: {\n          original: { launchDate, tvm },\n        },\n      }: {\n        row: {\n          original: {\n            launchDate: number\n            tvm: { value: number; formatted: string }\n          }\n        }\n      }) => (\n        <Text fontWeight={550} fontSize=\"16px\" textAlign=\"right\">\n          {launchDate && launchDate > Date.now()\n            ? \"--\"\n            : tvm?.formatted ?? \"--\"}\n        </Text>\n      ),\n    },\n    {\n      Header: () => <Text>Net Rewards</Text>,\n      accessor: \"baseApy\",\n      Cell: ({ row }: any) => {\n        const value = row.original.baseApySumRewards?.formatted\n        const launchDate = row.original.launchDate\n        if (launchDate && launchDate > Date.now()) {\n          return (\n            <Text fontWeight={550} fontSize=\"16px\" textAlign=\"right\">\n              --\n            </Text>\n          )\n        }\n        return (\n          <Text fontWeight={600} fontSize=\"16px\" textAlign=\"right\">\n            {value ?? \"--\"}\n          </Text>\n        )\n      },\n    },\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_columns/StrategyTabColumn.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApyRewardsSection' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2864,2867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2864,2867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useState\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":105,"column":39,"nodeType":"Identifier","endLine":105,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4902,4905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4902,4905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5833,5836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5833,5836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6753,6756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6753,6756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Text, Tooltip, HStack, Box, Flex } from \"@chakra-ui/react\"\nimport { DepositAndWithdrawButton } from \"components/_buttons/DepositAndWithdrawButton\"\nimport { ApyRewardsSection } from \"components/_tables/ApyRewardsSection\"\nimport { StrategySection } from \"components/_tables/StrategySection\"\nimport StrategyRow from \"components/_vaults/StrategyRow\"\nimport { DepositModalType } from \"data/hooks/useDepositModalStore\"\nimport { InformationIcon } from \"components/_icons\"\nimport { Avatar, AvatarGroup } from \"@chakra-ui/react\"\nimport { AvatarTooltip } from \"components/_tooltip/AvatarTooltip\"\nimport { useState } from \"react\"\nimport { CellValue } from \"react-table\"\n\ntype StrategyTabColumnProps = {\n  onDepositModalOpen: ({\n    id,\n    type,\n  }: {\n    id: string\n    type: DepositModalType\n  }) => void\n}\n\ntype RowData = {\n  original: {\n    baseApySumRewards?: {\n      formatted?: string\n    }\n    activeAsset: {\n      symbol: string\n    }\n    config: {\n      chain: {\n        displayName: string\n      }\n    }\n  }\n}\n\nexport const StrategyTabColumn = ({\n  onDepositModalOpen,\n}: StrategyTabColumnProps) => {\n  return [\n    {\n      Header: () => (\n        <span style={{ textAlign: \"left\", width: \"100%\" }}>\n          Vault\n        </span>\n      ),\n      accessor: \"name\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) {\n          return <StrategyRow vault={row.original} />\n        }\n        return (\n          <StrategySection\n            icon={row.original.logo}\n            title={row.original.name}\n            provider={row.original.provider.title}\n            type={row.original.type}\n            date={row.original.launchDate}\n            description={row.original.description}\n            isDeprecated={row.original.deprecated}\n            badges={row.original.config.badges}\n            isHero={row.original.isHero}\n            isSommNative={row.original.isSommNative}\n            w={56}\n          />\n        )\n      },\n      disableSortBy: false,\n      sortType: (rowA: RowData, rowB: RowData) => {\n        // Sort by active asset asset\n        const valA =\n          rowA.original.activeAsset?.symbol.toLowerCase() || \"\"\n        const valB =\n          rowB.original.activeAsset?.symbol.toLowerCase() || \"\"\n\n        // Normal Sorting\n        if (valA > valB) return 1\n\n        if (valB > valA) return -1\n\n        return 0\n      },\n    },\n    {\n      Header: () => (\n        <Tooltip\n          arrowShadowColor=\"purple.base\"\n          label=\"The chain the vault is deployed on\"\n          placement=\"top\"\n          color=\"neutral.300\"\n          bg=\"surface.bg\"\n        >\n          <HStack>\n            <Text>Chain</Text>\n            <InformationIcon color=\"neutral.400\" boxSize={3} />\n          </HStack>\n        </Tooltip>\n      ),\n\n      accessor: \"chain\",\n      Cell: ({ cell: { row } }: CellValue) => {\n        if ((row as any)?.original?.isSommNative) return null\n        const [isHover, setIsHover] = useState(false)\n        const handleMouseOver = () => {\n          setIsHover(true)\n        }\n        const handleMouseLeave = () => {\n          setIsHover(false)\n        }\n        if (!row)\n          return (\n            <Text fontWeight={600} fontSize=\"12px\">\n              --\n            </Text>\n          )\n        return (\n          <Box\n            onMouseLeave={handleMouseLeave}\n            onMouseOver={handleMouseOver}\n            w={\"100%\"}\n          >\n            <HStack justifyContent={\"center\"}>\n              <AvatarGroup>\n                <Avatar\n                  name={row.original.config.chain.displayName}\n                  src={row.original.config.chain.logoPath}\n                  key={row.original.config.chain.id}\n                  background={\"transparent\"}\n                  border={\"none\"}\n                  boxShadow={\n                    row.original.isHero\n                      ? \"0 0 15px 5px rgba(147, 51, 234, 0.3)\"\n                      : \"none\"\n                  }\n                  sx={{\n                    width: \"2.2em\", // custom width\n                    height: \"2.2em\", // custom height\n                  }}\n                />\n              </AvatarGroup>\n            </HStack>\n            <Flex alignItems=\"center\" direction=\"column\">\n              {isHover && (\n                <AvatarTooltip chains={[row.original.config.chain]} />\n              )}\n            </Flex>\n          </Box>\n        )\n      },\n      disableSortBy: false,\n      sortType: (rowA: RowData, rowB: RowData) => {\n        // Sort by active asset asset\n        const valA =\n          rowA.original.config.chain.displayName.toLowerCase() || \"\"\n        const valB =\n          rowB.original.config.chain.displayName.toLowerCase() || \"\"\n\n        // Normal Sorting\n        if (valA > valB) return 1\n\n        if (valB > valA) return -1\n\n        return 0\n      },\n    },\n    {\n      Header: \"TVL\",\n      accessor: \"tvm.value\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) return null\n        return (\n          <Text\n            fontWeight={550}\n            fontSize={row.original.isHero ? \"20px\" : \"16px\"}\n            textAlign=\"right\"\n          >\n            {row.original.launchDate &&\n            row.original.launchDate > Date.now()\n              ? \"--\"\n              : row.original.tvm?.formatted ?? \"--\"}\n          </Text>\n        )\n      },\n    },\n    {\n      Header: () => (\n        <Tooltip\n          arrowShadowColor=\"purple.base\"\n          label=\"Net rewards inclusive of base yield and any rewards program when active\"\n          placement=\"top\"\n          color=\"neutral.300\"\n          bg=\"surface.bg\"\n        >\n          <HStack spacing={1}>\n            <Text>Net Rewards</Text>\n            <InformationIcon color=\"neutral.400\" boxSize={3} />\n          </HStack>\n        </Tooltip>\n      ),\n      accessor: \"baseApy\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) return null\n        const value = row.original.baseApySumRewards?.formatted\n        const launchDate = row.original.launchDate\n        if (launchDate && launchDate > Date.now()) {\n          return (\n            <Text fontWeight={550} fontSize=\"16px\" textAlign=\"right\">\n              --\n            </Text>\n          )\n        }\n        return (\n          <Text fontWeight={600} fontSize=\"16px\" textAlign=\"right\">\n            {value ?? \"--\"}\n          </Text>\n        )\n      },\n      sortType: (rowA: RowData, rowB: RowData) => {\n        const valA = parseFloat(\n          rowA.original.baseApySumRewards?.formatted || \"0\"\n        )\n        const valB = parseFloat(\n          rowB.original.baseApySumRewards?.formatted || \"0\"\n        )\n        return valB - valA\n      },\n    },\n    {\n      Header: () => <Text>Deposit</Text>,\n      id: \"deposit\",\n      Cell: ({ row }: any) => {\n        if (row.original?.isSommNative) return null\n        return (\n          <DepositAndWithdrawButton\n            row={row}\n            onDepositModalOpen={onDepositModalOpen}\n          />\n        )\n      },\n    },\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_common/Countdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'variant' is assigned a value but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Stack,\n  Text,\n  VisuallyHidden,\n  HStack,\n} from \"@chakra-ui/react\"\nimport { useEffect, useMemo, useRef, useState } from \"react\"\n\ntype CountdownSize = \"sm\" | \"md\" | \"lg\"\n\nexport interface CountdownProps {\n  targetDate: Date\n  onExpire?: () => void\n  size?: CountdownSize\n  variant?: \"boxed\" | \"plain\"\n}\n\ntype TimeParts = {\n  totalMs: number\n  days: number\n  hours: number\n  minutes: number\n  seconds: number\n}\n\nfunction getRemainingParts(target: Date, now: Date): TimeParts {\n  const totalMs = Math.max(0, target.getTime() - now.getTime())\n  const totalSeconds = Math.floor(totalMs / 1000)\n  const days = Math.floor(totalSeconds / (24 * 3600))\n  const hours = Math.floor((totalSeconds % (24 * 3600)) / 3600)\n  const minutes = Math.floor((totalSeconds % 3600) / 60)\n  const seconds = Math.floor(totalSeconds % 60)\n  return { totalMs, days, hours, minutes, seconds }\n}\n\nconst sizeStyles: Record<\n  CountdownSize,\n  {\n    number: string\n    label: string\n    gap: number\n    px: number\n    py: number\n  }\n> = {\n  sm: { number: \"lg\", label: \"xs\", gap: 3, px: 2, py: 1 }, // ~12px gap\n  md: { number: \"2xl\", label: \"sm\", gap: 4, px: 3, py: 2 }, // ~16px gap\n  lg: { number: \"3xl\", label: \"md\", gap: 5, px: 4, py: 3 }, // ~20px gap\n}\n\nexport default function Countdown({\n  targetDate,\n  onExpire,\n  size = \"md\",\n  variant = \"plain\",\n}: CountdownProps) {\n  // Prevent hydration mismatch: render zeros until mounted\n  const [mounted, setMounted] = useState(false)\n  const [now, setNow] = useState<Date>(new Date(targetDate))\n  const expiredRef = useRef(false)\n  const intervalRef = useRef<number | null>(null)\n\n  const parts = useMemo(() => {\n    if (!mounted) {\n      return { totalMs: 0, days: 0, hours: 0, minutes: 0, seconds: 0 }\n    }\n    return getRemainingParts(targetDate, now)\n  }, [mounted, targetDate, now])\n\n  useEffect(() => {\n    setMounted(true)\n\n    const tick = () => setNow(new Date())\n\n    // first paint after mount\n    tick()\n    intervalRef.current = window.setInterval(tick, 1000)\n\n    return () => {\n      if (intervalRef.current)\n        window.clearInterval(intervalRef.current)\n    }\n  }, [targetDate])\n\n  useEffect(() => {\n    if (mounted && !expiredRef.current && parts.totalMs === 0) {\n      expiredRef.current = true\n      onExpire?.()\n    }\n  }, [mounted, parts.totalMs, onExpire])\n\n  const s = sizeStyles[size]\n\n  const unitBox = (\n    value: number,\n    label: string,\n    ariaLabel: string\n  ) => (\n    <Box\n      as=\"span\"\n      display=\"inline-flex\"\n      flexDir=\"column\"\n      alignItems=\"center\"\n      whiteSpace=\"nowrap\"\n      minW=\"fit-content\"\n      sx={{ fontVariantNumeric: \"tabular-nums\" }}\n    >\n      <VisuallyHidden>{ariaLabel}</VisuallyHidden>\n      <Stack spacing={1} align=\"center\" justify=\"center\">\n        <Text\n          fontWeight={700}\n          fontSize={s.number}\n          lineHeight={1}\n          color=\"count.box.fg\"\n          sx={{ fontVariantNumeric: \"tabular-nums\" }}\n        >\n          {value.toString().padStart(2, \"0\")}\n        </Text>\n        <Text fontSize={s.label} color=\"count.box.sub\">\n          {label}\n        </Text>\n      </Stack>\n    </Box>\n  )\n\n  return (\n    <Box \n      role=\"timer\" \n      aria-live=\"polite\" \n      aria-atomic=\"true\" \n      w=\"full\"\n      overflow=\"hidden\"\n    >\n      <HStack\n        spacing={s.gap}\n        justify=\"space-between\"\n        align=\"center\"\n        w=\"full\"\n        minW=\"320px\"\n        maxW=\"100%\"\n      >\n        {unitBox(parts.days, \"Days\", `Days: ${parts.days}`)}\n        {unitBox(parts.hours, \"Hours\", `Hours: ${parts.hours}`)}\n        {unitBox(\n          parts.minutes,\n          \"Minutes\",\n          `Minutes: ${parts.minutes}`\n        )}\n        {unitBox(\n          parts.seconds,\n          \"Seconds\",\n          `Seconds: ${parts.seconds}`\n        )}\n      </HStack>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_filters/ChainFilter.tsx","messages":[{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":31,"column":28,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":204,"endColumn":2},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":75,"column":23,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":89,"endColumn":5},{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":91,"column":26,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":109,"endColumn":5},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":189,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  HStack,\n  Image,\n  Text,\n  Stack,\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverBody,\n  PopoverContent,\n  AvatarGroup,\n  Avatar,\n  Checkbox,\n} from \"@chakra-ui/react\"\nimport { useState, useEffect, memo } from \"react\"\nimport {\n  chainConfig,\n  Chain,\n  chainConfigMap,\n} from \"src/data/chainConfig\"\nimport { ChevronDownIcon } from \"components/_icons\"\n\nexport interface ChainFilterProps {\n  selectedChainIds: string[]\n  setSelectedChainIds: (\n    chainIds: string[] | ((prevChainIds: string[]) => string[])\n  ) => void\n}\n\nexport const ChainFilter = memo((props: ChainFilterProps) => {\n  const handleChainClick = (chainId: string) => {\n    props.setSelectedChainIds((current: string[]) => {\n      const normalizedChainId = chainId.toLowerCase()\n\n      if (current.includes(normalizedChainId)) {\n        // If the chain is already selected, remove it from the array\n        return current.filter(\n          (id: string) => id !== normalizedChainId\n        )\n      } else {\n        // If the chain is not selected, add it to the array\n        return [...current, normalizedChainId]\n      }\n    })\n  }\n\n  const [checkedStates, setCheckedStates] = useState(\n    new Map(chainConfig.map((chain) => [chain.id, true])) // Default all chains to checked\n  )\n\n  const toggleCheck = (id: string) => {\n    setCheckedStates((prev) => {\n      const newCheckedStates = new Map(prev)\n      newCheckedStates.set(\n        id.toLowerCase(),\n        !newCheckedStates.get(id.toLowerCase())\n      )\n      return newCheckedStates\n    })\n  }\n\n  // For reset button 1 level up\n  // Syncronize the checked states with the selected chain ids\n  useEffect(() => {\n    const newCheckedStates = new Map(\n      chainConfig.map((chain) => [\n        chain.id,\n        props.selectedChainIds.includes(chain.id.toLowerCase()),\n      ])\n    )\n    setCheckedStates(newCheckedStates)\n  }, [props.selectedChainIds])\n\n  const ChainAvatar = memo(({ chainStr }: { chainStr: string }) => {\n    const chain = chainConfigMap[chainStr]\n    return (\n      <Avatar\n        name={chain.displayName}\n        src={chain.logoPath}\n        key={chain.id}\n        background=\"transparent\"\n        border=\"none\"\n        size=\"sm\"\n        marginLeft=\"-0.5rem\"\n        _last={{ marginLeft: 1 }}\n      />\n    )\n  })\n\n  const NetworkDisplay = memo(() => (\n    <HStack spacing={2}>\n      <Text fontSize={\"1.25em\"}>Networks</Text>\n      <HStack justifyContent={\"center\"}>\n        <AvatarGroup size=\"sm\" dir=\"reverse\" max={5}>\n          {props.selectedChainIds\n            .slice(0, 5)\n            .map((chainStr: string) => (\n              <ChainAvatar key={chainStr} chainStr={chainStr} />\n            ))}\n        </AvatarGroup>\n        {props.selectedChainIds.length > 5 && (\n          <Text fontWeight={600}>\n            +{props.selectedChainIds.length - 5}\n          </Text>\n        )}\n      </HStack>\n    </HStack>\n  ))\n\n  return (\n    <Popover placement=\"bottom\" isLazy>\n      <PopoverTrigger>\n        <Button\n          bg=\"none\"\n          borderWidth={2.5}\n          borderColor=\"purple.base\"\n          borderRadius=\"1em\"\n          w=\"auto\"\n          fontFamily=\"Haffer\"\n          fontSize={12}\n          padding=\"1.75em 2em\"\n          _hover={{\n            bg: \"purple.dark\",\n          }}\n        >\n          <HStack>\n            <NetworkDisplay />\n            <ChevronDownIcon />\n          </HStack>\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent\n        p={2}\n        maxW=\"max-content\"\n        borderWidth={1}\n        borderColor=\"purple.dark\"\n        borderRadius={2}\n        bg=\"surface.bg\"\n        fontWeight=\"semibold\"\n        _focus={{\n          outline: \"unset\",\n          outlineOffset: \"unset\",\n          boxShadow: \"unset\",\n        }}\n      >\n        <PopoverBody p={0}>\n          <Stack>\n            {chainConfig.map((chain: Chain) => {\n              return (\n                <Box\n                  as=\"button\"\n                  key={chain.id}\n                  py={2}\n                  px={4}\n                  fontSize=\"sm\"\n                  borderRadius={6}\n                  onClick={() => {\n                    handleChainClick(chain.id)\n                    toggleCheck(chain.id)\n                  }}\n                  _hover={{\n                    cursor: \"pointer\",\n                    bg: \"purple.dark\",\n                    borderColor: \"surface.tertiary\",\n                  }}\n                >\n                  <HStack\n                    display=\"flex\" // Use flex display\n                    justifyContent=\"space-between\" // Space between items\n                    alignItems=\"center\" // Align items vertically\n                    width=\"100%\" // Full width\n                    spacing={3}\n                  >\n                    <Image\n                      src={chain.logoPath}\n                      alt={chain.displayName}\n                      background=\"transparent\"\n                      boxSize=\"24px\"\n                    />\n                    <Text fontWeight=\"semibold\">\n                      {chain.displayName}\n                    </Text>{\" \"}\n                    <Checkbox\n                      id={chain.id}\n                      defaultChecked={true}\n                      isChecked={checkedStates.get(chain.id) || false}\n                      onChange={(e) => {\n                        handleChainClick(chain.id)\n                        toggleCheck(chain.id)\n                      }}\n                    />\n                  </HStack>\n                </Box>\n              )\n            })}\n          </Stack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n)","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_filters/DepositTokenFilter.tsx","messages":[{"ruleId":"react/display-name","severity":1,"message":"Component definition is missing display name","line":39,"column":64,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":293,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":278,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  HStack,\n  Image,\n  Text,\n  SimpleGrid,\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverBody,\n  PopoverContent,\n  AvatarGroup,\n  Avatar,\n  Checkbox,\n  Input,\n  InputRightElement,\n  InputGroup,\n} from \"@chakra-ui/react\"\nimport { useState, FC, useEffect, ChangeEvent, useMemo, memo } from \"react\"\nimport { ChevronDownIcon, DeleteIcon } from \"components/_icons\"\n\nexport type SymbolPathPair = {\n  symbol: string\n  path: string\n}\n\nexport interface DepositTokenFilterProps {\n  constantAllUniqueAssetsArray: SymbolPathPair[]\n  selectedDepositAssets: Record<string, SymbolPathPair>\n  setSelectedDepositAssets: (\n    depositTokens:\n      | Record<string, SymbolPathPair>\n      | ((\n          prevDepositTokens: Record<string, SymbolPathPair>\n        ) => Record<string, SymbolPathPair>)\n  ) => void\n}\n\nexport const DepositTokenFilter: FC<DepositTokenFilterProps> = memo((\n  props\n) => {\n  const handleTokenClick = (symbol: string) => {\n    props.setSelectedDepositAssets((current) => {\n      // If all tokens are selected, remove them all from the array expcept for the one that was clicked\n      if (\n        Object.keys(current).length ===\n        props.constantAllUniqueAssetsArray.length\n      ) {\n        // Toggle all checks off, the one that was clicked will be toggled on in the click handler\n        setCheckedStates(\n          new Map(\n            Object.keys(props.selectedDepositAssets).map((key) => [\n              key,\n              false,\n            ])\n          )\n        )\n\n        return {\n          [symbol]: props.constantAllUniqueAssetsArray.find(\n            (token) => token.symbol === symbol\n          )!,\n        }\n      }\n\n      const newTokens = { ...current }\n      if (newTokens[symbol]) {\n        delete newTokens[symbol]\n      } else {\n        newTokens[symbol] = props.constantAllUniqueAssetsArray.find(\n          (token) => token.symbol === symbol\n        )!\n      }\n      return newTokens\n    })\n  }\n\n  const toggleCheck = (symbol: string) => {\n    setCheckedStates((prev) => {\n      const newCheckedStates = new Map(prev)\n      newCheckedStates.set(symbol, !newCheckedStates.get(symbol))\n      return newCheckedStates\n    })\n  }\n\n  // Initialize checkedStates based on selectedDepositAssets\n  const [checkedStates, setCheckedStates] = useState(\n    new Map(\n      Object.keys(props.selectedDepositAssets).map((key) => [\n        key,\n        !!props.selectedDepositAssets[key], // Check if the asset exists in selectedDepositAssets\n      ])\n    )\n  )\n\n  // Synchronize checkedStates with selectedDepositAssets when it changes\n  // For reset button 1 level up\n\n  useEffect(() => {\n    setCheckedStates(\n      new Map(\n        Object.keys(props.selectedDepositAssets).map((key) => [\n          key,\n          !!props.selectedDepositAssets[key], // Update based on current selectedDepositAssets\n        ])\n      )\n    )\n  }, [props.selectedDepositAssets])\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  // Function to handle search input changes\n  const handleSearchChange = (\n    event: ChangeEvent<HTMLInputElement>\n  ) => {\n    setSearchTerm(event.target.value)\n  }\n\n  // Filter tokens based on search term\n  const filteredTokens = useMemo(\n    () =>\n      props.constantAllUniqueAssetsArray.filter((token) =>\n        token.symbol.toLowerCase().includes(searchTerm.toLowerCase())\n      ),\n    [props.constantAllUniqueAssetsArray, searchTerm]\n  )\n\n  const displayedAssets = useMemo(() => {\n    const commonTokens = [\"WETH\", \"USDC\", \"WBTC\", \"SOMM\", \"stETH\"]\n    const selectedCommonTokens = commonTokens.filter(\n      (symbol) => props.selectedDepositAssets[symbol]\n    )\n    const otherSelectedTokens = Object.keys(\n      props.selectedDepositAssets\n    ).filter((symbol) => !commonTokens.includes(symbol))\n    return [...selectedCommonTokens, ...otherSelectedTokens].slice(\n      0,\n      5\n    )\n  }, [props.selectedDepositAssets])\n\n  const AssetDisplay = useMemo(\n    () => (\n      <HStack>\n        <Text fontSize={\"1.25em\"}>Deposit Assets</Text>\n        <HStack justifyContent={\"center\"}>\n          <AvatarGroup size=\"sm\">\n            {displayedAssets.map((symbol) => {\n              const token = props.selectedDepositAssets[symbol]\n              return (\n                <Avatar\n                  name={token.symbol}\n                  src={token.path}\n                  key={token.symbol}\n                  background=\"transparent\"\n                  border=\"none\"\n                />\n              )\n            })}\n          </AvatarGroup>\n          {Object.keys(props.selectedDepositAssets).length > 5 && (\n            <Text fontWeight={600}>\n              +{Object.keys(props.selectedDepositAssets).length - 5}\n            </Text>\n          )}\n        </HStack>\n      </HStack>\n    ),\n    [displayedAssets, props.selectedDepositAssets]\n  )\n\n  // Function to clear search input\n  const clearSearch = () => {\n    setSearchTerm(\"\")\n  }\n\n  return (\n    <Popover placement=\"bottom\" isLazy>\n      <PopoverTrigger>\n        <Button\n          bg=\"none\"\n          borderWidth={2.5}\n          borderColor=\"purple.base\"\n          borderRadius=\"1em\"\n          w=\"auto\"\n          fontFamily=\"Haffer\"\n          fontSize={12}\n          padding=\"1.75em 2em\"\n          _hover={{\n            bg: \"purple.dark\",\n          }}\n        >\n          <HStack>\n            {AssetDisplay}\n            <ChevronDownIcon />\n          </HStack>\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent\n        p={2}\n        maxW=\"max-content\"\n        borderWidth={1}\n        borderColor=\"purple.dark\"\n        borderRadius={\"1em\"}\n        bg=\"surface.bg\"\n        fontWeight=\"semibold\"\n        _focus={{\n          outline: \"unset\",\n          outlineOffset: \"unset\",\n          boxShadow: \"unset\",\n        }}\n      >\n        <Box pt={4} pb={2} pl={10} width=\"90%\">\n          <InputGroup>\n            <Input\n              placeholder=\"Search...\"\n              onChange={handleSearchChange}\n              value={searchTerm}\n            />\n            {searchTerm && (\n              <InputRightElement\n                onClick={clearSearch}\n                cursor=\"pointer\"\n              >\n                <DeleteIcon color=\"gray.500\" boxSize={\".75em\"} />\n              </InputRightElement>\n            )}\n          </InputGroup>\n        </Box>\n        <PopoverBody p={0}>\n          <SimpleGrid\n            columns={2}\n            spacing={3}\n            paddingTop=\".5em\"\n            paddingBottom=\".5em\"\n          >\n            {Object.values(filteredTokens).map(\n              (token: SymbolPathPair) => (\n                <Box\n                  as=\"button\"\n                  key={token.symbol}\n                  py={2}\n                  px={4}\n                  fontSize=\"sm\"\n                  borderRadius={6}\n                  onClick={() => {\n                    handleTokenClick(token.symbol)\n                    toggleCheck(token.symbol)\n                  }}\n                  _hover={{\n                    cursor: \"pointer\",\n                    bg: \"purple.dark\",\n                    borderColor: \"surface.tertiary\",\n                  }}\n                >\n                  <HStack\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    width=\"100%\"\n                    spacing={3}\n                  >\n                    <Image\n                      src={token.path}\n                      alt={token.symbol}\n                      background=\"transparent\"\n                      border=\"none\"\n                      boxSize=\"2em\"\n                      borderRadius={\"50%\"}\n                    />\n                    <Text fontWeight=\"semibold\">{token.symbol}</Text>\n                    <Checkbox\n                      id={token.symbol}\n                      isChecked={\n                        checkedStates.get(token.symbol) || false\n                      }\n                      onChange={(e) => {\n                        handleTokenClick(token.symbol)\n                        toggleCheck(token.symbol)\n                      }}\n                    />\n                  </HStack>\n                </Box>\n              )\n            )}\n          </SimpleGrid>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n)","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_filters/MiscFilter.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":148,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":148,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  HStack,\n  Text,\n  Stack,\n  Box,\n  Popover,\n  PopoverTrigger,\n  PopoverBody,\n  PopoverContent,\n  Checkbox,\n} from \"@chakra-ui/react\"\nimport { useState, useEffect } from \"react\"\nimport { HamburgerIcon } from \"components/_icons\"\n\nexport interface MiscFilterProp {\n  name: string\n  checked: boolean\n  stateSetFunction: (value: boolean) => void\n}\n\nexport interface MiscFilterProps {\n  categories: MiscFilterProp[]\n}\n\nexport const MiscFilter = (props: MiscFilterProps) => {\n  const [checkedStates, setCheckedStates] = useState(\n    new Map(\n      props.categories.map((category) => [\n        category.name,\n        {\n          checked: category.checked,\n          stateSetFunction: category.stateSetFunction,\n        },\n      ])\n    )\n  )\n\n  const toggleCheck = (id: string) => {\n    setCheckedStates((prev) => {\n      const newChecked = !prev.get(id)!.checked\n      const newCheckedStates = new Map(prev).set(id, {\n        checked: newChecked,\n        stateSetFunction: prev.get(id)!.stateSetFunction,\n      })\n\n      // Using the nullish coalescing operator\n      ;(prev.get(id)!.stateSetFunction ?? (() => {}))(newChecked)\n\n      return newCheckedStates\n    })\n  }\n\n  // Syncronize the checked states with the selected states\n  useEffect(() => {\n    setCheckedStates(\n      new Map(\n        props.categories.map((category) => {\n          return [\n            category.name,\n            {\n              checked: category.checked,\n              stateSetFunction: category.stateSetFunction,\n            },\n          ]\n        })\n      )\n    )\n  }, [props.categories])\n\n  const MiscDisplay = () => {\n    return (\n      <HStack>\n        <Text fontSize={\"1.25em\"}>Filters</Text>\n      </HStack>\n    )\n  }\n\n  return (\n    <Popover placement=\"bottom\" isLazy>\n      <PopoverTrigger>\n        <Button\n          bg=\"none\"\n          borderWidth={2.5}\n          borderColor=\"purple.base\"\n          borderRadius=\"1em\"\n          w=\"auto\"\n          fontFamily=\"Haffer\"\n          fontSize={12}\n          padding=\"1.75em 2em\"\n          _hover={{\n            bg: \"purple.dark\",\n          }}\n        >\n          <HStack>\n            <MiscDisplay />\n            <HamburgerIcon boxSize={3.5} />\n          </HStack>\n        </Button>\n      </PopoverTrigger>\n\n      <PopoverContent\n        p={2}\n        maxW=\"max-content\"\n        borderWidth={1}\n        borderColor=\"purple.dark\"\n        borderRadius={\"1em\"}\n        bg=\"surface.bg\"\n        fontWeight=\"semibold\"\n        _focus={{\n          outline: \"unset\",\n          outlineOffset: \"unset\",\n          boxShadow: \"unset\",\n        }}\n      >\n        <PopoverBody p={0}>\n          <Stack>\n            {props.categories.map((category) => (\n              <Box\n                as=\"button\"\n                key={category.name}\n                py={2}\n                px={4}\n                fontSize=\"sm\"\n                borderRadius={6}\n                onClick={() => {\n                  toggleCheck(category.name)\n                }}\n                _hover={{\n                  cursor: \"pointer\",\n                  bg: \"purple.dark\",\n                  borderColor: \"surface.tertiary\",\n                }}\n              >\n                <HStack\n                  display=\"flex\" // Use flex display\n                  justifyContent=\"space-between\" // Space between items\n                  alignItems=\"center\" // Align items vertically\n                  width=\"100%\" // Full width\n                  spacing={3}\n                >\n                  <Text fontWeight=\"semibold\">{category.name}</Text>{\" \"}\n                  <Checkbox\n                    id={category.name}\n                    isChecked={\n                      checkedStates.get(category.name)!.checked\n                    }\n                    onChange={(e) => {\n                      toggleCheck(category.name)\n                    }}\n                  />\n                </HStack>\n              </Box>\n            ))}\n          </Stack>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/BondForm/BondingPeriodOptions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/BondForm/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":75,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":75,"endColumn":43,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[2252,2253],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":139,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":139,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3853,3866],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is defined but never used.","line":193,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5421,5424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5421,5424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":193,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5429,5432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5429,5432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Heading,\n  HStack,\n  Icon,\n  Image,\n  Input,\n  ModalProps,\n  Text,\n  VStack,\n  Tooltip,\n  Th,\n  Link,\n} from \"@chakra-ui/react\"\nimport { FormProvider, useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { CardHeading } from \"components/_typography/CardHeading\"\nimport { BondingPeriodOptions } from \"./BondingPeriodOptions\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useApproveERC20, useHandleTransaction } from \"hooks/web3\"\nimport { analytics } from \"utils/analytics\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useRouter } from \"next/router\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { bondingPeriodOptions } from \"data/uiConfig\"\nimport { estimateGasLimitWithRetry } from \"utils/estimateGasLimit\"\nimport { useGeo } from \"context/geoContext\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { InformationIcon } from \"components/_icons\"\nimport { waitTime } from \"data/uiConfig\"\nimport { useAccount } from \"wagmi\"\nimport { parseUnits } from \"viem\"\n\ninterface FormValues {\n  depositAmount: number\n  bondingPeriod: number\n}\n\ntype BondFormProps = Pick<ModalProps, \"onClose\">\n\nexport const BondForm = ({ onClose }: BondFormProps) => {\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n\n  const { refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n  const { stakerSigner } = useCreateContracts(cellarConfig)\n\n  const { address } = useAccount()\n\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData } = lpToken\n\n  const methods = useForm<FormValues>({\n    defaultValues: { bondingPeriod: 0 },\n  })\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = methods\n  const { addToast, closeAll } = useBrandedToast()\n\n  const { doApprove } = useApproveERC20({\n    tokenAddress: cellarConfig.cellar.address,\n    spender: cellarConfig.staker?.address!,\n  })\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const watchDepositAmount = watch(\"depositAmount\")\n  const bondPeriod = watch(\"bondingPeriod\")\n\n  const isDisabled =\n    isNaN(watchDepositAmount) || watchDepositAmount <= 0\n  const isError = errors.depositAmount\n\n  const setMax = () =>\n    setValue(\n      \"depositAmount\",\n      parseFloat(\n        toEther(\n          lpTokenData?.formatted,\n          lpTokenData?.decimals,\n          false,\n          6\n        )\n      )\n    )\n\n  const geo = useGeo()\n\n  const onSubmit = async (data: FormValues) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    if (!stakerSigner) {\n      return addToast({\n        heading: \"No wallet connected\",\n        body: <Text>Please connect your wallet</Text>,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n    }\n    const analyticsData = {\n      duration: bondingPeriodOptions(cellarConfig)[bondPeriod],\n    }\n    // analytics.track(\"bond.started\", analyticsData)\n\n    try {\n      await doApprove(data.depositAmount, {\n        onSuccess: () => analytics.track(\"bond.approval-succeeded\"),\n        onError: (error) => {\n          analytics.track(\"bond.approval-failed\")\n          throw error\n        },\n      })\n\n      const depositAmtInWei = parseUnits(\n        data.depositAmount.toString(),\n        cellarConfig.cellar.decimals\n      )\n      const gasLimitEstimated = await estimateGasLimitWithRetry(\n        stakerSigner.estimateGas.stake,\n        stakerSigner.simulate.stake,\n        [depositAmtInWei, bondPeriod],\n        250000,\n        address\n      )\n      // @ts-ignore\n      const hash = await stakerSigner.write.stake(\n        [depositAmtInWei, bondPeriod],\n        { gas: gasLimitEstimated, account: address }\n      )\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess: () => {\n          analytics.track(\"bond.succeeded\", analyticsData)\n          refetch()\n          onClose()\n        },\n        onError: () => analytics.track(\"bond.failed\", analyticsData),\n      })\n      refetch()\n    } catch (e) {\n      const error = e as Error\n      console.error(error.message)\n      if (error.message === \"GAS_LIMIT_ERROR\") {\n        addToast({\n          heading: \"Transaction not submitted\",\n          body: (\n            <Text>\n              Your transaction has failed, if it does not work after\n              waiting some time and retrying please send a message in\n              our{\" \"}\n              {\n                <Link\n                  href=\"https://discord.com/channels/814266181267619840/814279703622844426\"\n                  isExternal\n                  textDecoration=\"underline\"\n                >\n                  Discord Support channel\n                </Link>\n              }{\" \"}\n              tagging a member of the front end team.\n            </Text>\n          ),\n          status: \"info\",\n          closeHandler: closeAll,\n        })\n      } else {\n        addToast({\n          heading: \"Staking LP Tokens\",\n          body: <Text>Tx Cancelled</Text>,\n          status: \"info\",\n          closeHandler: closeAll,\n        })\n      }\n    }\n  }\n\n  const onError = (errors: any, e: any) => {\n    addToast({\n      heading: \"Bonding LP Token\",\n      body: <Text>Bonding Failed</Text>,\n      status: \"error\",\n      closeHandler: closeAll,\n    })\n  }\n\n  return (\n    <FormProvider {...methods}>\n      <VStack\n        as=\"form\"\n        spacing={8}\n        align=\"stretch\"\n        onSubmit={handleSubmit(onSubmit, onError)}\n      >\n        <FormControl isInvalid={isError as boolean | undefined}>\n          <HStack\n            p={4}\n            justifyContent=\"space-between\"\n            w=\"100%\"\n            bg=\"surface.secondary\"\n            border=\"none\"\n            borderRadius={16}\n            appearance=\"none\"\n            textAlign=\"start\"\n            _first={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <HStack>\n              {cellarConfig.lpToken.imagePath && (\n                <Image\n                  src={cellarConfig.lpToken.imagePath}\n                  alt=\"lp token image\"\n                  height=\"22px\"\n                />\n              )}\n\n              <Heading size=\"sm\">{lpTokenData?.symbol}</Heading>\n            </HStack>\n            <VStack spacing={0} align=\"flex-end\">\n              <FormControl isInvalid={isError as boolean | undefined}>\n                <Input\n                  variant=\"unstyled\"\n                  pr=\"2\"\n                  type=\"number\"\n                  step=\"any\"\n                  defaultValue=\"0.00\"\n                  placeholder=\"0.00\"\n                  fontSize=\"lg\"\n                  fontWeight={700}\n                  textAlign=\"right\"\n                  {...register(\"depositAmount\", {\n                    required: \"Enter amount\",\n                    valueAsNumber: true,\n                    validate: {\n                      positive: (v) =>\n                        v > 0 || \"You must submit a positive amount.\",\n                      balance: (v) =>\n                        v <=\n                          parseFloat(\n                            toEther(\n                              lpTokenData?.formatted,\n                              lpTokenData?.decimals,\n                              false,\n                              6\n                            )\n                          ) || \"Insufficient balance\",\n                    },\n                  })}\n                />\n              </FormControl>\n              <HStack spacing={0} fontSize=\"10px\">\n                <Text as=\"span\">\n                  Available:{\" \"}\n                  {(lpTokenData &&\n                    toEther(\n                      lpTokenData.value,\n                      lpTokenData.decimals,\n                      false,\n                      6\n                    )) ||\n                    \"--\"}\n                </Text>\n                <Button\n                  variant=\"unstyled\"\n                  p={0}\n                  w=\"max-content\"\n                  h=\"max-content\"\n                  textTransform=\"uppercase\"\n                  onClick={setMax}\n                  fontSize=\"inherit\"\n                  fontWeight={600}\n                >\n                  max\n                </Button>\n              </HStack>\n            </VStack>\n          </HStack>\n          <FormErrorMessage color=\"energyYellow\">\n            <Icon\n              p={0.5}\n              mr={1}\n              color=\"surface.bg\"\n              bg=\"red.base\"\n              borderRadius=\"50%\"\n              as={AiOutlineInfo}\n            />{\" \"}\n            {errors.depositAmount?.message}\n          </FormErrorMessage>\n        </FormControl>\n        <VStack align=\"stretch\">\n          <CardHeading>\n            <Tooltip\n              hasArrow\n              arrowShadowColor=\"purple.base\"\n              label=\"This is the period you must wait before your tokens are transferable/withdrawable\"\n              placement=\"top\"\n              bg=\"surface.bg\"\n              color=\"neutral.300\"\n            >\n              <Th\n                fontSize={10}\n                fontWeight=\"normal\"\n                textTransform=\"capitalize\"\n              >\n                <HStack spacing={1} align=\"center\">\n                  <Text>Unbonding period</Text>\n                  <InformationIcon color=\"neutral.300\" boxSize={3} />\n                </HStack>\n              </Th>\n            </Tooltip>\n          </CardHeading>\n\n          <BondingPeriodOptions cellarConfig={cellarConfig} />\n        </VStack>\n        {/* <Text fontSize=\"xs\">\n          After triggering 'Unbond,' you will need to wait through the\n          unbonding period you selected, after which your LP tokens\n          can be unstaked and withdrawn.\n        </Text> */}\n        <BaseButton\n          type=\"submit\"\n          isDisabled={isDisabled}\n          isLoading={isSubmitting}\n          fontSize={21}\n          py={6}\n          px={12}\n        >\n          Bond\n        </BaseButton>\n        {waitTime(cellarConfig) !== null && (\n          <Text textAlign=\"center\">\n            Please wait {waitTime(cellarConfig)} after the deposit to\n            Bond\n          </Text>\n        )}\n      </VStack>\n    </FormProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/BridgeForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/ClaimForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[695,698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[695,698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, FC } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { ModalInput } from \"components/_inputs/ModalInput\"\n\ninterface FormValues {\n  claimAmount: number\n}\n\nexport const ClaimForm: FC = () => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n  const [data, setData] = useState<any>()\n  const watchClaimAmount = watch(\"claimAmount\")\n  const isDisabled = isNaN(watchClaimAmount) || watchClaimAmount <= 0\n  const isError = errors.claimAmount\n  const setMax = () => setValue(\"claimAmount\", 100000)\n\n  return (\n    <VStack\n      as=\"form\"\n      spacing={8}\n      align=\"stretch\"\n      onSubmit={handleSubmit((data) => setData(data))}\n    >\n      <FormControl isInvalid={isError as boolean | undefined}>\n        <InputGroup display=\"flex\" alignItems=\"center\">\n          <ModalInput\n            type=\"number\"\n            step=\"any\"\n            {...register(\"claimAmount\", {\n              required: \"Enter amount\",\n              valueAsNumber: true,\n              validate: {\n                positive: (v) =>\n                  v > 0 || \"You must submit a positive amount.\",\n              },\n            })}\n          />\n          <InputRightElement h=\"100%\" mr={3}>\n            <SecondaryButton\n              size=\"sm\"\n              borderRadius={8}\n              onClick={setMax}\n            >\n              Max\n            </SecondaryButton>\n          </InputRightElement>\n        </InputGroup>\n        <FormErrorMessage color=\"energyYellow\">\n          <Icon\n            p={0.5}\n            mr={1}\n            color=\"surface.bg\"\n            bg=\"red.base\"\n            borderRadius=\"50%\"\n            as={AiOutlineInfo}\n          />{\" \"}\n          {errors.claimAmount?.message}\n        </FormErrorMessage>\n      </FormControl>\n      <BaseButton\n        type=\"submit\"\n        isDisabled={isDisabled}\n        isLoading={isSubmitting}\n        fontSize={21}\n        py={6}\n        px={12}\n      >\n        Claim Liquidity\n      </BaseButton>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/MigrationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useWaitForTransactionReceipt' is defined but never used.","line":20,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":85},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ExternalLinkIcon' is defined but never used.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'update' is assigned a value but never used.","line":52,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":44},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":185,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":185,"endColumn":32,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[5254,5255],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  VStack,\n  Button,\n  HStack,\n  Input,\n  Spinner,\n  Image,\n  Stack,\n  Text,\n  Link,\n} from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useAccount, usePublicClient, useWriteContract, useWaitForTransactionReceipt } from \"wagmi\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { useGeo } from \"context/geoContext\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { erc20Abi, getAddress, getContract, parseUnits } from \"viem\"\nimport { ExternalLinkIcon } from \"components/_icons\"\n\ninterface FormValues {\n  withdrawAmount: number\n}\n\ninterface MigrationFormProps {\n  onClose: () => void\n}\n\nexport const MigrationForm = ({ onClose }: MigrationFormProps) => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n\n  const { id: _id } = useDepositModalStore()\n\n  const { addToast, close, closeAll, update } = useBrandedToast()\n  const { address } = useAccount()\n  const publicClient = usePublicClient()\n  const { writeContractAsync } = useWriteContract()\n\n  const id = (useRouter().query.id as string) || _id\n  const cellarConfig = cellarDataMap[id].config\n\n  const alphaStEth = cellarDataMap[\"Alpha-stETH\"]\n\n  const { refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n\n  const { cellarSigner, boringVaultLens } = useCreateContracts(\n    alphaStEth.config\n  )\n\n  const erc20Contract =\n    cellarConfig.baseAsset.address &&\n    publicClient &&\n    getContract({\n      address: getAddress(cellarConfig.baseAsset.address),\n      abi: erc20Abi,\n      client: {\n        public: publicClient,\n      },\n    })\n\n  const cellarContract =\n    publicClient &&\n    getContract({\n      address: getAddress(cellarConfig.cellar.address),\n      abi: cellarConfig.cellar.abi,\n      client: {\n        public: publicClient,\n      },\n    })\n\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData, isLoading: isBalanceLoading } = lpToken\n\n  const watchWithdrawAmount = watch(\"withdrawAmount\")\n  const isDisabled =\n    isNaN(watchWithdrawAmount) || watchWithdrawAmount <= 0\n  const isError = errors.withdrawAmount\n\n  const setMax = () => {\n    const amount = parseFloat(\n      toEther(lpTokenData?.formatted, lpTokenData?.decimals, false, 6)\n    )\n    setValue(\"withdrawAmount\", amount)\n  }\n\n  useEffect(() => {\n    if (watchWithdrawAmount !== null) {\n      analytics.track(\"withdraw.amount-selected\", {\n        account: address,\n        amount: watchWithdrawAmount,\n      })\n    }\n  }, [watchWithdrawAmount, address])\n\n  const geo = useGeo()\n  const onSubmit = async ({ withdrawAmount }: FormValues) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    if (withdrawAmount <= 0 || !erc20Contract || !cellarContract)\n      return\n\n    if (!address) {\n      addToast({\n        heading: \"Connect Wallet\",\n        body: <Text>Please connect your wallet to continue.</Text>,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n      return\n    }\n\n    try {\n      const amtInWei = parseUnits(\n        `${withdrawAmount}`,\n        cellarConfig.cellar.decimals\n      )\n      const amountOfBaseAsset =\n        (await cellarContract.read.convertToAssets([\n          amtInWei,\n        ])) as bigint\n\n      // Check allowance and approve if needed\n      const allowance = await erc20Contract.read.allowance([\n        getAddress(address),\n        getAddress(alphaStEth.config.cellar.address),\n      ])\n\n      let needsApproval = allowance < amountOfBaseAsset\n      if (needsApproval) {\n        const approvalHash = await writeContractAsync({\n          address: cellarConfig.baseAsset.address as `0x${string}`,\n          abi: erc20Abi,\n          functionName: \"approve\",\n          args: [\n            alphaStEth.config.cellar.address as `0x${string}`,\n            amountOfBaseAsset,\n          ],\n        })\n\n        if (approvalHash) {\n          addToast({\n            heading: \"Approving Token\",\n            body: <Text>Please approve the token transfer.</Text>,\n            status: \"info\",\n            closeHandler: close,\n          })\n\n          await publicClient.waitForTransactionReceipt({ hash: approvalHash })\n        }\n      }\n\n      // Get minimum mint amount\n      const minimumMint = await boringVaultLens?.read.previewDeposit([\n        cellarConfig.baseAsset.address,\n        amountOfBaseAsset,\n        alphaStEth.config.cellar.address,\n        alphaStEth.config.accountant?.address,\n      ])\n\n      // Execute migration\n      const migrationHash = await writeContractAsync({\n        address: cellarSigner?.address as `0x${string}`,\n        abi: cellarSigner?.abi!,\n        functionName: \"deposit\",\n        args: [\n          cellarConfig.baseAsset.address,\n          amountOfBaseAsset,\n          minimumMint,\n        ],\n      })\n\n      if (migrationHash) {\n        addToast({\n          heading: \"Migration in Progress\",\n          body: <Text>Your migration is being processed.</Text>,\n          status: \"info\",\n          closeHandler: close,\n        })\n\n        const receipt = await publicClient.waitForTransactionReceipt({ \n          hash: migrationHash \n        })\n\n        if (receipt.status === \"success\") {\n          addToast({\n            heading: \"Migration Successful\",\n            body: <Text>Your migration has been completed successfully.</Text>,\n            status: \"success\",\n            closeHandler: close,\n          })\n          refetch()\n          onClose()\n        } else {\n          addToast({\n            heading: \"Migration Failed\",\n            body: <Text>Migration failed. Please try again.</Text>,\n            status: \"error\",\n            closeHandler: close,\n          })\n        }\n      }\n    } catch (e) {\n      const error = e as Error\n      const isUserRejection = error.message?.includes(\"User rejected\")\n\n      addToast({\n        heading: \"Migration\",\n        body: (\n          <Text>\n            {isUserRejection\n              ? \"Migration cancelled\"\n              : \"Migration failed. Please try manual migration.\"}\n          </Text>\n        ),\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n      if (!isUserRejection) {\n        refetch()\n      }\n      setValue(\"withdrawAmount\", 0)\n    }\n  }\n\n  return (\n    <>\n      <VStack\n        as=\"form\"\n        spacing={8}\n        align=\"stretch\"\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormControl isInvalid={isError as boolean | undefined}>\n          <Stack spacing={2}>\n            <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n              Enter Amount\n            </Text>\n            <HStack\n              backgroundColor=\"surface.tertiary\"\n              justifyContent=\"space-between\"\n              borderRadius={16}\n              px={4}\n              py={3}\n              height=\"64px\"\n            >\n              <HStack>\n                <Image\n                  width=\"16px\"\n                  height=\"16px\"\n                  src={cellarConfig.lpToken.imagePath}\n                  alt=\"coinlogo\"\n                />\n                <Text fontWeight=\"semibold\">\n                  {lpTokenData?.symbol}\n                </Text>\n              </HStack>\n              <VStack spacing={0} align=\"flex-end\">\n                <Input\n                  id=\"amount\"\n                  variant=\"unstyled\"\n                  pr=\"2\"\n                  type=\"number\"\n                  step=\"any\"\n                  defaultValue=\"0.00\"\n                  placeholder=\"0.00\"\n                  fontSize=\"lg\"\n                  fontWeight={700}\n                  textAlign=\"right\"\n                  {...register(\"withdrawAmount\", {\n                    onChange: (event) => {\n                      let val = event.target.value\n\n                      const decimalPos = val.indexOf(\".\")\n\n                      if (\n                        decimalPos !== -1 &&\n                        val.length - decimalPos - 1 >\n                          cellarConfig.cellar.decimals\n                      ) {\n                        val = val.substring(\n                          0,\n                          decimalPos +\n                            cellarConfig.cellar.decimals +\n                            1\n                        ) // Keep token decimal places as max\n                        event.target.value = val\n                      }\n                    },\n                    required: \"Enter amount\",\n                    valueAsNumber: true,\n                    validate: {\n                      positive: (v) =>\n                        v > 0 || \"You must submit a positive amount.\",\n                      balance: (v) =>\n                        v <=\n                          parseFloat(\n                            toEther(\n                              lpTokenData?.formatted,\n                              lpTokenData?.decimals,\n                              false,\n                              6\n                            )\n                          ) || \"Insufficient balance\",\n                    },\n                  })}\n                />\n                <HStack spacing={0} fontSize=\"10px\">\n                  {isBalanceLoading ? (\n                    <Spinner size=\"xs\" mr=\"2\" />\n                  ) : (\n                    <>\n                      <Text as=\"span\">\n                        Available:{\" \"}\n                        {(lpTokenData &&\n                          toEther(\n                            lpTokenData.value,\n                            lpTokenData.decimals,\n                            false,\n                            6\n                          )) ||\n                          \"--\"}\n                      </Text>\n                      <Button\n                        variant=\"unstyled\"\n                        p={0}\n                        w=\"max-content\"\n                        h=\"max-content\"\n                        textTransform=\"uppercase\"\n                        fontSize=\"inherit\"\n                        fontWeight={600}\n                        onClick={setMax}\n                      >\n                        max\n                      </Button>\n                    </>\n                  )}\n                </HStack>\n              </VStack>\n            </HStack>\n\n            <FormErrorMessage color=\"energyYellow\">\n              <Icon\n                p={0.5}\n                mr={1}\n                color=\"surface.bg\"\n                bg=\"red.base\"\n                borderRadius=\"50%\"\n                as={AiOutlineInfo}\n              />\n              {errors.withdrawAmount?.message}\n            </FormErrorMessage>\n          </Stack>\n        </FormControl>\n        <Stack>\n          <Text\n            fontSize=\"sm\"\n            fontWeight=\"semibold\"\n            color=\"neutral.400\"\n          >\n            Transaction Details\n          </Text>\n          <Stack>\n            <HStack\n              alignItems=\"flex-start\"\n              justifyContent=\"space-between\"\n            >\n              <Text color=\"neutral.300\">Vault</Text>\n              <Stack>\n                <Text>{cellarDataMap[id].name}</Text>\n              </Stack>\n            </HStack>\n          </Stack>\n        </Stack>\n\n        <BaseButton\n          type=\"submit\"\n          isDisabled={isDisabled}\n          isLoading={isSubmitting}\n          fontSize={21}\n          py={6}\n          px={12}\n        >\n          Submit\n        </BaseButton>\n      </VStack>\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/SnapshotForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setStakedSommTokens' is assigned a value but never used.","line":31,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\"\nimport { useForm, FormProvider } from \"react-hook-form\"\nimport { useAccount as useEthereumAccount } from \"wagmi\"\nimport { BaseButton } from \"../_buttons/BaseButton\"\nimport { Stack, Text, Box } from \"@chakra-ui/react\"\nimport { signWithKeplr } from \"../../utils/keplr\"\nimport { InputEthereumAddress } from \"../_cards/SnapshotCard/InputEthereumAddress\"\nimport { InputSommelierAddress } from \"../_cards/SnapshotCard/InputSommelierAddress\"\nimport { useBrandedToast } from \"hooks/chakra\"\n\ninterface SnapshotFormProps {\n  wrongNetwork: boolean\n}\n\ninterface SnapshotFormValues {\n  eth_address: string\n  somm_address: string\n}\n\nconst SnapshotForm: React.FC<SnapshotFormProps> = ({\n  wrongNetwork,\n}) => {\n  const methods = useForm<SnapshotFormValues>()\n  const { isConnected: isEthereumConnected } = useEthereumAccount()\n  const ethAddress = methods.watch(\"eth_address\")\n  const sommAddress = methods.watch(\"somm_address\")\n  const isFormFilled = ethAddress && sommAddress\n  const { addToast, close } = useBrandedToast()\n\n  const [registrationMessage, setRegistrationMessage] = useState(\"\")\n  const [stakedSommTokens, setStakedSommTokens] = useState<\n    number | null\n  >(null)\n\n  useEffect(() => {\n    const checkRegistration = async () => {\n      if (!isEthereumConnected || wrongNetwork) return\n\n      try {\n        const checkResponse = await fetch(\"/api/checkRegistration\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            ethAddress: ethAddress,\n            sommAddress: sommAddress,\n          }),\n        })\n\n        const checkData = await checkResponse.json()\n\n        if (checkResponse.status === 409) {\n          setRegistrationMessage(checkData.message)\n        } else if (!checkResponse.ok) {\n          throw new Error(\n            checkData.message || \"Failed to check registration\"\n          )\n        }\n      } catch (error) {\n        console.error(\"Error checking registration: \", error)\n      }\n    }\n\n    checkRegistration()\n  }, [isEthereumConnected, wrongNetwork, ethAddress, sommAddress])\n\n  // if (!isEthereumConnected || wrongNetwork) {\n  //   return (\n  //     <Stack spacing={4} align=\"center\">\n  //       <ConnectButton\n  //         overridechainid={\"ethereum\"}\n  //         unstyled\n  //         height=\"69px\"\n  //         fontSize=\"21px\"\n  //       >\n  //         Connect Ethereum Wallet\n  //       </ConnectButton>\n  //     </Stack>\n  //   )\n  // }\n\n  const onSubmit = async (data: SnapshotFormValues) => {\n    if (!isEthereumConnected || wrongNetwork) {\n      addToast({\n        heading: \"Submission Error\",\n        status: \"error\",\n        body: (\n          <Text>\n            Please check your wallet connection and network.\n          </Text>\n        ),\n        closeHandler: close,\n        duration: null,\n      })\n      return\n    }\n    try {\n      const checkResponse = await fetch(\"/api/checkRegistration\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ethAddress: data.eth_address,\n          sommAddress: data.somm_address,\n        }),\n      })\n\n      const checkData = await checkResponse.json()\n\n      if (checkResponse.status === 409) {\n        addToast({\n          heading: \"Already Registered\",\n          status: \"warning\",\n          body: (\n            <Box maxWidth=\"90vw\" padding=\"2\">\n              <Text wordBreak=\"break-word\">\n                {checkData.message}. You can still proceed to sign and\n                update your registration.\n              </Text>\n            </Box>\n          ),\n          closeHandler: close,\n          duration: null,\n        })\n      } else if (!checkResponse.ok) {\n        throw new Error(\n          checkData.message || \"Failed to check registration\"\n        )\n      }\n\n      const {\n        signature,\n        pubKey,\n        data: encodedData,\n      } = await signWithKeplr(\n        data.somm_address,\n        data.eth_address,\n        data.somm_address\n      )\n\n      const response = await fetch(\"/api/saveSignedMessage\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          sommAddress: data.somm_address,\n          ethAddress: data.eth_address,\n          signature,\n          pubKey,\n          data: encodedData,\n        }),\n      })\n\n      if (!response.ok) {\n        const text = await response.text()\n        throw new Error(\n          `HTTP error! status: ${response.status}. Body: ${text}`\n        )\n      }\n\n      const responseData = await response.json()\n      console.log(\"Response from server:\", responseData)\n      addToast({\n        heading: \"Success\",\n        status: \"success\",\n        body: (\n          <Text>Your addresses have been successfully signed.</Text>\n        ),\n        closeHandler: close,\n        duration: null,\n      })\n    } catch (error) {\n      console.error(\"Error in form submission: \", error)\n      addToast({\n        heading: \"Submission Error\",\n        status: \"error\",\n        body: (\n          <Text>\n            There was an error during the submission process. Please\n            try again.\n          </Text>\n        ),\n        closeHandler: close,\n        duration: null,\n      })\n    }\n  }\n\n  return (\n    <FormProvider {...methods}>\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        <Stack spacing={4}>\n          {registrationMessage && (\n            <Text color=\"white\">{registrationMessage}</Text>\n          )}\n          <InputEthereumAddress disabled={true} />\n          <InputSommelierAddress disabled={true} />\n          <Text color=\"white\">\n            {stakedSommTokens !== null &&\n              `Staked SOMM tokens: ${stakedSommTokens}`}\n          </Text>\n          <BaseButton\n            height=\"69px\"\n            fontSize=\"21px\"\n            type=\"submit\"\n            colorScheme=\"purple\"\n            isDisabled={\n              !isEthereumConnected || wrongNetwork || !isFormFilled\n            }\n          >\n            Sign\n          </BaseButton>\n          <Text color=\"white\">\n            Re-link to update with a new wallet at any time.\n          </Text>\n        </Stack>\n      </form>\n    </FormProvider>\n  )\n}\n\nexport default SnapshotForm\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/UnbondForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[689,692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[689,692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { ModalInput } from \"components/_inputs/ModalInput\"\n\ninterface FormValues {\n  unbondAmount: number\n}\n\nexport const UnbondForm = () => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n  const [data, setData] = useState<any>()\n  const watchUnbondAmount = watch(\"unbondAmount\")\n  const isDisabled =\n    isNaN(watchUnbondAmount) || watchUnbondAmount <= 0\n  const isError = errors.unbondAmount\n  const setMax = () => setValue(\"unbondAmount\", 100000)\n\n  return (\n    <VStack\n      as=\"form\"\n      spacing={8}\n      align=\"stretch\"\n      onSubmit={handleSubmit((data) => setData(data))}\n    >\n      <FormControl isInvalid={isError as boolean | undefined}>\n        <InputGroup display=\"flex\" alignItems=\"center\">\n          <ModalInput\n            type=\"number\"\n            step=\"any\"\n            {...register(\"unbondAmount\", {\n              required: \"Enter amount\",\n              valueAsNumber: true,\n              validate: {\n                positive: (v) =>\n                  v > 0 || \"You must submit a positive amount.\",\n              },\n            })}\n          />\n          <InputRightElement h=\"100%\" mr={3}>\n            <SecondaryButton\n              size=\"sm\"\n              borderRadius={8}\n              onClick={setMax}\n            >\n              Max\n            </SecondaryButton>\n          </InputRightElement>\n        </InputGroup>\n        <FormErrorMessage color=\"orange.base\">\n          <Icon\n            p={0.5}\n            mr={1}\n            color=\"surface.bg\"\n            bg=\"red.base\"\n            borderRadius=\"50%\"\n            as={AiOutlineInfo}\n          />{\" \"}\n          {errors.unbondAmount?.message}\n        </FormErrorMessage>\n      </FormControl>\n      <BaseButton\n        type=\"submit\"\n        isDisabled={isDisabled}\n        isLoading={isSubmitting}\n        fontSize={21}\n        py={6}\n        px={12}\n      >\n        Unbond Liquidity\n      </BaseButton>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/UnstakeForm.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":112,"column":5,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":112,"endColumn":18,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3096,3109],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  InputGroup,\n  Text,\n  InputRightElement,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { SecondaryButton } from \"components/_buttons/SecondaryButton\"\nimport { ModalInput } from \"components/_inputs/ModalInput\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useAccount } from \"wagmi\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { parseUnits } from 'viem'\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { useGeo } from \"context/geoContext\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\ninterface FormValues {\n  withdrawAmount: number\n}\n\ninterface UnstakeFormProps {\n  onClose: () => void\n}\n\nexport const UnstakeForm = ({ onClose }: UnstakeFormProps) => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n\n  const { addToast } = useBrandedToast()\n  const { address } = useAccount()\n\n  const id = useRouter().query.id as string\n  const cellarConfig = cellarDataMap[id].config\n\n  const { cellarSigner } = useCreateContracts(cellarConfig)\n\n  const { refetch } = useUserStrategyData(cellarConfig.cellar.address, cellarConfig.chain.id)\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData } = lpToken\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const watchWithdrawAmount = watch(\"withdrawAmount\")\n  const isDisabled =\n    isNaN(watchWithdrawAmount) || watchWithdrawAmount <= 0\n  const isError = errors.withdrawAmount\n\n  const setMax = () => {\n    const amount = parseFloat(\n      toEther(lpTokenData?.formatted, 18, false)\n    )\n    setValue(\"withdrawAmount\", amount)\n\n    // analytics.track(\"withdraw.max-selected\", {\n    //   account: address,\n    //   amount,\n    // })\n  }\n\n  useEffect(() => {\n    if (watchWithdrawAmount !== null) {\n      analytics.track(\"withdraw.amount-selected\", {\n        account: address,\n        amount: watchWithdrawAmount,\n      })\n    }\n  }, [watchWithdrawAmount, address])\n\n  const geo = useGeo()\n\n  const onSubmit = async ({ withdrawAmount }: FormValues) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    if (withdrawAmount <= 0) return\n\n    if (!address) {\n      addToast({\n        heading: \"Withdraw Position\",\n        status: \"default\",\n        body: <Text>Connect Wallet</Text>,\n        closeHandler: close,\n        duration: null,\n      })\n      return\n    }\n\n    const analyticsData = {\n      account: address,\n      amount: withdrawAmount,\n    }\n\n    // analytics.track(\"withdraw.started\", analyticsData)\n\n    const amtInWei = parseUnits(`${withdrawAmount}`, 18)\n    // @ts-ignore\n    const hash = await cellarSigner?.write.redeem(\n      [amtInWei, address, address],\n      { account: address }\n    )\n\n    function onSuccess() {\n      analytics.track(\"withdraw.succeeded\", analyticsData)\n      onClose() // Close modal after successful withdraw.\n    }\n\n    function onError(error: Error) {\n      analytics.track(\"withdraw.failed\", {\n        ...analyticsData,\n        error: error.name,\n        message: error.message,\n      })\n    }\n\n    await doHandleTransaction({\n      cellarConfig,\n      hash,\n      onSuccess,\n      onError,\n    })\n\n    refetch()\n\n    setValue(\"withdrawAmount\", 0)\n  }\n\n  return (\n    <VStack\n      as=\"form\"\n      spacing={8}\n      align=\"stretch\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <FormControl isInvalid={isError as boolean | undefined}>\n        <InputGroup display=\"flex\" alignItems=\"center\">\n          <ModalInput\n            type=\"number\"\n            step=\"any\"\n            {...register(\"withdrawAmount\", {\n              required: \"Enter amount\",\n              valueAsNumber: true,\n              validate: {\n                positive: (v) =>\n                  v > 0 || \"You must submit a positive amount.\",\n              },\n            })}\n          />\n          <InputRightElement h=\"100%\" mr={3}>\n            <SecondaryButton\n              size=\"sm\"\n              borderRadius={8}\n              onClick={setMax}\n            >\n              Max\n            </SecondaryButton>\n          </InputRightElement>\n        </InputGroup>\n        <FormErrorMessage color=\"energyYellow\">\n          <Icon\n            p={0.5}\n            mr={1}\n            color=\"surface.bg\"\n            bg=\"red.base\"\n            borderRadius=\"50%\"\n            as={AiOutlineInfo}\n          />{\" \"}\n          {errors.withdrawAmount?.message}\n        </FormErrorMessage>\n      </FormControl>\n      <BaseButton\n        type=\"submit\"\n        isDisabled={isDisabled}\n        isLoading={isSubmitting}\n        fontSize={21}\n        py={6}\n        px={12}\n      >\n        Unstake\n      </BaseButton>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/WithdrawForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Link' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":7},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":156,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":156,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[4211,4224],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  VStack,\n  Button,\n  HStack,\n  Input,\n  Spinner,\n  Image,\n  Stack,\n  Text,\n  Link,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n} from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useAccount } from \"wagmi\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { estimateGasLimitWithRetry } from \"utils/estimateGasLimit\"\nimport { useGeo } from \"context/geoContext\"\nimport { waitTime } from \"data/uiConfig\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { fetchCellarRedeemableReserves } from \"queries/get-cellar-redeemable-asssets\"\nimport { fetchCellarPreviewRedeem } from \"queries/get-cellar-preview-redeem\"\nimport { WithdrawQueueButton } from \"components/_buttons/WithdrawQueueButton\"\nimport { parseUnits } from \"viem\"\nimport {\n  handleTransactionError,\n  getTransactionErrorToast,\n  getTransactionErrorAnalytics,\n  type TransactionErrorContext,\n} from \"utils/handleTransactionError\"\n\ninterface FormValues {\n  withdrawAmount: number\n}\n\ninterface WithdrawFormProps {\n  onClose: () => void\n}\n\nexport const WithdrawForm = ({ onClose }: WithdrawFormProps) => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n\n  const { id: _id } = useDepositModalStore()\n\n  const { addToast, close, closeAll } = useBrandedToast()\n  const { address } = useAccount()\n\n  const openWithdrawQueueModal = () =>\n    setIsWithdrawQueueModalOpen(true)\n  const closeWithdrawQueueModal = () => {\n    setIsWithdrawQueueModalOpen(false)\n    onClose()\n  }\n\n  const id = (useRouter().query.id as string) || _id\n  const cellarConfig = cellarDataMap[id].config\n\n  const { refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n\n  const { cellarSigner } = useCreateContracts(cellarConfig)\n\n  const [isWithdrawQueueModalOpen, setIsWithdrawQueueModalOpen] =\n    useState(false)\n\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData, isLoading: isBalanceLoading } = lpToken\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const watchWithdrawAmount = watch(\"withdrawAmount\")\n  const isDisabled =\n    isNaN(watchWithdrawAmount) || watchWithdrawAmount <= 0\n  const isError = errors.withdrawAmount\n\n  const setMax = () => {\n    const amount = parseFloat(\n      toEther(lpTokenData?.formatted, lpTokenData?.decimals, false, 6)\n    )\n    setValue(\"withdrawAmount\", amount)\n  }\n\n  useEffect(() => {\n    if (watchWithdrawAmount !== null) {\n      analytics.track(\"withdraw.amount-selected\", {\n        account: address,\n        amount: watchWithdrawAmount,\n      })\n    }\n  }, [watchWithdrawAmount, address])\n\n  const geo = useGeo()\n  const onSubmit = async ({ withdrawAmount }: FormValues) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    if (withdrawAmount <= 0) return\n\n    if (!address) {\n      addToast({\n        heading: \"Withdraw Position\",\n        status: \"default\",\n        body: <Text>Connect Wallet</Text>,\n        closeHandler: close,\n        duration: null,\n      })\n\n      return\n    }\n\n    const analyticsData = {\n      account: address,\n      amount: withdrawAmount,\n    }\n\n    const amtInWei = parseUnits(\n      `${withdrawAmount}`,\n      cellarConfig.cellar.decimals\n    )\n\n    try {\n      const gasLimitEstimated = await estimateGasLimitWithRetry(\n        cellarSigner?.estimateGas.redeem,\n        cellarSigner?.simulate.redeem,\n        [amtInWei, address, address],\n        330000,\n        address\n      )\n\n      // @ts-ignore\n      const hash = await cellarSigner?.write.redeem(\n        [amtInWei, address, address],\n        {\n          gas: gasLimitEstimated,\n          account: address,\n        }\n      )\n\n      const onSuccess = () => {\n        analytics.track(\"withdraw.succeeded\", analyticsData)\n        onClose() // Close modal after successful withdraw.\n      }\n\n      const onError = (error: Error) => {\n        analytics.track(\"withdraw.failed\", {\n          ...analyticsData,\n          error: error.name,\n          message: error.message,\n        })\n      }\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess,\n        onError,\n      })\n    } catch (e) {\n      const error = e as Error\n\n      // Get Redeemable Assets\n      const redeemableAssets: number = parseInt(\n        await fetchCellarRedeemableReserves(id)\n      )\n\n      // previewRedeem on the shares the user is attempting to withdraw\n      // Only get previewRedeem on 1 share to optimize caching and do relevant math below\n      const previewRedeem: number = parseInt(\n        await fetchCellarPreviewRedeem(\n          id,\n          BigInt(10 ** cellarConfig.cellar.decimals)\n        )\n      )\n      const redeemAmt: number = Math.floor(\n        previewRedeem * watchWithdrawAmount\n      )\n      const redeemingMoreThanAvailible = redeemAmt > redeemableAssets\n\n      /*\n      console.log(\"---\")\n      console.log(\"Reedemable assets: \", redeemableAssets)\n      console.log(\"Withdraw amount: \", watchWithdrawAmount)\n      console.log(\"Preview redeem: \", previewRedeem)\n      console.log(\"Redeeming amt: \", redeemAmt)\n      console.log(\"Redeeming more than availible: \", redeemingMoreThanAvailible)\n      console.log(\"---\")\n      */\n\n      // Check if attempting to withdraw more than availible\n      if (redeemingMoreThanAvailible) {\n        // Open a modal with information about the withdraw queue\n        openWithdrawQueueModal()\n      } else {\n        // Use centralized error handling\n        const errorContext: TransactionErrorContext = {\n          vaultName: cellarDataMap[id].name,\n          transactionType: \"withdraw\",\n          value: withdrawAmount,\n          chainId: cellarConfig.chain.wagmiId,\n        }\n\n        const normalizedError = handleTransactionError(\n          error,\n          errorContext\n        )\n        const toastConfig = getTransactionErrorToast(\n          normalizedError,\n          errorContext\n        )\n        const analyticsData = getTransactionErrorAnalytics(\n          normalizedError,\n          errorContext\n        )\n\n        // Track analytics\n        analytics.track(\"withdraw.rejected\", {\n          ...analyticsData,\n        })\n\n        // Show toast with popup guidance if needed\n        const toastBody = toastConfig.showPopupGuidance ? (\n          <Text>\n            {toastConfig.body}\n            <br />\n            Enable popups for MetaMask and retry.\n          </Text>\n        ) : (\n          <Text>{toastConfig.body}</Text>\n        )\n\n        addToast({\n          heading: toastConfig.heading,\n          body: toastBody,\n          status: toastConfig.status,\n          closeHandler: closeAll,\n        })\n\n        refetch()\n        setValue(\"withdrawAmount\", 0)\n      }\n    }\n  }\n\n  return (\n    <>\n      <Modal\n        isOpen={isWithdrawQueueModalOpen}\n        onClose={closeWithdrawQueueModal}\n      >\n        <ModalOverlay />\n        <ModalContent\n          p={2}\n          w=\"auto\"\n          zIndex={401}\n          borderWidth={1}\n          borderColor=\"purple.dark\"\n          borderRadius={12}\n          bg=\"surface.bg\"\n          fontWeight=\"semibold\"\n          _focus={{\n            outline: \"unset\",\n            outlineOffset: \"unset\",\n            boxShadow: \"unset\",\n          }}\n        >\n          <ModalHeader>Transaction not submitted</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <VStack spacing={8}>\n              <Text textAlign={\"center\"}>\n                You are attempting to withdraw beyond the liquid\n                reserve. Please submit a withdraw request via the\n                withdraw queue.\n              </Text>\n              <WithdrawQueueButton\n                size=\"md\"\n                chain={cellarConfig.chain}\n                buttonLabel=\"Submit Withdraw Request\"\n              />\n            </VStack>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n      <VStack\n        as=\"form\"\n        spacing={8}\n        align=\"stretch\"\n        onSubmit={handleSubmit(onSubmit)}\n        hidden={isWithdrawQueueModalOpen}\n      >\n        <FormControl isInvalid={isError as boolean | undefined}>\n          <Stack spacing={2}>\n            <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n              Enter Amount\n            </Text>\n            <HStack\n              backgroundColor=\"surface.tertiary\"\n              justifyContent=\"space-between\"\n              borderRadius={16}\n              px={4}\n              py={3}\n              height=\"64px\"\n            >\n              <HStack>\n                <Image\n                  width=\"16px\"\n                  height=\"16px\"\n                  src={cellarConfig.lpToken.imagePath}\n                  alt=\"coinlogo\"\n                />\n                <Text fontWeight=\"semibold\">\n                  {lpTokenData?.symbol}\n                </Text>\n              </HStack>\n              <VStack spacing={0} align=\"flex-end\">\n                <Input\n                  id=\"amount\"\n                  variant=\"unstyled\"\n                  pr=\"2\"\n                  type=\"number\"\n                  step=\"any\"\n                  defaultValue=\"0.00\"\n                  placeholder=\"0.00\"\n                  fontSize=\"lg\"\n                  fontWeight={700}\n                  textAlign=\"right\"\n                  {...register(\"withdrawAmount\", {\n                    onChange: (event) => {\n                      let val = event.target.value\n\n                      const decimalPos = val.indexOf(\".\")\n\n                      if (\n                        decimalPos !== -1 &&\n                        val.length - decimalPos - 1 >\n                          cellarConfig.cellar.decimals\n                      ) {\n                        val = val.substring(\n                          0,\n                          decimalPos +\n                            cellarConfig.cellar.decimals +\n                            1\n                        ) // Keep token decimal places as max\n                        event.target.value = val\n                      }\n                    },\n                    required: \"Enter amount\",\n                    valueAsNumber: true,\n                    validate: {\n                      positive: (v) =>\n                        v > 0 || \"You must submit a positive amount.\",\n                      balance: (v) =>\n                        v <=\n                          parseFloat(\n                            toEther(\n                              lpTokenData?.formatted,\n                              lpTokenData?.decimals,\n                              false,\n                              6\n                            )\n                          ) || \"Insufficient balance\",\n                    },\n                  })}\n                />\n                <HStack spacing={0} fontSize=\"10px\">\n                  {isBalanceLoading ? (\n                    <Spinner size=\"xs\" mr=\"2\" />\n                  ) : (\n                    <>\n                      <Text as=\"span\">\n                        Available:{\" \"}\n                        {(lpTokenData &&\n                          toEther(\n                            lpTokenData.value,\n                            lpTokenData.decimals,\n                            false,\n                            6\n                          )) ||\n                          \"--\"}\n                      </Text>\n                      <Button\n                        variant=\"unstyled\"\n                        p={0}\n                        w=\"max-content\"\n                        h=\"max-content\"\n                        textTransform=\"uppercase\"\n                        fontSize=\"inherit\"\n                        fontWeight={600}\n                        onClick={setMax}\n                      >\n                        max\n                      </Button>\n                    </>\n                  )}\n                </HStack>\n              </VStack>\n            </HStack>\n\n            <FormErrorMessage color=\"energyYellow\">\n              <Icon\n                p={0.5}\n                mr={1}\n                color=\"surface.bg\"\n                bg=\"red.base\"\n                borderRadius=\"50%\"\n                as={AiOutlineInfo}\n              />\n              {errors.withdrawAmount?.message}\n            </FormErrorMessage>\n          </Stack>\n        </FormControl>\n        <Stack>\n          <Text\n            fontSize=\"sm\"\n            fontWeight=\"semibold\"\n            color=\"neutral.400\"\n          >\n            Transaction Details\n          </Text>\n          <Stack>\n            <TransactionDetailItem\n              title=\"Vault\"\n              value={<Text>{cellarDataMap[id].name}</Text>}\n            />\n          </Stack>\n        </Stack>\n\n        <BaseButton\n          type=\"submit\"\n          isDisabled={isDisabled}\n          isLoading={isSubmitting}\n          fontSize={21}\n          py={6}\n          px={12}\n        >\n          Submit\n        </BaseButton>\n        {waitTime(cellarConfig) !== null && (\n          <Text textAlign=\"center\">\n            Please wait {waitTime(cellarConfig)} after the deposit to\n            Withdraw\n          </Text>\n        )}\n      </VStack>\n    </>\n  )\n}\n\nconst TransactionDetailItem = ({\n  title,\n  value,\n}: {\n  title: string\n  value: React.ReactNode\n}) => {\n  return (\n    <HStack alignItems=\"flex-start\" justifyContent=\"space-between\">\n      <Text color=\"neutral.300\">{title}</Text>\n      <Stack>{value}</Stack>\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_forms/WithdrawQueueForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormLabel' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormHelperText' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputRightElement' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InputGroup' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InformationIcon' is defined but never used.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WITHDRAW_DEADLINE_HOURS' is defined but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":127,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":11},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":266,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":266,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[7433,7446],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":378,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":393,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11119,11122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11119,11122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":488,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":488,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[13956,13969],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":511,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":511,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[14631,14644],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":554,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":554,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[15955,15968],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\"\nimport {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  FormHelperText,\n  Icon,\n  VStack,\n  Button,\n  HStack,\n  Input,\n  Spinner,\n  Image,\n  Stack,\n  Text,\n  Link,\n  Tooltip,\n  InputRightElement,\n  InputGroup,\n} from \"@chakra-ui/react\"\nimport { FormProvider, useForm } from \"react-hook-form\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\"\nimport { getContract, parseUnits } from \"viem\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useHandleTransaction } from \"hooks/web3\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { estimateGasLimitWithRetry } from \"utils/estimateGasLimit\"\nimport { useGeo } from \"context/geoContext\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { Token } from \"data/tokenConfig\"\nimport { ModalOnlyTokenMenu } from \"components/_menus/ModalMenu\"\nimport { InformationIcon } from \"components/_icons\"\nimport { FAQAccordion } from \"components/_cards/StrategyBreakdownCard/FAQAccordion\"\nimport withdrawQueueV0821 from \"src/abi/withdraw-queue-v0.8.21.json\"\nimport { fetchCellarPreviewRedeem } from \"queries/get-cellar-preview-redeem\"\nimport { WITHDRAW_DEADLINE_HOURS } from \"src/constants/withdraw\"\nimport { getAddress } from \"viem\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\nimport { MaxUint256 } from \"utils/bigIntHelpers\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { useBoringQueueWithdrawals } from \"data/hooks/useBoringQueueWithdrawals\"\nimport { useWithdrawRequestStatus } from \"data/hooks/useWithdrawRequestStatus\"\nimport { logTxDebug } from \"utils/txDebug\"\n\ninterface FormValues {\n  withdrawAmount: number\n}\n\ninterface WithdrawQueueFormProps {\n  onClose: () => void\n  onSuccessfulWithdraw?: () => void\n}\n\nconst DEADLINE_HOURS = 288\nconst SHARE_PRICE_DISCOUNT_PERCENT = 0.25\n\nexport const WithdrawQueueForm = ({\n  onClose,\n  onSuccessfulWithdraw,\n}: WithdrawQueueFormProps) => {\n  const {\n    register,\n    watch,\n    handleSubmit,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<FormValues>()\n\n  const { id: _id } = useDepositModalStore()\n\n  const { addToast, update, close, closeAll } = useBrandedToast()\n  const { address } = useAccount()\n\n  const id = (useRouter().query.id as string) || _id\n  const cellarConfig = cellarDataMap[id].config\n\n  const { refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n\n  const { data: boringQueueWithdrawals } = useBoringQueueWithdrawals(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id,\n    { enabled: !!cellarConfig.boringQueue }\n  )\n\n  const { data: walletClient } = useWalletClient()\n  const publicClient = usePublicClient()\n\n  const { boringQueue } = useCreateContracts(cellarConfig)\n\n  const cellarContract = (() => {\n    if (!publicClient) return\n    return getContract({\n      address: cellarConfig.cellar.address as `0x${string}`,\n      abi: cellarConfig.cellar.abi,\n      client: {\n        public: publicClient,\n        wallet: walletClient,\n      },\n    })\n  })()\n\n  const withdrawQueueContract = (() => {\n    if (!publicClient) return\n    return (\n      boringQueue ??\n      getContract({\n        address: cellarConfig.chain\n          .withdrawQueueAddress as `0x${string}`,\n        abi: withdrawQueueV0821,\n        client: {\n          public: publicClient,\n          wallet: walletClient,\n        },\n      })\n    )\n  })()\n\n  const [_, wait] = useWaitForTransaction({\n    skip: true,\n  })\n\n  const { lpToken } = useUserBalance(cellarConfig)\n  const { data: lpTokenData, isLoading: isBalanceLoading } = lpToken\n  let strategyBaseAsset: Token = cellarConfig.baseAsset\n\n  const modalFormMethods = useForm<FormValues>({\n    defaultValues: {},\n  })\n\n  const [selectedToken, setSelectedToken] =\n    useState<Token>(strategyBaseAsset)\n\n  const [isWithdrawAllowed, setIsWithdrawAllowed] = useState<boolean | null>(\n    null\n  )\n\n  // Preflight: check if queue allows withdraws for selected asset (boring queue)\n  useEffect(() => {\n    let cancelled = false\n    const run = async () => {\n      try {\n        if (!boringQueue || !selectedToken?.address) {\n          setIsWithdrawAllowed(null)\n          return\n        }\n        const res = await boringQueue.read.withdrawAssets([\n          selectedToken.address,\n        ])\n        const allow = Array.isArray(res) ? Boolean(res[0]) : Boolean(res)\n        if (!cancelled) setIsWithdrawAllowed(allow)\n        logTxDebug(\"withdraw.preflight\", {\n          assetOut: selectedToken.address,\n          allow,\n        })\n      } catch (e) {\n        if (!cancelled) setIsWithdrawAllowed(null)\n      }\n    }\n    run()\n    return () => {\n      cancelled = true\n    }\n  }, [boringQueue, selectedToken])\n\n  function trackedSetSelectedToken(value: Token) {\n    if (value && value !== selectedToken) {\n      // analytics.track(\"deposit.stable-selected\", {\n      //   ...baseAnalytics,\n      //   stable: value.symbol,\n      // })\n    }\n\n    setSelectedToken(value)\n  }\n\n  const { doHandleTransaction } = useHandleTransaction()\n\n  const watchWithdrawAmount = watch(\"withdrawAmount\")\n\n  const isDisabled =\n    isNaN(watchWithdrawAmount) || watchWithdrawAmount <= 0\n\n  const isActiveWithdrawRequest =\n    useWithdrawRequestStatus(cellarConfig)\n\n  const setMax = () => {\n    const amount = parseFloat(\n      toEther(lpTokenData?.formatted, lpTokenData?.decimals, false, 6)\n    )\n    setValue(\"withdrawAmount\", amount)\n  }\n\n  const geo = useGeo()\n  const onSubmit = async ({ withdrawAmount }: FormValues) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    if (withdrawAmount <= 0) return\n\n    if (!address) {\n      addToast({\n        heading: \"Withdraw Queue\",\n        status: \"default\",\n        body: <Text>Connect Wallet</Text>,\n        closeHandler: close,\n        duration: null,\n      })\n\n      return\n    }\n\n    const withdrawAmtInBaseDenom = parseUnits(\n      `${withdrawAmount}`,\n      cellarConfig.cellar.decimals\n    )\n\n    // Check if user has sufficient balance\n    if (!lpTokenData || lpTokenData.value < withdrawAmtInBaseDenom) {\n      addToast({\n        heading: \"Insufficient Balance\",\n        status: \"error\",\n        body: (\n          <Text>\n            You don&apos;t have enough{\" \"}\n            {lpTokenData?.symbol || \"tokens\"} to withdraw this amount.\n            <br />\n            Available: {lpTokenData?.formatted || \"0\"}\n            <br />\n            Requested: {withdrawAmount}\n          </Text>\n        ),\n        closeHandler: closeAll,\n      })\n      return\n    }\n\n    const allowance = (await cellarContract?.read.allowance([\n      address!,\n      getAddress(\n        cellarConfig.boringQueue\n          ? cellarConfig.boringQueue.address\n          : cellarConfig.chain.withdrawQueueAddress\n      ),\n    ])) as bigint\n\n    let needsApproval\n    try {\n      needsApproval = (allowance as bigint) < withdrawAmtInBaseDenom\n    } catch (e) {\n      const error = e as Error\n      console.error(\"Invalid Input: \", error.message)\n      return\n    }\n\n    if (needsApproval) {\n      try {\n        // @ts-ignore\n        const hash = await cellarContract?.write.approve(\n          [\n            getAddress(\n              cellarConfig.boringQueue\n                ? cellarConfig.boringQueue.address\n                : cellarConfig.chain.withdrawQueueAddress\n            ),\n            MaxUint256,\n          ],\n          { account: address }\n        )\n        addToast({\n          heading: \"ERC20 Approval\",\n          status: \"default\",\n          body: <Text>Approving ERC20</Text>,\n          isLoading: true,\n          closeHandler: close,\n          duration: null,\n        })\n        const waitForApproval = wait({ confirmations: 1, hash })\n        const result = await waitForApproval\n        if (result?.data?.transactionHash) {\n          // analytics.track(\"deposit.approval-granted\", {\n          //   ...baseAnalytics,\n          //   stable: tokenSymbol,\n          //   value: depositAmount,\n          // })\n\n          update({\n            heading: \"ERC20 Approval\",\n            body: <Text>ERC20 Approved</Text>,\n            status: \"success\",\n            closeHandler: closeAll,\n          })\n        } else if (result?.error) {\n          // analytics.track(\"deposit.approval-failed\", {\n          //   ...baseAnalytics,\n          //   stable: tokenSymbol,\n          //   value: depositAmount,\n          // })\n\n          update({\n            heading: \"ERC20 Approval\",\n            body: <Text>Approval Failed</Text>,\n            status: \"error\",\n            closeHandler: closeAll,\n          })\n        }\n      } catch (e) {\n        const error = e as Error\n        console.error(error.message)\n        // analytics.track(\"deposit.approval-cancelled\", {\n        //   ...baseAnalytics,\n        //   stable: tokenSymbol,\n        //   value: depositAmount,\n        // })\n\n        addToast({\n          heading: \"ERC20 Approval\",\n          body: <Text>Approval Cancelled</Text>,\n          status: \"error\",\n          closeHandler: closeAll,\n        })\n      }\n    }\n\n    try {\n      // Add debugging information\n      console.log(\"Withdraw attempt details:\", {\n        selectedToken: selectedToken?.symbol,\n        withdrawAmount: withdrawAmount,\n        withdrawAmtInBaseDenom: withdrawAmtInBaseDenom.toString(),\n        lpTokenBalance: lpTokenData?.formatted,\n        lpTokenValue: lpTokenData?.value?.toString(),\n        isActiveWithdrawRequest,\n        boringQueue: !!boringQueue,\n        cellarAddress: cellarConfig.cellar.address,\n      })\n\n      // Guard: if boring queue and asset disabled, show UI and stop\n      if (boringQueue && isWithdrawAllowed === false) {\n        addToast({\n          heading: \"Withdraw Queue\",\n          status: \"info\",\n          body: (\n            <Text>\n              Withdraw queue is currently not available for {selectedToken.symbol}.\n              Please choose a different asset or try again later.\n            </Text>\n          ),\n          closeHandler: closeAll,\n        })\n        logTxDebug(\"withdraw.blocked_asset\", {\n          assetOut: selectedToken.address,\n        })\n        return\n      }\n\n      let hash = await doWithdrawTx(\n        selectedToken,\n        withdrawAmtInBaseDenom\n      )\n\n      const onSuccess = () => {\n        if (onSuccessfulWithdraw) {\n          onSuccessfulWithdraw()\n        }\n\n        onClose() // Close modal after successful withdraw.\n      }\n\n      const onError = (error: Error) => {\n        // Can track here if we want\n      }\n\n      await doHandleTransaction({\n        cellarConfig,\n        hash,\n        onSuccess,\n        onError,\n      })\n    } catch (e) {\n      const error = e as Error\n      console.error(error)\n\n      if (error.message === \"GAS_LIMIT_ERROR\") {\n        const causeMsg = (error as any)?.cause?.message || \"\"\n        if (causeMsg.includes(\"BoringOnChainQueue__WithdrawsNotAllowedForAsset\")) {\n          addToast({\n            heading: \"Withdraw Queue\",\n            body: (\n              <Text>\n                Withdraw queue is currently not available for {selectedToken.symbol}.\n                Please choose a different asset or try again later.\n              </Text>\n            ),\n            status: \"info\",\n            closeHandler: closeAll,\n          })\n          logTxDebug(\"withdraw.error_not_allowed\", {\n            assetOut: selectedToken.address,\n          })\n          return\n        }\n        addToast({\n          heading: \"Transaction not submitted\",\n          body: (\n            <Text>\n              Your transaction has failed, if it does not work after\n              waiting some time and retrying please send a message in\n              our{\" \"}\n              {\n                <Link\n                  href=\"https://discord.com/channels/814266181267619840/814279703622844426\"\n                  isExternal\n                  textDecoration=\"underline\"\n                >\n                  Discord Support channel\n                </Link>\n              }{\" \"}\n              tagging a member of the front end team.\n            </Text>\n          ),\n          status: \"info\",\n          closeHandler: closeAll,\n        })\n      } else {\n        console.error(error)\n        addToast({\n          heading: \"Withdraw Queue\",\n          body: <Text>Withdraw Queue Order Cancelled</Text>,\n          status: \"error\",\n          closeHandler: closeAll,\n        })\n      }\n\n      refetch()\n    }\n  }\n\n  const doWithdrawTx = async (\n    selectedToken: Token,\n    withdrawAmtInBaseDenom: bigint\n  ) => {\n    const currentTime = Math.floor(Date.now() / 1000)\n    const deadlineSeconds =\n      Math.floor(DEADLINE_HOURS * 60 * 60) + currentTime\n\n    let hash\n\n    if (boringQueue) {\n      const discount = BigInt(\n        Math.floor(SHARE_PRICE_DISCOUNT_PERCENT * 10000)\n      )\n\n      const deadlineSeconds = BigInt(DEADLINE_HOURS * 60 * 60)\n\n      if (isActiveWithdrawRequest && boringQueueWithdrawals) {\n        // Replace existing BoringQueuerequest\n        const request =\n          boringQueueWithdrawals.open_requests[0].metadata\n\n        const oldRequestTouple = [\n          request.nonce,\n          address,\n          request.assetOut,\n          request.amountOfShares,\n          request.amountOfAssets,\n          request.creationTime,\n          request.secondsToMaturity,\n          request.secondsToDeadline,\n        ]\n\n        const gasLimitEstimated = await estimateGasLimitWithRetry(\n          boringQueue.estimateGas.replaceOnChainWithdraw,\n          boringQueue.simulate.replaceOnChainWithdraw,\n          [oldRequestTouple, discount, deadlineSeconds],\n          330000,\n          address\n        )\n\n        // @ts-ignore\n        hash = await boringQueue?.write.replaceOnChainWithdraw(\n          [oldRequestTouple, discount, deadlineSeconds],\n          {\n            gas: gasLimitEstimated,\n            account: address,\n          }\n        )\n      } else {\n        // Create new BoringQueue request\n        const gasLimitEstimated = await estimateGasLimitWithRetry(\n          boringQueue.estimateGas.requestOnChainWithdraw,\n          boringQueue.simulate.requestOnChainWithdraw,\n          [\n            selectedToken?.address,\n            withdrawAmtInBaseDenom,\n            discount,\n            deadlineSeconds,\n          ],\n          330000,\n          address\n        )\n\n        // @ts-ignore\n        hash = await boringQueue?.write.requestOnChainWithdraw(\n          [\n            selectedToken?.address,\n            withdrawAmtInBaseDenom,\n            discount,\n            deadlineSeconds,\n          ],\n          {\n            gas: gasLimitEstimated,\n            account: address,\n          }\n        )\n      }\n    } else {\n      // Create or replace WithdrawQueue request\n      const previewRedeem = parseInt(\n        await fetchCellarPreviewRedeem(\n          id,\n          BigInt(10 ** cellarConfig.cellar.decimals)\n        )\n      )\n\n      const sharePriceStandardized =\n        previewRedeem / 10 ** cellarConfig.baseAsset.decimals\n      const sharePriceWithDiscount = sharePriceStandardized\n      const sharePriceWithDiscountInBaseDenom = Math.floor(\n        sharePriceWithDiscount * 10 ** cellarConfig.baseAsset.decimals\n      )\n\n      const withdrawTouple = [\n        BigInt(deadlineSeconds),\n        BigInt(sharePriceWithDiscountInBaseDenom),\n        withdrawAmtInBaseDenom,\n        false,\n      ]\n      const gasLimitEstimated = await estimateGasLimitWithRetry(\n        withdrawQueueContract?.estimateGas.updateWithdrawRequest,\n        withdrawQueueContract?.simulate.updateWithdrawRequest,\n        [cellarConfig.cellar.address, withdrawTouple],\n        330000,\n        address\n      )\n      // @ts-ignore\n      hash = await withdrawQueueContract?.write.updateWithdrawRequest(\n        [cellarConfig.cellar.address, withdrawTouple],\n        {\n          gas: gasLimitEstimated,\n          account: address,\n        }\n      )\n    }\n\n    return hash\n  }\n\n  return (\n    <VStack\n      as=\"form\"\n      spacing={8}\n      align=\"stretch\"\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <FormProvider {...modalFormMethods}>\n        <FormControl isInvalid={!!errors.withdrawAmount}>\n          {isActiveWithdrawRequest && (\n            <>\n              <HStack\n                p={4}\n                mb={boringQueue ? 0 : 12}\n                spacing={4}\n                align=\"flex-start\"\n                backgroundColor=\"purple.dark\"\n                border=\"2px solid\"\n                borderRadius={16}\n                borderColor=\"purple.base\"\n              >\n                <Text\n                  color=\"white\"\n                  fontSize=\"s\"\n                  textAlign={\"center\"}\n                  fontWeight={\"bold\"}\n                >\n                  You currently have a withdraw request pending in the\n                  queue, submitting a new withdraw request will\n                  replace your current one.\n                </Text>\n              </HStack>\n              <br />\n            </>\n          )}\n          {isActiveWithdrawRequest && boringQueue && (\n            <>\n              <HStack\n                p={4}\n                mb={12}\n                spacing={4}\n                align=\"flex-start\"\n                backgroundColor=\"purple.dark\"\n                border=\"2px solid\"\n                borderRadius={16}\n                borderColor=\"purple.base\"\n              >\n                <Text\n                  color=\"white\"\n                  fontSize=\"s\"\n                  textAlign={\"center\"}\n                  fontWeight={\"bold\"}\n                >\n                  When replacing a BoringQueue request, only the\n                  deadline is updated.\n                </Text>\n              </HStack>\n              <br />\n            </>\n          )}\n          <Stack spacing={5}>\n            <Text fontWeight=\"bold\" color=\"neutral.400\" fontSize=\"xs\">\n              Enter Shares\n            </Text>\n            <HStack\n              backgroundColor=\"surface.tertiary\"\n              justifyContent=\"space-between\"\n              borderRadius={16}\n              px={4}\n              py={3}\n              height=\"64px\"\n            >\n              <HStack>\n                <Image\n                  width=\"16px\"\n                  height=\"16px\"\n                  src={cellarConfig.lpToken.imagePath}\n                  alt=\"coinlogo\"\n                />\n                <Text fontWeight=\"semibold\">\n                  {lpTokenData?.symbol}\n                </Text>\n              </HStack>\n              <VStack spacing={0} align=\"flex-end\">\n                <Input\n                  id=\"amount\"\n                  variant=\"unstyled\"\n                  pr=\"2\"\n                  type=\"number\"\n                  step=\"any\"\n                  defaultValue=\"0.00\"\n                  placeholder=\"0.00\"\n                  fontSize=\"lg\"\n                  fontWeight={700}\n                  disabled={isActiveWithdrawRequest && !!boringQueue}\n                  textAlign=\"right\"\n                  {...register(\"withdrawAmount\", {\n                    onChange: (event) => {\n                      let val = event.target.value\n\n                      const decimalPos = val.indexOf(\".\")\n\n                      if (\n                        decimalPos !== -1 &&\n                        val.length - decimalPos - 1 >\n                          cellarConfig.cellar.decimals\n                      ) {\n                        val = val.substring(\n                          0,\n                          decimalPos +\n                            cellarConfig.cellar.decimals +\n                            1\n                        ) // Keep token decimal places as max\n                        event.target.value = val\n                      }\n                    },\n                    required: \"Enter amount\",\n                    valueAsNumber: true,\n                    validate: {\n                      positive: (v) =>\n                        v > 0 || \"You must submit a positive amount.\",\n                      balance: (v) =>\n                        v <=\n                          parseFloat(\n                            toEther(\n                              lpTokenData?.formatted,\n                              lpTokenData?.decimals,\n                              false,\n                              6\n                            )\n                          ) || \"Insufficient balance\",\n                    },\n                  })}\n                />\n                <HStack spacing={0} fontSize=\"10px\">\n                  {isBalanceLoading ? (\n                    <Spinner size=\"xs\" mr=\"2\" />\n                  ) : (\n                    <>\n                      <Text as=\"span\">\n                        Available:{\" \"}\n                        {(lpTokenData &&\n                          toEther(\n                            lpTokenData.value,\n                            lpTokenData.decimals,\n                            false,\n                            6\n                          )) ||\n                          \"--\"}\n                      </Text>\n                      <Button\n                        variant=\"unstyled\"\n                        p={0}\n                        w=\"max-content\"\n                        h=\"max-content\"\n                        textTransform=\"uppercase\"\n                        fontSize=\"inherit\"\n                        fontWeight={600}\n                        onClick={setMax}\n                        disabled={\n                          isActiveWithdrawRequest && !!boringQueue\n                        }\n                      >\n                        max\n                      </Button>\n                    </>\n                  )}\n                </HStack>\n              </VStack>\n            </HStack>\n\n            <FormErrorMessage color=\"energyYellow\">\n              <Icon\n                p={0.5}\n                mr={1}\n                color=\"surface.bg\"\n                bg=\"red.base\"\n                borderRadius=\"50%\"\n                as={AiOutlineInfo}\n              />\n              {errors.withdrawAmount?.message}\n            </FormErrorMessage>\n            <HStack justify=\"space-between\">\n              <Text as=\"span\">Asset Out</Text>\n              {\n                <ModalOnlyTokenMenu\n                  depositTokens={\n                    cellarConfig.boringVault\n                      ? Object.keys(\n                          cellarDataMap[id].config\n                            .withdrawTokenConfig!\n                        )\n                      : [strategyBaseAsset.symbol]\n                  }\n                  activeAsset={strategyBaseAsset.address}\n                  setSelectedToken={trackedSetSelectedToken}\n                  isDisabled={\n                    isActiveWithdrawRequest && !!boringQueue\n                  }\n                />\n              }\n            </HStack>\n          </Stack>\n        </FormControl>\n        <Stack spacing={5}>\n          <Text\n            fontSize=\"xs\"\n            fontWeight=\"semibold\"\n            color=\"neutral.400\"\n          >\n            Transaction Details\n          </Text>\n          <Stack spacing={2.5}>\n            <TransactionDetailItem\n              title=\"Vault\"\n              value={<Text>{cellarDataMap[id].name}</Text>}\n            />\n          </Stack>\n        </Stack>\n      </FormProvider>\n\n      <BaseButton\n        type=\"submit\"\n        isDisabled={\n          isDisabled || (boringQueue ? isWithdrawAllowed === false : false)\n        }\n        isLoading={isSubmitting}\n        fontSize={21}\n        py={6}\n        px={12}\n      >\n        Submit\n      </BaseButton>\n      {boringQueue && isWithdrawAllowed === false && (\n        <Text color=\"yellow.300\" fontSize=\"sm\">\n          Withdraw queue is currently not available for {selectedToken.symbol}.\n        </Text>\n      )}\n      {/*waitTime(cellarConfig) !== null && (\n        <Text textAlign=\"center\">\n          Please wait {waitTime(cellarConfig)} after the deposit to\n          enter the Withdraw Queue.\n        </Text>\n      )*/}\n      {!cellarConfig.boringVault && (\n        <FAQAccordion\n          data={[\n            {\n              question: \"What is the Withdraw Queue?\",\n              answer: `The Withdraw Queue is a way for users to submit a withdraw request if they are trying to withdraw more than the liquid reserve from a strategy. Once the request is submitted, it will be eventually fulfilled on behalf of the user and the withdrawn funds will appear automatically in the user's wallet (assuming the requests is fulfilled within the time constraint specified by the user). A withdraw request through the queue also has a much lower gas cost for users compared to instant withdrawals.`,\n            },\n          ]}\n        />\n      )}\n    </VStack>\n  )\n}\n\nconst TransactionDetailItem = ({\n  title,\n  value,\n}: {\n  title: string\n  value: React.ReactNode\n}) => {\n  return (\n    <HStack alignItems=\"flex-start\" justifyContent=\"space-between\">\n      <Text color=\"neutral.300\">{title}</Text>\n      <Stack>{value}</Stack>\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/AaveIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ActiveAssetIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowDownFillIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowDownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowLeftIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowRightIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowUpFillIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ArrowUpIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/BlockIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/CellarGradientIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/CellarIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/CheckCircleIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/CheckIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ChevronDownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ChevronRightIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ChevronUpIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ClearGateIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ControlsIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/CountdownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/DeleteCircleIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/DeleteIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/EETHIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ETHXIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ErrorIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ExpandIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/ExternalLinkIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/GHOIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/GreenCheckCircleIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/HamburgerIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/InformationIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LoadingIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LogoIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LogoTextIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LogoutCircleIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LogoutIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/LpTokenIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/MinusIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/MoneyWalletIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/OverviewGradientIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/OverviewIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/PatacheIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/PearlIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/PlusIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/SettingsSliderIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/SevenSeasIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/SortingArrowIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/SuccessIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/SwapIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/TimerIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/TriangleDownIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/TriangleUpIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/UsdcIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/WarningIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/WstethIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_icons/test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_inputs/ModalInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_layout/CardDivider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_layout/LayoutWithSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'inView' is assigned a value but never used.","line":15,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Box, Container, Flex } from \"@chakra-ui/react\"\nimport Footer from \"components/Footer\"\nimport { Nav } from \"components/Nav\"\nimport { Sidebar } from \"components/_sidebar\"\nimport { FC, ReactNode, useEffect, useRef, useState } from \"react\"\nimport { useAccount } from \"wagmi\"\nimport { useInView } from \"react-intersection-observer\"\n\nexport const LayoutWithSidebar: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { isConnected: connected } = useAccount()\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const { ref, inView } = useInView({\n    threshold: 0,\n  })\n\n  // using local state to avoid Next.js errors\n  const [isConnected, setConnected] = useState(false)\n  useEffect(() => {\n    setConnected(connected)\n  }, [connected])\n\n  // Temporarily disabled – only needed once multiple vault groups exist\n  const hasSidebar = false\n\n  return (\n    <Box display=\"block\">\n      <Flex bg=\"#1A1A23\" flexDir=\"column\" position=\"relative\">\n        <Nav />\n        <Container\n          as=\"main\"\n          flex={1}\n          pt={{ base: \"120px\", lg: \"140px\" }}\n          maxW=\"2000px\"\n          px={{ base: \"8px\", md: \"16px\", lg: \"30px\" }}\n          flexDir=\"row\"\n          justifyContent=\"center\"\n        >\n          <Flex\n            flexDir={{ base: \"column-reverse\", xl: \"row\" }}\n            gap={{ base: \"44px\", lg: 8 }}\n            pb={8}\n          >\n            <Box\n              w={{ base: \"full\", xl: hasSidebar ? \"900px\" : \"full\" }}\n              flex={hasSidebar ? 7 : 1}\n              ref={containerRef}\n            >\n              {children}\n            </Box>\n            {hasSidebar && (\n              <Box minW={{ base: \"full\", lg: \"300px\" }} flex={3}>\n                <Sidebar />\n              </Box>\n            )}\n          </Flex>\n        </Container>\n      </Flex>\n      <Box ref={ref}>\n        <Footer />\n      </Box>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_layout/Section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_layout/TimeFrameButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_menus/ModalMenu/Menu.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[992,995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[992,995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'selectedToken'. Either include it or remove the dependency array.","line":117,"column":6,"nodeType":"ArrayExpression","endLine":117,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [rawDepositAmount, selectedToken]","fix":{"range":[3083,3101],"text":"[rawDepositAmount, selectedToken]"}}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":151,"column":10,"nodeType":"Block","messageId":"tsIgnoreInsteadOfExpectError","endLine":151,"endColumn":158,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[3917,4065],"text":"/* @ts-expect-error using string where number is expected. This is to ensure popover is always placed at the top of button, no matter the height value. */"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Button,\n  HStack,\n  VStack,\n  Icon,\n  Image,\n  Input,\n  Menu as ChMenu,\n  MenuButton,\n  MenuItemOption,\n  MenuList,\n  MenuOptionGroup,\n  Text,\n  useTheme,\n  useSize,\n} from \"@chakra-ui/react\"\nimport { useRef, useState, useEffect, ChangeEvent } from \"react\"\nimport { FaChevronDown } from \"react-icons/fa\"\nimport { getTokenConfig, Token } from \"data/tokenConfig\"\nimport { useFormContext } from \"react-hook-form\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { ModalMenuProps } from \".\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { fetchCoingeckoPrice } from \"queries/get-coingecko-price\"\nimport { depositAssetDefaultValue } from \"data/uiConfig\"\nimport {\n  ActiveAssetIcon,\n  CellarGradientIcon,\n} from \"components/_icons\"\n\nexport interface MenuProps\n  extends Omit<ModalMenuProps, \"setSelectedToken\"> {\n  value: Token\n  onChange: (...events: any[]) => void\n}\n\nexport const Menu = ({\n  depositTokens,\n  activeAsset,\n  selectedTokenBalance,\n  value,\n  onChange,\n  isDisabled,\n}: MenuProps) => {\n  const { colors } = useTheme()\n  const menuRef = useRef(null)\n  const { width } = useSize(menuRef) ?? { width: 0 }\n  const { register, setValue, clearErrors, watch } = useFormContext()\n  const availableBalance = `${toEther(\n    selectedTokenBalance?.value,\n    selectedTokenBalance?.decimals,\n    false,\n    6\n  )}`\n  const { id: _id } = useDepositModalStore()\n  const id = (useRouter().query.id as string) || _id\n  const cellarData = cellarDataMap[id]\n  const cellarConfig = cellarData.config\n\n  const rawDepositAmount = watch(\"depositAmount\")\n  const depositTokenConfig = getTokenConfig(\n    depositTokens,\n    cellarConfig.chain.id\n  ) as Token[]\n\n  // Get the default deposit asset for this cellar\n  const defaultAssetSymbol = depositAssetDefaultValue(cellarConfig)\n  const defaultToken =\n    depositTokenConfig.find(\n      (token) => token.symbol === defaultAssetSymbol\n    ) || depositTokenConfig[0]\n\n  const [selectedToken, setSelectedToken] = useState<\n    Token | undefined\n  >(defaultToken)\n\n  const setMax = () => {\n    // analytics.track(\"deposit.max-selected\", {\n    //   value: selectedTokenBalance?.value?.toString(),\n    // })\n\n    return setValue(\n      \"depositAmount\",\n      parseFloat(\n        toEther(\n          selectedTokenBalance?.value,\n          selectedTokenBalance?.decimals,\n          false,\n          6\n        )\n      )\n    )\n  }\n  const [displayedBalance, setDisplayedBalance] = useState(0)\n  useEffect(() => {\n    const fetchAndUpdateBalance = async () => {\n      if (rawDepositAmount) {\n        try {\n          const price = await fetchCoingeckoPrice(\n            selectedToken!,\n            \"usd\"\n          )\n          const newBalance = rawDepositAmount * Number(price || 0)\n          setDisplayedBalance(newBalance)\n        } catch (error) {\n          console.error(\"Error fetching price:\", error)\n        }\n      } else {\n        setDisplayedBalance(0)\n      }\n    }\n\n    fetchAndUpdateBalance()\n  }, [rawDepositAmount])\n\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  // Function to handle search input changes\n  const handleSearchChange = (\n    event: ChangeEvent<HTMLInputElement>\n  ) => {\n    setSearchTerm(event.target.value.toLowerCase())\n  }\n\n  // Filter tokens based on search term\n  const filteredTokens = depositTokenConfig.filter((token) =>\n    token.symbol.toLowerCase().includes(searchTerm)\n  )\n\n  return (\n    <HStack\n      ref={menuRef}\n      p={4}\n      justifyContent=\"space-between\"\n      w=\"100%\"\n      bg=\"surface.secondary\"\n      border=\"none\"\n      borderRadius={16}\n      appearance=\"none\"\n      textAlign=\"start\"\n      _first={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <VStack w=\"100%\" spacing={0} align=\"flex-start\">\n        {/* @ts-ignore using string where number is expected. This is to ensure popover is always placed at the top of button, no matter the height value. */}\n        <ChMenu offset={[\"10%\", \"100%\"]} placement=\"bottom\">\n          <MenuButton\n            as={Box}\n            border=\"none\"\n            borderRadius={16}\n            appearance=\"none\"\n            fontSize=\"lg\"\n            fontWeight={700}\n          >\n            <HStack>\n              {value ? (\n                <HStack spacing={2}>\n                  <Image\n                    boxSize={6}\n                    src={value.src}\n                    alt={value.alt}\n                    style={{ borderRadius: \"50%\" }}\n                  />\n                  <span>{value.symbol}</span>\n                </HStack>\n              ) : (\n                <Text as=\"span\">Select Token</Text>\n              )}\n              {depositTokens.length > 1 && (\n                <Icon as={FaChevronDown} />\n              )}\n            </HStack>\n          </MenuButton>\n          <MenuList\n            bg=\"surface.bg\"\n            borderColor=\"purple.base\"\n            borderRadius={16}\n            zIndex=\"overlay\"\n            boxShadow={`0 2px 24px 0 ${colors.surface.tertiary}`}\n            w={width}\n            maxH=\"30em\"\n            overflowY=\"auto\"\n            scrollBehavior=\"smooth\"\n          >\n            <Box pt={4} pb={2} pl={10} width=\"90%\">\n              <Input\n                placeholder=\"Select Deposit Asset\"\n                onChange={handleSearchChange}\n                value={searchTerm}\n                isDisabled={isDisabled ?? false}\n              />\n            </Box>\n            <MenuOptionGroup\n              defaultValue={depositTokenConfig[0].symbol}\n              type=\"radio\"\n            >\n              {\" \"}\n              {/*\n              <Box pt={4} pb={2} pl={10}>\n                <Text color=\"neutral.400\">Select deposit asset</Text>\n              </Box>*/}\n              {filteredTokens.map((token) => {\n                const { address, src, alt, symbol } = token\n                const isActiveAsset =\n                  token.address.toUpperCase() ===\n                  activeAsset?.toUpperCase()\n\n                const isCellerDepositAsset =\n                  (cellarData.depositTokens.list.includes(\n                    token.symbol.toUpperCase()\n                  ) ||\n                    cellarData.depositTokens.list.includes(\n                      token.symbol\n                    )) &&\n                  !isActiveAsset\n\n                // Set default selected token to active asset.\n                if (isActiveAsset && !value) onChange(token)\n\n                return (\n                  <MenuItemOption\n                    key={address}\n                    value={symbol}\n                    borderRadius={8}\n                    _hover={{ bg: \"rgba(96, 80, 155, 0.4)\" }}\n                    isDisabled={isDisabled ?? false}\n                    onClick={() => {\n                      clearErrors()\n                      onChange(token)\n                      setSelectedToken(token)\n                      setDisplayedBalance(0)\n                      setValue(\"depositAmount\", 0)\n                    }}\n                  >\n                    <HStack justify=\"space-between\">\n                      <HStack width=\"100%\">\n                        <Image\n                          boxSize={6}\n                          src={src}\n                          alt={alt}\n                          style={{ borderRadius: \"50%\" }}\n                        />\n                        <span>{symbol}</span>\n                        {isActiveAsset && (\n                          <HStack\n                            justifyItems={\"right\"}\n                            width=\"100%\"\n                            justifyContent=\"flex-end\"\n                            alignItems=\"flex-start\"\n                            p={3}\n                          >\n                            <ActiveAssetIcon\n                              boxSize={5}\n                              alignSelf=\"center\"\n                            />\n                            <Text fontSize=\"xs\" fontWeight={600}>\n                              Accounting Asset\n                            </Text>\n                          </HStack>\n                        )}\n                        {isCellerDepositAsset && (\n                          <HStack\n                            justifyItems={\"right\"}\n                            width=\"100%\"\n                            justifyContent=\"flex-end\"\n                            alignItems=\"flex-start\"\n                            p={3}\n                          >\n                            <CellarGradientIcon\n                              boxSize={3}\n                              alignSelf=\"center\"\n                            />\n                            <Text fontSize=\"xs\" fontWeight={600}>\n                              Alt Deposit Asset\n                            </Text>\n                          </HStack>\n                        )}\n                      </HStack>\n                    </HStack>\n                  </MenuItemOption>\n                )\n              })}\n            </MenuOptionGroup>\n          </MenuList>\n        </ChMenu>\n        <HStack spacing={0} fontSize=\"10px\" paddingTop=\"0.75em\">\n          <Text as=\"span\">Available: {availableBalance}</Text>\n          <Button\n            variant=\"unstyled\"\n            p={0}\n            w=\"max-content\"\n            h=\"max-content\"\n            textTransform=\"uppercase\"\n            onClick={setMax}\n            fontSize=\"inherit\"\n            fontWeight={600}\n            isDisabled={isDisabled ?? false}\n          >\n            max\n          </Button>\n        </HStack>\n      </VStack>\n      <VStack spacing={0} align=\"flex-end\">\n        <Input\n          variant=\"unstyled\"\n          pr=\"2\"\n          type=\"number\"\n          step=\"any\"\n          defaultValue=\"0.00\"\n          placeholder=\"0.00\"\n          fontSize=\"lg\"\n          fontWeight={700}\n          textAlign=\"right\"\n          width=\"100%\"\n          isDisabled={isDisabled ?? false}\n          {...register(\"depositAmount\", {\n            onChange: (event) => {\n              if (event && event.target) {\n                // analytics.track(\"deposit.amount-selected\", {\n                //   value: event.target.value,\n                // })\n              }\n              let val = event.target.value\n\n              const decimalPos = val.indexOf(\".\")\n\n              if (\n                decimalPos !== -1 &&\n                val.length - decimalPos - 1 > value.decimals\n              ) {\n                val = val.substring(\n                  0,\n                  decimalPos + value.decimals + 1\n                ) // Keep token decimal places as max\n                event.target.value = val\n              }\n            },\n            required: \"Enter amount\",\n            valueAsNumber: true,\n            validate: {\n              positive: (v) =>\n                v > 0 || \"You must submit a positive amount.\",\n              lessThanBalance: (v) => {\n                return (\n                  v <= parseFloat(availableBalance) ||\n                  \"Insufficient balance\"\n                )\n              },\n              // depositLessThanFifty: (v) =>\n              //   v <= 50000 ||\n              //   \"You cannot exceed the cellar limit of $50,000.\",\n              // depositLimit: (v) => {\n              //   if (!depositData?.wallet) return true\n\n              //   const currentDeposits = parseFloat(\n              //     toEther(\n              //       depositData?.wallet?.currentDeposits!,\n              //       18,\n              //       false\n              //     )\n              //   )\n              //   const sum = v + currentDeposits\n\n              //   return (\n              //     sum <= 50000 ||\n              //     `You cannot exceed the cellar limit of $50,000. You currently have $${currentDeposits} deposited in this cellar.`\n              //   )\n              // },\n            },\n          })}\n        />\n        <HStack spacing={0} fontSize=\"11px\" textAlign=\"right\" pr=\"2\">\n          <Text as=\"span\">\n            $ {Number(displayedBalance.toFixed(2)).toLocaleString()}\n          </Text>\n        </HStack>\n      </VStack>\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_menus/ModalMenu/OnlyTokenMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[659,662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[659,662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[858,861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[858,861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":73,"column":8,"nodeType":"Block","messageId":"tsIgnoreInsteadOfExpectError","endLine":73,"endColumn":156,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1748,1896],"text":"/* @ts-expect-error using string where number is expected. This is to ensure popover is always placed at the top of button, no matter the height value. */"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  HStack,\n  Icon,\n  Image,\n  Menu as ChMenu,\n  MenuButton,\n  MenuItemOption,\n  MenuList,\n  MenuOptionGroup,\n  Text,\n} from \"@chakra-ui/react\"\nimport { useRef } from \"react\"\nimport { FaChevronDown } from \"react-icons/fa\"\nimport { getTokenConfig, Token } from \"data/tokenConfig\"\nimport { useFormContext } from \"react-hook-form\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { depositAssetDefaultValue } from \"data/uiConfig\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\n\nexport interface ModalOnlyTokenMenuProps {\n  depositTokens: string[]\n  setSelectedToken: (value: any) => void\n  activeAsset?: string\n  isDisabled?: boolean\n}\n\nexport interface MenuOnlyTokenProps\n  extends Omit<ModalOnlyTokenMenuProps, \"setSelectedToken\"> {\n  value: Token\n  onChange: (...events: any[]) => void\n  isDisabled?: boolean\n}\n\nexport const OnlyTokenMenu = ({\n  depositTokens,\n  activeAsset,\n  value,\n  onChange,\n  isDisabled,\n}: MenuOnlyTokenProps) => {\n  const menuRef = useRef(null)\n  const { clearErrors } = useFormContext()\n\n  const { id: _id } = useDepositModalStore()\n  const id = (useRouter().query.id as string) || _id\n  const cellarData = cellarDataMap[id]\n  const cellarConfig = cellarData.config\n\n  const depositTokenConfig = getTokenConfig(\n    depositTokens,\n    cellarConfig.chain.id\n  ) as Token[]\n\n  return (\n    <HStack\n      ref={menuRef}\n      p={4}\n      justifyContent=\"space-between\"\n      w=\"auto\"\n      bg=\"surface.secondary\"\n      border=\"none\"\n      borderRadius={16}\n      appearance=\"none\"\n      textAlign=\"start\"\n      _first={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* @ts-ignore using string where number is expected. This is to ensure popover is always placed at the top of button, no matter the height value. */}\n      <ChMenu placement=\"bottom\">\n        <MenuButton\n          as={Box}\n          border=\"none\"\n          borderRadius={16}\n          appearance=\"none\"\n          fontSize=\"lg\"\n          fontWeight={700}\n          disabled={isDisabled}\n        >\n          <HStack>\n            {value ? (\n              <HStack spacing={1}>\n                <Image boxSize={5} src={value.src} alt={value.alt} />\n                <span>{value.symbol}</span>\n              </HStack>\n            ) : (\n              <Text as=\"span\">Select Token</Text>\n            )}\n            <Icon as={FaChevronDown} />\n          </HStack>\n        </MenuButton>\n        <MenuList\n          bg=\"surface.bg\"\n          borderColor=\"purple.base\"\n          borderRadius={16}\n          zIndex=\"overlay\"\n          w={\"50%\"}\n        >\n          <MenuOptionGroup\n            defaultValue={\n              activeAsset && depositAssetDefaultValue(cellarConfig)\n            }\n            type=\"radio\"\n          >\n            <Box pt={4} pb={2} pl={10}>\n              <Text color=\"neutral.400\">Select withdraw asset</Text>\n            </Box>\n            {depositTokenConfig.map((token) => {\n              const { address, src, alt, symbol } = token\n              const isActiveAsset =\n                token.address.toUpperCase() ===\n                activeAsset?.toUpperCase()\n\n              // Set default selected token to active asset.\n              if (isActiveAsset && !value) onChange(token)\n\n              return (\n                <MenuItemOption\n                  key={address}\n                  value={symbol}\n                  borderRadius={8}\n                  _hover={{ bg: \"rgba(96, 80, 155, 0.4)\" }}\n                  disabled={isDisabled}\n                  onClick={() => {\n                    clearErrors()\n                    onChange(token)\n                  }}\n                >\n                  <HStack justify=\"space-between\">\n                    <HStack>\n                      <Image boxSize={5} src={src} alt={alt} />\n                      <span>{symbol}</span>\n                    </HStack>\n                  </HStack>\n                </MenuItemOption>\n              )\n            })}\n          </MenuOptionGroup>\n        </MenuList>\n      </ChMenu>\n    </HStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_menus/ModalMenu/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[280,283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[280,283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `BigInt` as a type. Use bigint instead","line":14,"column":12,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":14,"endColumn":18,"fix":{"range":[416,422],"text":"bigint"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { FC } from \"react\"\nimport { Controller, useFormContext } from \"react-hook-form\"\nimport { Menu } from \"./Menu\"\nimport { ModalOnlyTokenMenuProps, OnlyTokenMenu } from \"./OnlyTokenMenu\"\n\nexport interface ModalMenuProps {\n  depositTokens: string[]\n  setSelectedToken: (value: any) => void\n  activeAsset?: string\n  selectedTokenBalance?: {\n    decimals: number\n    formatted: string\n    symbol: string\n    value: BigInt\n  }\n  isDisabled?: boolean\n}\n\nexport const ModalMenu: FC<ModalMenuProps> = ({\n  depositTokens,\n  activeAsset,\n  selectedTokenBalance,\n  setSelectedToken,\n  isDisabled,\n}) => {\n  const { control } = useFormContext()\n\n  return (\n    <Controller\n      control={control}\n      name=\"selectedToken\"\n      render={({ field: { value, onChange } }) => {\n        return (\n          <Menu\n            depositTokens={depositTokens}\n            value={value}\n            activeAsset={activeAsset}\n            selectedTokenBalance={selectedTokenBalance}\n            onChange={(data) => {\n              // Todo: shouldn't need to do this hack\n              setSelectedToken(data)\n              onChange(data)\n            }}\n            isDisabled={isDisabled}\n          />\n        )\n      }}\n    />\n  )\n}\n\nexport const ModalOnlyTokenMenu: FC<ModalOnlyTokenMenuProps> = ({\n  depositTokens,\n  activeAsset,\n  setSelectedToken,\n  isDisabled,\n}) => {\n  const { control } = useFormContext()\n\n  return (\n    <Controller\n      control={control}\n      name=\"selectedToken\"\n      render={({ field: { value, onChange } }) => {\n        return (\n          <OnlyTokenMenu\n            depositTokens={depositTokens}\n            value={value}\n            activeAsset={activeAsset}\n            isDisabled={isDisabled}\n            onChange={(data) => {\n              // Todo: shouldn't need to do this hack\n              setSelectedToken(data)\n              onChange(data)\n            }}\n          />\n        )\n      }}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/BaseModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/BondModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/BuyOrSellModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/ClaimModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/DepositModal/SommelierTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useWaitForTransaction' is defined but never used.","line":48,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitForTransaction' is assigned a value but never used.","line":137,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":137,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsDepositFeeLoading' is assigned a value but never used.","line":147,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":53},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDepositFee' is assigned a value but never used.","line":149,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'strategyData' is assigned a value but never used.","line":189,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellarContract' is assigned a value but never used.","line":237,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":237,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'queryDepositFeePercent' is assigned a value but never used.","line":247,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":260,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":260,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7524,7527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7524,7527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7529,7532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7529,7532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7917,7920],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7917,7920],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7955,7958],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7955,7958],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8000,8003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8000,8003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":275,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8038,8041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8038,8041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'doDepositTx' is assigned a value but never used.","line":319,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":319,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9399,9402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9399,9402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9446,9449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9446,9449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'minimumMint' is assigned a value but never used.","line":351,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10439,10442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10439,10442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14851,14854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14851,14854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":537,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":537,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15200,15203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15200,15203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":575,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":575,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16480,16483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16480,16483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":681,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":681,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19405,19408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19405,19408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":681,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":681,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":681,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":681,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19413,19416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19413,19416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":701,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":701,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[20018,20031],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":838,"column":11,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":838,"endColumn":23,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[24532,24544],"text":"//@ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'errors' is defined but never used.","line":896,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":896,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":896,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":896,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26033,26036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26033,26036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":896,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":896,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":896,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":896,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26041,26044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26041,26044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  HStack,\n  ModalProps,\n  Text,\n  VStack,\n  FormControl,\n  FormErrorMessage,\n  Icon,\n  Spinner,\n  Avatar,\n  Tooltip,\n  UseDisclosureProps,\n} from \"@chakra-ui/react\"\n\nimport { useEffect, useState, type JSX } from \"react\"\nimport { FormProvider, useForm } from \"react-hook-form\"\nimport { AiOutlineInfo } from \"react-icons/ai\"\nimport { ModalMenu } from \"components/_menus/ModalMenu\"\nimport {\n  depositAssetTokenConfig,\n  Token as TokenType,\n  tokenConfig,\n  getTokenConfig,\n} from \"data/tokenConfig\"\nimport { Link } from \"components/Link\"\nimport { config } from \"utils/config\"\nimport {\n  useAccount,\n  usePublicClient,\n  useWriteContract,\n  useWaitForTransactionReceipt,\n  useSwitchChain,\n} from \"wagmi\"\nimport { erc20Abi, getContract, parseUnits, getAddress } from \"viem\"\n\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { insertEvent } from \"utils/supabase\"\nimport {\n  InformationIcon,\n  GreenCheckCircleIcon,\n} from \"components/_icons\"\nimport { CardHeading } from \"components/_typography/CardHeading\"\nimport { getCurrentAsset } from \"utils/getCurrentAsset\"\nimport { ExternalLinkIcon } from \"components/_icons\"\nimport { analytics } from \"utils/analytics\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\nimport { useCreateContracts } from \"data/hooks/useCreateContracts\"\nimport { waitTime, depositAssetDefaultValue } from \"data/uiConfig\"\nimport { useGeo } from \"context/geoContext\"\nimport { useImportToken } from \"hooks/web3/useImportToken\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { FaExternalLinkAlt } from \"react-icons/fa\"\nimport { BaseButton } from \"components/_buttons/BaseButton\"\nimport { useUserBalances } from \"data/hooks/useUserBalances\"\nimport {\n  handleTransactionError,\n  getTransactionErrorToast,\n  getTransactionErrorAnalytics,\n  type TransactionErrorContext,\n} from \"utils/handleTransactionError\"\nimport { logTxDebug } from \"utils/txDebug\"\n\ninterface FormValues {\n  depositAmount: number\n  slippage: number\n  selectedToken: TokenType\n}\n\ninterface DepositModalProps\n  extends Pick<ModalProps, \"isOpen\" | \"onClose\"> {\n  notifyModal?: UseDisclosureProps\n}\n\n//! This handles all deposits, not just the tab\nexport const SommelierTab = ({\n  notifyModal,\n  ...props\n}: DepositModalProps) => {\n  const { id: _id } = useDepositModalStore()\n  const id = (useRouter().query.id as string) || _id\n  const cellarData = cellarDataMap[id]\n  const cellarConfig = cellarData.config\n  const cellarName = cellarData.name\n  const cellarAddress = cellarConfig.id\n\n  let depositTokens: string[] = cellarData.depositTokens.list\n  // Drop base asset from deposit token list\n  depositTokens = depositTokens.filter(\n    (token) => token !== cellarConfig.baseAsset.symbol\n  )\n\n  // Put base asset at the top of the token list\n  depositTokens.unshift(cellarConfig.baseAsset.symbol)\n\n  const { addToast, update, close, closeAll } = useBrandedToast()\n\n  const currentStrategies =\n    window.location.pathname?.split(\"/\")[2]?.replace(/-/g, \" \") ||\n    id.replace(/-/g, \" \") ||\n    \"\"\n\n  const importToken = useImportToken({\n    onSuccess: (data) => {\n      const tokenData = data as unknown as { symbol: string }\n      addToast({\n        heading: \"Import Token\",\n        status: \"success\",\n        body: <Text>{tokenData.symbol} added to metamask</Text>,\n        closeHandler: close,\n      })\n    },\n    onError: (error) => {\n      const e = error as Error\n      addToast({\n        heading: \"Import Token\",\n        status: \"error\",\n        body: <Text>{e.message}</Text>,\n        closeHandler: close,\n      })\n    },\n  })\n\n  // Base Analytics data to differentiate between cellars\n  const baseAnalytics = {\n    cellarName,\n    cellarAddress,\n  }\n\n  const publicClient = usePublicClient()\n  const { address, chain } = useAccount()\n  const { switchChainAsync } = useSwitchChain()\n  const { writeContractAsync } = useWriteContract()\n  const { data: waitForTransaction } = useWaitForTransactionReceipt()\n  const geo = useGeo()\n\n  const { refetch } = useUserStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n\n  const [selectedToken, setSelectedToken] =\n    useState<TokenType | null>(null)\n  const [isDepositFeeLoading, setIsDepositFeeLoading] =\n    useState(false)\n  const [depositFee, setDepositFee] = useState(0)\n  const methods = useForm<FormValues>({\n    defaultValues: { slippage: config.SWAP.SLIPPAGE },\n  })\n\n  // Set default selected token when component mounts\n  useEffect(() => {\n    if (!selectedToken && depositTokens.length > 0) {\n      const depositTokenConfig = getTokenConfig(\n        depositTokens,\n        cellarConfig.chain.id\n      ) as TokenType[]\n\n      // Get the default deposit asset for this cellar\n      const defaultAssetSymbol =\n        depositAssetDefaultValue(cellarConfig)\n      const defaultToken =\n        depositTokenConfig.find(\n          (token) => token.symbol === defaultAssetSymbol\n        ) || depositTokenConfig[0]\n\n      setSelectedToken(defaultToken)\n    }\n  }, [selectedToken, depositTokens, cellarConfig])\n  const {\n    watch,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = methods\n  const watchDepositAmount = watch(\"depositAmount\")\n  const isError =\n    errors.depositAmount !== undefined ||\n    errors.slippage !== undefined\n  // Balance/chain guards\n  const desiredChainId = cellarConfig?.chain?.wagmiId\n  const needsSwitch = !!desiredChainId && chain?.id !== desiredChainId\n\n  const { cellarSigner, boringVaultLens } =\n    useCreateContracts(cellarConfig)\n\n  const { data: strategyData, isLoading } = useStrategyData(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id\n  )\n\n  const { userBalances } = useUserBalances()\n\n  const selectedTokenBalance = userBalances.data?.find(\n    (b) => b.symbol === selectedToken?.symbol\n  )\n\n  const availableAmount = Number(selectedTokenBalance?.formatted ?? 0)\n  const insufficientBalance =\n    Number.isFinite(availableAmount) &&\n    Number(watchDepositAmount) > availableAmount\n  const isDisabled =\n    isNaN(watchDepositAmount) ||\n    watchDepositAmount <= 0 ||\n    isError ||\n    insufficientBalance ||\n    needsSwitch\n\n  // Debug snapshot\n  logTxDebug(\"deposit.ui_state\", {\n    id,\n    cellarName,\n    chainId: chain?.id,\n    desiredChainId,\n    needsSwitch,\n    selectedToken: selectedToken?.symbol,\n    selectedTokenAddress: selectedToken?.address,\n    depositAmount: watchDepositAmount,\n    availableAmount,\n    insufficientBalance,\n    isDisabled,\n  })\n\n  const erc20Contract =\n    cellarConfig.baseAsset.address &&\n    publicClient &&\n    getContract({\n      address: getAddress(cellarConfig.baseAsset.address),\n      abi: erc20Abi,\n      client: {\n        public: publicClient,\n      },\n    })\n\n  const cellarContract =\n    publicClient &&\n    getContract({\n      address: getAddress(cellarConfig.cellar.address),\n      abi: cellarConfig.cellar.abi,\n      client: {\n        public: publicClient,\n      },\n    })\n\n  const queryDepositFeePercent = async (assetAddress: string) => {\n    if (\n      assetAddress === cellarConfig.baseAsset.address ||\n      cellarConfig.boringVault\n    ) {\n      return 0\n    }\n\n    const result = await cellarSigner?.read.alternativeAssetData([\n      assetAddress,\n    ])\n    if (!result) return 0\n\n    const [isSupported, _, depositFee] = result as [boolean, any, any]\n\n    return isSupported ? Number(depositFee) : 0\n  }\n\n  // Helper: wrap writeContractAsync and swallow user-rejected with toast, returning undefined\n  const safeWriteContract = async (\n    params: Parameters<typeof writeContractAsync>[0],\n    context: TransactionErrorContext\n  ): Promise<string | undefined> => {\n    try {\n      logTxDebug(\"write.request\", {\n        to: (params as any)?.address,\n        fn: (params as any)?.functionName,\n        args: (params as any)?.args,\n        value: (params as any)?.value,\n        context,\n      })\n      const hash = await writeContractAsync(params)\n      logTxDebug(\"write.submitted\", { hash })\n      return hash\n    } catch (e) {\n      logTxDebug(\"write.error\", { message: (e as Error)?.message })\n      const normalized = handleTransactionError(e as Error, context)\n      if (normalized.type === \"USER_REJECTED\") {\n        logTxDebug(\"write.rejected\", { context })\n        const toastConfig = getTransactionErrorToast(\n          normalized,\n          context\n        )\n        const analyticsData = getTransactionErrorAnalytics(\n          normalized,\n          context\n        )\n        analytics.track(`${context.transactionType}.rejected`, {\n          ...baseAnalytics,\n          ...analyticsData,\n        })\n        const toastBody = toastConfig.showPopupGuidance ? (\n          <Text>\n            {toastConfig.body}\n            <br />\n            Enable popups for MetaMask and retry.\n          </Text>\n        ) : (\n          <Text>{toastConfig.body}</Text>\n        )\n        addToast({\n          heading: toastConfig.heading,\n          body: toastBody,\n          status: toastConfig.status,\n          closeHandler: closeAll,\n        })\n        return undefined\n      }\n      throw e\n    }\n  }\n\n  const doDepositTx = async (\n    nativeDeposit: boolean,\n    amtInWei: bigint,\n    assetAddress: string\n  ): Promise<any> => {\n    let fnName: string\n    let args: any[]\n    let value: bigint\n\n    if (cellarConfig.boringVault) {\n      const minimumMint = await boringVaultLens?.read.previewDeposit([\n        assetAddress,\n        amtInWei,\n        cellarConfig.cellar.address,\n        cellarConfig.accountant?.address,\n      ])\n      fnName = \"deposit\"\n      args = [assetAddress, amtInWei, minimumMint]\n      value = nativeDeposit ? amtInWei : BigInt(0)\n    } else if (\n      assetAddress !== undefined &&\n      assetAddress.toLowerCase() !==\n        cellarConfig.baseAsset.address.toLowerCase()\n    ) {\n      const minimumMint = await cellarSigner?.read.previewDeposit([\n        assetAddress,\n        amtInWei,\n      ])\n      fnName = \"deposit\"\n      args = [assetAddress, amtInWei, minimumMint]\n      value = BigInt(0)\n    } else {\n      const minimumMint = await cellarSigner?.read.previewDeposit([\n        amtInWei,\n      ])\n      fnName = \"deposit\"\n      args = [amtInWei, address]\n      value = BigInt(0)\n    }\n\n    try {\n      const contractParams: any = {\n        address: cellarSigner?.address as `0x${string}`,\n        abi: cellarSigner?.abi ?? cellarConfig.cellar.abi,\n        functionName: fnName,\n        args: args,\n      }\n\n      if (value > 0) {\n        contractParams.value = value\n      }\n\n      const hash = await safeWriteContract(contractParams, {\n        vaultName: cellarName,\n        tokenSymbol: selectedToken?.symbol,\n        transactionType: \"deposit\",\n        chainId: cellarConfig.chain.wagmiId,\n      })\n\n      if (hash) {\n        addToast({\n          heading: \"Deposit in Progress\",\n          body: <Text>Your deposit is being processed.</Text>,\n          status: \"info\",\n          closeHandler: close,\n        })\n\n        const receipt = await publicClient?.waitForTransactionReceipt(\n          {\n            hash: hash as `0x${string}`,\n          }\n        )\n\n        if (receipt?.status === \"success\") {\n          addToast({\n            heading: \"Deposit Successful\",\n            body: (\n              <Text>\n                Your deposit has been completed successfully.\n              </Text>\n            ),\n            status: \"success\",\n            closeHandler: close,\n          })\n          return [receipt]\n        } else {\n          addToast({\n            heading: \"Deposit Failed\",\n            body: <Text>Deposit failed. Please try again.</Text>,\n            status: \"error\",\n            closeHandler: close,\n          })\n          throw new Error(\"Deposit failed\")\n        }\n      }\n    } catch (error) {\n      console.error(\"Deposit error:\", error)\n      throw error\n    }\n  }\n\n  const doApprovalTx = async (amtInWei: bigint): Promise<boolean> => {\n    try {\n      const hash = await safeWriteContract(\n        {\n          address: cellarConfig.baseAsset.address as `0x${string}`,\n          abi: erc20Abi,\n          functionName: \"approve\",\n          args: [cellarConfig.cellar.address, amtInWei],\n        },\n        {\n          vaultName: cellarName,\n          tokenSymbol: cellarConfig.baseAsset.symbol,\n          transactionType: \"approve\",\n          chainId: cellarConfig.chain.wagmiId,\n        }\n      )\n\n      if (hash) {\n        addToast({\n          heading: \"Approving Token\",\n          body: <Text>Please approve the token transfer.</Text>,\n          status: \"info\",\n          closeHandler: close,\n        })\n\n        const receipt = await publicClient?.waitForTransactionReceipt(\n          {\n            hash: hash as `0x${string}`,\n          }\n        )\n\n        if (receipt?.status === \"success\") {\n          addToast({\n            heading: \"Token Approved\",\n            body: <Text>Token approval successful.</Text>,\n            status: \"success\",\n            closeHandler: close,\n          })\n          return true\n        } else {\n          addToast({\n            heading: \"Approval Failed\",\n            body: <Text>Token approval failed.</Text>,\n            status: \"error\",\n            closeHandler: close,\n          })\n          return false\n        }\n      }\n      return false\n    } catch (error) {\n      console.error(\"Approval error:\", error)\n\n      // Use centralized error handling for approval\n      const errorContext: TransactionErrorContext = {\n        vaultName: cellarName,\n        tokenSymbol: cellarConfig.baseAsset.symbol,\n        transactionType: \"approve\",\n        chainId: cellarConfig.chain.wagmiId,\n      }\n\n      const normalizedError = handleTransactionError(\n        error as Error,\n        errorContext\n      )\n      const toastConfig = getTransactionErrorToast(\n        normalizedError,\n        errorContext\n      )\n      const analyticsData = getTransactionErrorAnalytics(\n        normalizedError,\n        errorContext\n      )\n\n      // Track analytics\n      analytics.track(\"approval.rejected\", {\n        ...analyticsData,\n      })\n\n      // Show toast with popup guidance if needed\n      const toastBody = toastConfig.showPopupGuidance ? (\n        <Text>\n          {toastConfig.body}\n          <br />\n          Enable popups for MetaMask and retry.\n        </Text>\n      ) : (\n        <Text>{toastConfig.body}</Text>\n      )\n\n      addToast({\n        heading: toastConfig.heading,\n        body: toastBody,\n        status: toastConfig.status,\n        closeHandler: close,\n      })\n      return false\n    }\n  }\n\n  const deposit = async (\n    amtInWei: bigint,\n    tokenAddress: string,\n    approval: boolean,\n    canDoBatchCall: boolean,\n    isNativeDeposit: boolean\n  ): Promise<any[]> => {\n    try {\n      let hash: string\n\n      // For BoringVault (like Alpha STETH), use the teller contract\n      if (cellarConfig.teller) {\n        // Calculate minimum mint amount (0 for now, can be enhanced later)\n        const minimumMint = 0n\n\n        if (isNativeDeposit) {\n          // Native ETH deposit\n          const tellerParams: any = {\n            address: cellarConfig.teller.address as `0x${string}`,\n            abi: cellarConfig.teller.abi,\n            functionName: \"deposit\",\n            args: [tokenAddress, amtInWei, minimumMint],\n          }\n\n          if (amtInWei > 0) {\n            tellerParams.value = amtInWei\n          }\n\n          hash = (await safeWriteContract(tellerParams, {\n            vaultName: cellarName,\n            tokenSymbol: selectedToken?.symbol,\n            transactionType: \"deposit\",\n            chainId: cellarConfig.chain.wagmiId,\n          })) as string\n        } else {\n          // ERC20 token deposit\n          hash = (await safeWriteContract(\n            {\n              address: cellarConfig.teller.address as `0x${string}`,\n              abi: cellarConfig.teller.abi,\n              functionName: \"deposit\",\n              args: [tokenAddress, amtInWei, minimumMint],\n            },\n            {\n              vaultName: cellarName,\n              tokenSymbol: selectedToken?.symbol,\n              transactionType: \"deposit\",\n              chainId: cellarConfig.chain.wagmiId,\n            }\n          )) as string\n        }\n      } else {\n        // Standard cellar deposit\n        if (isNativeDeposit) {\n          // Native ETH deposit\n          const cellarParams: any = {\n            address: cellarConfig.cellar.address as `0x${string}`,\n            abi: cellarConfig.cellar.abi,\n            functionName: \"deposit\",\n            args: [amtInWei, address],\n          }\n          \n          if (amtInWei > 0) {\n            cellarParams.value = amtInWei\n          }\n          \n          hash = (await safeWriteContract(\n            cellarParams,\n            {\n              vaultName: cellarName,\n              tokenSymbol: selectedToken?.symbol,\n              transactionType: \"deposit\",\n              chainId: cellarConfig.chain.wagmiId,\n            }\n          )) as string\n        } else {\n          // ERC20 token deposit\n          hash = (await safeWriteContract(\n            {\n              address: cellarConfig.cellar.address as `0x${string}`,\n              abi: cellarConfig.cellar.abi,\n              functionName: \"deposit\",\n              args: [amtInWei, address],\n            },\n            {\n              vaultName: cellarName,\n              tokenSymbol: selectedToken?.symbol,\n              transactionType: \"deposit\",\n              chainId: cellarConfig.chain.wagmiId,\n            }\n          )) as string\n        }\n      }\n\n      if (hash) {\n        const receipt = await publicClient?.waitForTransactionReceipt(\n          {\n            hash: hash as `0x${string}`,\n          }\n        )\n\n        return [receipt]\n      }\n\n      return []\n    } catch (error) {\n      console.error(\"Deposit error:\", error)\n\n      // Normalize and handle user-rejected errors gracefully to avoid dev overlay\n      const errorContext: TransactionErrorContext = {\n        vaultName: cellarName,\n        tokenSymbol: selectedToken?.symbol,\n        transactionType: \"deposit\",\n        chainId: cellarConfig.chain.wagmiId,\n      }\n      const normalizedError = handleTransactionError(\n        error as Error,\n        errorContext\n      )\n\n      if (normalizedError.type === \"USER_REJECTED\") {\n        const toastConfig = getTransactionErrorToast(\n          normalizedError,\n          errorContext\n        )\n        const analyticsData = getTransactionErrorAnalytics(\n          normalizedError,\n          errorContext\n        )\n\n        analytics.track(\"deposit.rejected\", {\n          ...baseAnalytics,\n          ...analyticsData,\n        })\n\n        const toastBody = toastConfig.showPopupGuidance ? (\n          <Text>\n            {toastConfig.body}\n            <br />\n            Enable popups for MetaMask and retry.\n          </Text>\n        ) : (\n          <Text>{toastConfig.body}</Text>\n        )\n\n        addToast({\n          heading: toastConfig.heading,\n          body: toastBody,\n          status: toastConfig.status,\n          closeHandler: closeAll,\n        })\n\n        // Do not rethrow user-rejected to prevent red runtime overlay\n        return []\n      }\n\n      // For all other errors, rethrow to be handled by caller\n      throw error\n    }\n  }\n\n  const onSubmit = async (data: any, e: any) => {\n    if (geo?.isRestrictedAndOpenModal()) {\n      return\n    }\n    const tokenSymbol = data?.selectedToken?.symbol\n    const depositAmount = data?.depositAmount\n\n    let nativeDeposit = selectedToken?.symbol === \"ETH\"\n    if (!erc20Contract && !nativeDeposit) return\n    insertEvent({\n      event: \"deposit.started\",\n      address: address ?? \"\",\n      cellar: cellarConfig.cellar.address,\n    })\n\n    // For now, assume batch calls are not supported to avoid the getCapabilities issue\n    const canDoBatchCall = false\n\n    const allowance = nativeDeposit\n      ? Number.MAX_SAFE_INTEGER\n      : // @ts-ignore\n        await erc20Contract.read.allowance(\n          [\n            getAddress(address ?? \"\"),\n            getAddress(cellarConfig.cellar.address),\n          ],\n          { account: address }\n        )\n    logTxDebug(\"deposit.allowance\", {\n      nativeDeposit,\n      allowance: nativeDeposit\n        ? \"MAX_SAFE_INTEGER\"\n        : String(allowance),\n    })\n\n    const amtInWei = parseUnits(\n      depositAmount.toFixed(selectedTokenBalance?.decimals ?? 18),\n      selectedTokenBalance?.decimals ?? 0\n    )\n    logTxDebug(\"deposit.amountParsed\", {\n      depositAmount,\n      decimals: selectedTokenBalance?.decimals,\n      amtInWei: String(amtInWei),\n    })\n\n    let needsApproval = allowance < amtInWei\n    let approval = !needsApproval\n\n    if (needsApproval && !canDoBatchCall) {\n      approval = await doApprovalTx(amtInWei)\n    }\n\n    if (approval || canDoBatchCall) {\n      try {\n        // Add a small delay to prevent spam filter triggers\n        await new Promise((resolve) => setTimeout(resolve, 1000))\n\n        const receipts = await deposit(\n          amtInWei,\n          data?.selectedToken?.address,\n          approval,\n          canDoBatchCall,\n          nativeDeposit\n        )\n\n        // If no receipts, likely user canceled; a toast was already shown by error handler\n        if (!receipts || receipts.length === 0) {\n          logTxDebug(\"deposit.no_receipt\", {\n            reason: \"likely user cancel\",\n          })\n          return\n        }\n\n        refetch()\n\n        if (receipts?.[0]?.status === \"success\") {\n          logTxDebug(\"deposit.success\", {\n            txHash: receipts![0].transactionHash,\n          })\n          insertEvent({\n            event: \"deposit.succeeded\",\n            address: address ?? \"\",\n            cellar: cellarConfig.cellar.address,\n            transaction_hash: receipts![0].transactionHash,\n          })\n          analytics.track(\"deposit.succeeded\", {\n            ...baseAnalytics,\n            stable: tokenSymbol,\n            value: depositAmount,\n            transaction_hash: receipts![0].transactionHash,\n          })\n\n          update({\n            heading: cellarName + \" Cellar Deposit\",\n            body: (\n              <>\n                <Text>Deposit Success</Text>\n                <Link\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  href={`${cellarConfig.chain.blockExplorer.url}/tx/${\n                    receipts![0].transactionHash\n                  }`}\n                  isExternal\n                  textDecor=\"underline\"\n                >\n                  <Text as=\"span\">{`View on ${cellarConfig.chain.blockExplorer.name}`}</Text>\n                  <ExternalLinkIcon ml={2} />\n                </Link>\n                <Text\n                  onClick={() => {\n                    if (!importToken.isPending) {\n                      console.log(\n                        \"Importing token with address:\",\n                        cellarAddress\n                      )\n                      console.log(\n                        \"Importing token with image:\",\n                        `${window.origin}${cellarConfig.lpToken.imagePath}`\n                      )\n                      importToken.mutate({\n                        address: cellarAddress,\n                        chain: cellarConfig.chain.id,\n                        imageUrl: `${window.origin}${cellarConfig.lpToken.imagePath}`,\n                      })\n                    }\n                  }}\n                  textDecor=\"underline\"\n                  as=\"button\"\n                  disabled={importToken.isPending}\n                >\n                  {importToken.isPending\n                    ? \"Importing...\"\n                    : \"Import tokens to wallet\"}\n                </Text>\n                {waitTime(cellarConfig) !== null && (\n                  <Text textAlign=\"center\">\n                    Please wait {waitTime(cellarConfig)} after the\n                    deposit to Withdraw or Bond\n                  </Text>\n                )}\n              </>\n            ),\n            status: \"success\",\n            closeHandler: closeAll,\n            duration: null, // toast won't close until user presses close button\n          })\n        }\n\n        const isPopUpEnable =\n          cellarData.popUpTitle && cellarData.popUpDescription\n\n        if (!notifyModal?.isOpen) {\n          analytics.track(`${currentStrategies}-notify.modal-opened`)\n        }\n        if (isPopUpEnable) {\n          props.onClose()\n          //@ts-ignore\n          notifyModal?.onOpen()\n        }\n      } catch (e) {\n        const error = e as Error\n        console.error(\"Deposit error:\", error)\n\n        // Use centralized error handling\n        const errorContext: TransactionErrorContext = {\n          vaultName: cellarName,\n          tokenSymbol,\n          transactionType: \"deposit\",\n          value: depositAmount,\n          chainId: cellarConfig.chain.wagmiId,\n        }\n\n        const normalizedError = handleTransactionError(\n          error,\n          errorContext\n        )\n        const toastConfig = getTransactionErrorToast(\n          normalizedError,\n          errorContext\n        )\n        const analyticsData = getTransactionErrorAnalytics(\n          normalizedError,\n          errorContext\n        )\n\n        // Track analytics\n        analytics.track(\"deposit.rejected\", {\n          ...baseAnalytics,\n          ...analyticsData,\n        })\n\n        // Show toast with popup guidance if needed\n        const toastBody = toastConfig.showPopupGuidance ? (\n          <Text>\n            {toastConfig.body}\n            <br />\n            Enable popups for MetaMask and retry.\n          </Text>\n        ) : (\n          <Text>{toastConfig.body}</Text>\n        )\n\n        addToast({\n          heading: toastConfig.heading,\n          body: toastBody,\n          status: toastConfig.status,\n          closeHandler: closeAll,\n        })\n\n        console.warn(\"failed to deposit\", e)\n      }\n    }\n  }\n\n  const onError = async (errors: any, e: any) => {\n    // try and handle basic cases\n    // gasFailure\n    // onChain assert\n    addToast({\n      heading: cellarName + \" Cellar Deposit\",\n      body: <Text>Deposit Failed</Text>,\n      status: \"error\",\n      closeHandler: closeAll,\n    })\n  }\n\n  const currentAsset = getCurrentAsset(\n    tokenConfig,\n    cellarConfig.chain.id,\n    selectedToken?.address\n  )\n\n  // Move active asset to top of token list.\n  useEffect(() => {\n    if (currentAsset === undefined) return\n\n    const indexOfActiveAsset = depositAssetTokenConfig.findIndex(\n      (token) => token === currentAsset\n    )\n\n    depositAssetTokenConfig.splice(\n      0,\n      0,\n      depositAssetTokenConfig.splice(indexOfActiveAsset, 1)[0]\n    )\n  }, [selectedToken, currentAsset])\n\n  const strategyMessages: Record<string, () => JSX.Element> = {\n    \"Real Yield ETH\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"real yield eth arb\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />\n          - 1 steth=1 weth is not hard coded in Aave on Arbitrum\n          unlike Ethereum mainnet. There is a depeg risk for steth.\n          <br /> - Borrow rates on Aave have been far more volatile\n          than borrow rates on Ethereum on Ethereum .\n          <br /> - This vault uses leverage, which means there is\n          liquidation risk.\n          <br />\n          <br /> - This vault does liquidity provision which can\n          result in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"real yield eth opt\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br /> - This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n          <br />\n          <br /> - This vault does liquidity provision which can\n          result in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"real yield eth scroll\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br /> - This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n          <br />\n          <br /> - This vault does liquidity provision which can\n          result in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"Real Yield USD\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is mainly comprised of decentralized and\n          centralized stablecoins, both of which can experience depeg\n          events.\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"real yield usd arb\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"Real Yield BTC\": () => (\n      <>\n        <Link\n          href={\"https://app.rhino.fi/invest/YIELDBTC/supply\"}\n          isExternal\n          role=\"group\"\n          textAlign=\"center\"\n        >\n          <Text as=\"span\">\n            Buy and sell gassless on rhino.fi &nbsp;\n          </Text>\n          <Icon as={FaExternalLinkAlt} color=\"purple.base\" />\n        </Link>\n        <br />\n        <br />\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"ETH Trend Growth\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is denominated in USDC but exposes you to\n          volatile crypto assets, which carry a risk of potential\n          loss.\n        </Text>\n      </>\n    ),\n    \"Turbo GHO\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is mainly comprised of decentralized and\n          centralized stablecoins, both of which can experience depeg\n          events.\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"Turbo SWETH\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />\n          - This vault has exposure to swETH, an LST that is not\n          redeemable until Q1 2024, which makes this LST more\n          susceptible to depegs than its redeemable counterparts.\n          <br />\n          <br />- Because withdrawals can only be facilitated based on\n          the available ETH-swETH liquidity in the market, it is\n          possible to receive swETH upon withdrawal even if you\n          deposited ETH.\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    Fraximal: () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is mainly comprised of decentralized\n          stablecoins, which can experience depeg events.\n        </Text>\n      </>\n    ),\n    \"Real Yield LINK\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n        </Text>\n      </>\n    ),\n    \"ETH BTC Trend\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is denominated in USDC but exposes you to\n          volatile crypto assets, which carry a risk of potential\n          loss.\n        </Text>\n      </>\n    ),\n    \"ETH BTC Momentum\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is denominated in USDC but exposes you to\n          volatile crypto assets, which carry a risk of potential\n          loss.\n        </Text>\n      </>\n    ),\n    \"DeFi Stars\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault is denominated in USDC but exposes you to\n          volatile crypto assets, which carry a risk of potential\n          loss.\n        </Text>\n      </>\n    ),\n    \"Real Yield ENS\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n        </Text>\n      </>\n    ),\n    \"Real Yield UNI\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n        </Text>\n      </>\n    ),\n    \"Real Yield SNX\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n        </Text>\n      </>\n    ),\n    \"Real Yield 1Inch\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage which presents a risk for\n          the vault to be liquidated. Although there are safeguards in\n          place to help mitigate this, the liquidation risk is not\n          eliminated.\n        </Text>\n      </>\n    ),\n    \"Morpho ETH\": () => (\n      <>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault uses leverage, which means there is\n          liquidation risk.\n        </Text>\n      </>\n    ),\n    \"Turbo SOMM\": () => (\n      <>\n        <Text as=\"span\" style={{ textAlign: \"center\" }}>\n          Bridge your SOMM tokens to Ethereum via{\" \"}\n          <Link\n            href=\"https://app.sommelier.finance/bridge\"\n            isExternal\n            textDecor=\"underline\"\n          >\n            Somm bridge\n          </Link>\n        </Text>\n        <Text as=\"span\">\n          All Somm vaults contain smart contract risk and varying\n          degrees of economic risk. Please take note of the following\n          risks; however, this list is not exhaustive, and there may\n          be additional risks:\n          <br />\n          <br />- This vault does liquidity provision which can result\n          in impermanent loss.\n        </Text>\n      </>\n    ),\n    \"Turbo eETH\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />- This vault does liquidity provision which can result\n        in impermanent loss.\n      </Text>\n    ),\n    \"Turbo STETH\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />- This vault does liquidity provision which can result\n        in impermanent loss.\n      </Text>\n    ),\n    turboSTETHstETHDeposit: () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />- This vault does liquidity provision which can result\n        in impermanent loss.\n      </Text>\n    ),\n    \"Turbo divETH\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />\n        - This vault will take exposure to divETH, an emerging LST,\n        which means that it may be more susceptible to depeg risk than\n        some of its more established counterparts.\n        <br />\n        <br />- This vault does liquidity provision which can result\n        in impermanent loss.\n      </Text>\n    ),\n    \"Turbo ETHx\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />\n        - This vault has exposure to ETHx, an emerging LST, which\n        means that it is more susceptible to depegs than its more\n        established counterparts.\n        <br />\n        <br />- This vault may use leverge in the future, which means\n        there is liquidation risk.\n      </Text>\n    ),\n    \"Turbo eETHV2\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />\n        - This vault does liquidity provision which can result in\n        impermanent loss.\n        <br />\n        <br />- This vault uses leverage, which means there is\n        liquidation risk.\n      </Text>\n    ),\n    \"Turbo rsETH\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />\n        - This vault does liquidity provision which can result in\n        impermanent loss.\n        <br />\n        <br />- This vault uses leverage, which means there is\n        liquidation risk.\n      </Text>\n    ),\n    \"Turbo ezETH\": () => (\n      <Text as=\"span\">\n        All Somm vaults contain smart contract risk and varying\n        degrees of economic risk. Please take note of the following\n        risks; however, this list is not exhaustive, and there may be\n        additional risks:\n        <br />\n        <br />\n        - This vault does liquidity provision which can result in\n        impermanent loss.\n        <br />\n        <br />- This vault uses leverage, which means there is\n        liquidation risk.\n      </Text>\n    ),\n  }\n  return (\n    <>\n      <VStack pb={10} spacing={6} align=\"stretch\">\n        <VStack align=\"stretch\">\n          {/* <CardHeading>Strategy details</CardHeading> */}\n          <HStack justify=\"space-between\">\n            <Text as=\"span\">Vault</Text>\n            <Text as=\"span\">{cellarName}</Text>\n          </HStack>\n          <HStack justify=\"space-between\">\n            <Text as=\"span\">Accounting Asset</Text>\n            {isLoading ? (\n              <Spinner size=\"xs\" />\n            ) : (\n              <HStack spacing={1}>\n                <Avatar\n                  boxSize={7}\n                  src={currentAsset?.src}\n                  name={currentAsset?.alt}\n                  borderWidth={2}\n                  borderColor=\"surface.bg\"\n                  bg=\"surface.bg\"\n                />\n                <Text as=\"span\">{currentAsset?.symbol}</Text>\n              </HStack>\n            )}\n          </HStack>\n        </VStack>\n      </VStack>\n      <FormProvider {...methods}>\n        <VStack\n          as=\"form\"\n          spacing={5}\n          align=\"stretch\"\n          onSubmit={handleSubmit(onSubmit, onError)}\n        >\n          <FormControl isInvalid={isError as boolean | undefined}>\n            <ModalMenu\n              depositTokens={depositTokens}\n              setSelectedToken={setSelectedToken}\n              activeAsset={selectedToken?.address}\n              selectedTokenBalance={selectedTokenBalance}\n              isDisabled={isSubmitting}\n            />\n            <FormErrorMessage color=\"energyYellow\">\n              <Icon\n                p={0.5}\n                mr={1}\n                color=\"surface.bg\"\n                bg=\"red.base\"\n                borderRadius=\"50%\"\n                as={AiOutlineInfo}\n              />\n              {errors.depositAmount?.message ??\n                errors.slippage?.message}\n            </FormErrorMessage>\n          </FormControl>\n          {selectedToken?.symbol !== cellarConfig.baseAsset.symbol ? (\n            <>\n              <CardHeading paddingTop=\"2em\">\n                Transaction details\n              </CardHeading>\n              <HStack justify=\"space-between\">\n                <HStack spacing={1} align=\"center\">\n                  <Tooltip\n                    hasArrow\n                    label=\"The percentage fee you will pay to deposit into the vault. This asset is deposited directly into the vault;\n                  however, it may incur a small fee due to the\n                  management of positions at the smart contract level.\"\n                    bg=\"surface.bg\"\n                    color=\"neutral.300\"\n                    textAlign=\"center\"\n                  >\n                    <HStack spacing={1} align=\"center\">\n                      <CardHeading fontSize=\"small\">\n                        Alternative Deposit Asset Fee\n                      </CardHeading>\n                      <InformationIcon\n                        color=\"neutral.300\"\n                        boxSize={3}\n                      />\n                    </HStack>\n                  </Tooltip>\n                </HStack>\n                {cellarData.depositTokens.list.includes(\n                  selectedToken?.symbol || \"\"\n                ) ? (\n                  <>\n                    {isDepositFeeLoading ? (\n                      <Spinner size=\"md\" paddingRight={\"1em\"} />\n                    ) : (\n                      <Tooltip\n                        hasArrow\n                        label={\n                          depositFee === 0 ? \"No deposit fee.\" : null\n                        }\n                        bg=\"surface.bg\"\n                        color=\"neutral.300\"\n                        textAlign=\"center\"\n                      >\n                        <HStack pr={2}>\n                          {depositFee === 0 ? (\n                            <GreenCheckCircleIcon />\n                          ) : null}\n                          <Text fontFamily={\"inherit\"}>\n                            {depositFee === 0\n                              ? \"None\"\n                              : `${depositFee}%`}\n                          </Text>\n                        </HStack>\n                      </Tooltip>\n                    )}\n                  </>\n                ) : null}\n              </HStack>\n              <HStack\n                justifyContent={\"center\"}\n                p={3}\n                spacing={4}\n                align=\"flex-start\"\n                backgroundColor=\"purple.dark\"\n                border=\"2px solid\"\n                borderRadius={16}\n                borderColor=\"purple.base\"\n              >\n                {selectedToken?.symbol !==\n                cellarConfig.baseAsset.symbol ? (\n                  <Text\n                    fontFamily={\"inherit\"}\n                    fontWeight={\"bold\"}\n                    textAlign=\"center\"\n                  >\n                    {\n                      \"If you deposit an asset other than the accounting asset, there is no guarantee that you will receive the same asset upon withdrawal.\"\n                    }\n                  </Text>\n                ) : null}\n              </HStack>\n            </>\n          ) : null}\n          {needsSwitch && (\n            <BaseButton\n              type=\"button\"\n              isDisabled={isSubmitting}\n              onClick={async () => {\n                try {\n                  if (desiredChainId) {\n                    await switchChainAsync?.({\n                      chainId: desiredChainId,\n                    })\n                  }\n                } catch {}\n              }}\n              fontSize={18}\n              py={4}\n              px={8}\n            >\n              Switch network to proceed\n            </BaseButton>\n          )}\n          <BaseButton\n            type=\"submit\"\n            isDisabled={\n              isDisabled ||\n              (selectedToken?.symbol !==\n                cellarConfig.baseAsset.symbol &&\n                !cellarData.depositTokens.list.includes(\n                  selectedToken?.symbol || \"\"\n                ))\n            }\n            isLoading={isSubmitting}\n            fontSize={21}\n            py={8}\n            px={12}\n          >\n            {isSubmitting ? \"Waiting for wallet…\" : \"Submit\"}\n          </BaseButton>\n          {insufficientBalance && (\n            <Text color=\"red.base\" fontSize=\"sm\">\n              Insufficient balance for the entered amount.\n            </Text>\n          )}\n          {strategyMessages[currentStrategies] ? (\n            strategyMessages[currentStrategies]()\n          ) : (\n            <></>\n          )}\n        </VStack>\n      </FormProvider>\n    </>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/DepositModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/MigrationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/ModalWithExchangeTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/NotifyModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/RestrictedModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/UnbondModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/UnstakeModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/WithdrawModal/SommelierTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isOpen' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModalProps } from \"@chakra-ui/react\"\nimport { WithdrawForm } from \"components/_forms/WithdrawForm\"\nimport { FC } from \"react\"\n\ntype WithdrawModalProps = Pick<ModalProps, \"isOpen\" | \"onClose\">\n\nexport const SommelierTab: FC<WithdrawModalProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  return <WithdrawForm onClose={onClose} />\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/WithdrawModal/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormValues' is defined but never used.","line":5,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModalProps } from \"@chakra-ui/react\"\nimport { FC } from \"react\"\nimport { Token as TokenType } from \"data/tokenConfig\"\n\ninterface FormValues {\n  depositAmount: number\n  slippage: number\n  selectedToken: TokenType\n}\nimport React from \"react\"\nimport { SommelierTab } from \"./SommelierTab\"\nimport { ModalWithExchangeTab } from \"../ModalWithExchangeTab\"\n\ntype WithdrawModalProps = Pick<ModalProps, \"isOpen\" | \"onClose\">\n\nexport const WithdrawModal: FC<WithdrawModalProps> = (props) => {\n  return (\n    <ModalWithExchangeTab\n      heading=\"Withdraw\"\n      sommelierTab={<SommelierTab {...props} />}\n      {...props}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/WithdrawQueueModal/SommelierTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isOpen' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ModalProps } from \"@chakra-ui/react\"\nimport { WithdrawQueueForm } from \"components/_forms/WithdrawQueueForm\"\nimport { FC } from \"react\"\n\ntype WithdrawModalProps = Pick<ModalProps, \"isOpen\" | \"onClose\"> & {\n  onSuccessfulWithdraw?: () => void\n}\n\nexport const SommelierTab: FC<WithdrawModalProps> = ({\n  isOpen,\n  onClose,\n  onSuccessfulWithdraw,\n}) => {\n  return (\n    <WithdrawQueueForm\n      onClose={onClose}\n      onSuccessfulWithdraw={onSuccessfulWithdraw}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_modals/WithdrawQueueModal/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/Page404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageBridge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageCellar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useMemo' is defined but never used.","line":1,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FC, useMemo } from \"react\"\nimport {\n  Heading,\n  HeadingProps,\n  HStack,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { Layout } from \"components/_layout/Layout\"\nimport { Section } from \"components/_layout/Section\"\nimport CellarDetailsCard from \"components/_cards/CellarDetailsCard\"\nimport { CellarStatsYield } from \"components/CellarStatsYield\"\nimport { BreadCrumb } from \"components/BreadCrumb\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { PortfolioCard } from \"components/_cards/PortfolioCard\"\nimport { CellarStatsAutomated } from \"components/CellarStatsAutomated\"\nimport { CellarNameKey, CellarType } from \"data/types\"\nimport {\n  isApyChartEnabled,\n  isEstimatedApyEnable,\n  isTokenPriceChartEnabled,\n} from \"data/uiConfig\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport { TokenPriceChartProvider } from \"data/context/tokenPriceChartContext\"\nimport { TokenPricePerfomanceCard } from \"components/_cards/TokenPricePerfomaceCard\"\nimport { ApyChartProvider } from \"data/context/apyChartContext\"\nimport { ApyPerfomanceCard } from \"components/_cards/ApyPerfomanceCard\"\nimport { isComingSoon } from \"utils/isComingSoon\"\nimport { InfoBanner } from \"components/_banners/InfoBanner\"\nimport { WalletHealthBanner } from \"components/_banners/WalletHealthBanner\"\n\nconst h2Styles: HeadingProps = {\n  as: \"h2\",\n  fontSize: \"2xl\",\n  color: \"neutral.300\",\n  pl: { base: 6, sm: 8 },\n}\n\nexport interface PageCellarProps {\n  id: string\n}\n\nconst PageCellar: FC<PageCellarProps> = ({ id }) => {\n  const cellarConfig = cellarDataMap[id].config\n  const staticCellarData = cellarDataMap[id]\n  const cellarAddress = cellarDataMap[id].config.id\n  const isLarger768 = useBetterMediaQuery(\"(min-width: 768px)\")\n  const isYieldStrategies =\n    staticCellarData.cellarType === CellarType.yieldStrategies\n  const isAutomatedPortfolio =\n    staticCellarData.cellarType === CellarType.automatedPortfolio\n  const notLaunched = isComingSoon(cellarDataMap[id].launchDate)\n\n  return (\n    <Layout chainObj={cellarConfig.chain}>\n      <WalletHealthBanner />\n      {cellarConfig.cellarNameKey === CellarNameKey.TURBO_EETH && (\n        <InfoBanner\n          text={\n            <>\n              Turbo eETH V1 (current vault) is migrating to{\" \"}\n              <a\n                href=\"https://app.sommelier.finance/Turbo-eETHV2/manage\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                style={{ textDecoration: \"underline\" }}\n              >\n                Turbo eETH V2\n              </a>{\" \"}\n              (new vault).\n              <div>\n                Your capital in V1 is already earning the native yield\n                from{\" \"}\n                <a\n                  href=\"https://app.sommelier.finance/Turbo-eETHV2/manage\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={{ textDecoration: \"underline\" }}\n                >\n                  Turbo eETH V2\n                </a>\n                , but new staking programs with SOMM incentives will\n                use the V2 share token.\n              </div>\n              <div>\n                To participate in any new rewards program, you must\n                withdraw your assets from Turbo eETH V1 and deposit\n                into{\" \"}\n                <a\n                  href=\"https://app.sommelier.finance/Turbo-eETHV2/manage\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  style={{ textDecoration: \"underline\" }}\n                >\n                  Turbo eETH V2\n                </a>\n                .\n              </div>\n            </>\n          }\n        />\n      )}\n      <Section>\n        <HStack\n          pb={isLarger768 ? 12 : 0}\n          justify=\"space-between\"\n          align=\"flex-end\"\n          wrap=\"wrap\"\n          rowGap={4}\n        >\n          <VStack spacing={6} align=\"flex-start\">\n            <BreadCrumb cellarName={staticCellarData.name} id={id} />\n            <HStack spacing={4}>\n              <Heading fontSize=\"2.5rem\">\n                {staticCellarData.name}{\" \"}\n              </Heading>\n            </HStack>\n          </VStack>\n          {isYieldStrategies && <CellarStatsYield cellarId={id} />}\n\n          {isAutomatedPortfolio && (\n            <CellarStatsAutomated cellarConfig={cellarConfig} />\n          )}\n        </HStack>\n\n        <VStack spacing={4} align=\"stretch\">\n          <Heading {...h2Styles} pt={12}>\n            Your Portfolio\n          </Heading>\n          <PortfolioCard />\n        </VStack>\n      </Section>\n      <Section px={{ base: 0, md: 4 }}>\n        <VStack spacing={6} align=\"stretch\">\n          {!notLaunched &&\n            isApyChartEnabled(cellarConfig) &&\n            !isEstimatedApyEnable(cellarConfig) && (\n              <ApyChartProvider\n                address={cellarAddress}\n                chain={cellarConfig.chain.id}\n              >\n                <Heading pt={isLarger768 ? 12 : 0} {...h2Styles}>\n                  Vault Perfomance\n                </Heading>\n                <ApyPerfomanceCard />\n              </ApyChartProvider>\n            )}\n          {isTokenPriceChartEnabled(cellarConfig) && (\n            <TokenPriceChartProvider\n              address={cellarAddress}\n              chain={cellarConfig.chain.id}\n            >\n              <Heading pt={isLarger768 ? 12 : 0} {...h2Styles}>\n                Vault Perfomance\n              </Heading>\n              <TokenPricePerfomanceCard />\n            </TokenPriceChartProvider>\n          )}\n\n          <Heading pt={isYieldStrategies ? 0 : 12} {...h2Styles}>\n            Vault Details\n          </Heading>\n          <CellarDetailsCard\n            cellarDataMap={cellarDataMap}\n            cellarId={id}\n          />\n        </VStack>\n      </Section>\n    </Layout>\n  )\n}\n\nexport default PageCellar\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageCellars.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageComingSoon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageHome.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Grid' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HStack' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Spacer' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VStack' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'StrategyTable' is defined but never used.","line":22,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WithdrawalWarningBanner' is defined but never used.","line":50,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MigrationModal' is defined but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InView' is defined but never used.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isSommMinLoading' is assigned a value but never used.","line":125,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'cellarDataMap'. Either exclude it or remove the dependency array. Outer scope values like 'cellarDataMap' aren't valid dependencies because mutating them doesn't re-render the component.","line":198,"column":6,"nodeType":"ArrayExpression","endLine":198,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[6044,6059],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'constantOrderedAllUniqueAssetsArray' is assigned a value but never used.","line":201,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectedMiscFilters' is assigned a value but never used.","line":239,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasFiltersChanged' is assigned a value but never used.","line":262,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":262,"endColumn":26},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'initialChainIds', 'initialDepositAssets', 'initialShowDeprecated', and 'initialShowIncentivised'. Either include them or remove the dependency array.","line":275,"column":6,"nodeType":"ArrayExpression","endLine":280,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [initialChainIds, initialDepositAssets, initialShowDeprecated, initialShowIncentivised, selectedChainIds, selectedDepositAssets, showDeprecated, showIncentivised]","fix":{"range":[8416,8512],"text":"[initialChainIds, initialDepositAssets, initialShowDeprecated, initialShowIncentivised, selectedChainIds, selectedDepositAssets, showDeprecated, showIncentivised]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'resetFilters' is assigned a value but never used.","line":282,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":21},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'initialChainIds', 'initialDepositAssets', 'initialShowDeprecated', and 'initialShowIncentivised'. Either include them or remove the dependency array.","line":301,"column":6,"nodeType":"ArrayExpression","endLine":301,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [initialChainIds, initialDepositAssets, initialShowDeprecated, initialShowIncentivised]","fix":{"range":[9127,9129],"text":"[initialChainIds, initialDepositAssets, initialShowDeprecated, initialShowIncentivised]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","line":374,"column":6,"nodeType":"ArrayExpression","endLine":374,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [data, isConnected, userBalances.data]","fix":{"range":[11404,11450],"text":"[data, isConnected, userBalances.data]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":386,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":386,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11861,11864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11861,11864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'netValue' is assigned a value but never used.","line":406,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13630,13633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13630,13633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'userBalances.data'. Either exclude it or remove the dependency array.","line":443,"column":6,"nodeType":"ArrayExpression","endLine":449,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [strategyData, isConnected, userDataAllStrategies?.strategies, sommNativeMin]","fix":{"range":[13663,13785],"text":"[strategyData, isConnected, userDataAllStrategies?.strategies, sommNativeMin]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WithdrawalStatusPanel' is assigned a value but never used.","line":451,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":451,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Button,\n  Center,\n  Grid,\n  HStack,\n  Spacer,\n  Text,\n  VStack,\n  Collapse,\n} from \"@chakra-ui/react\"\nimport { ErrorCard } from \"components/_cards/ErrorCard\"\nimport { StrategyDesktopColumn } from \"components/_columns/StrategyDesktopColumn\"\nimport { StrategyMobileColumn } from \"components/_columns/StrategyMobileColumn\"\nimport { StrategyTabColumn } from \"components/_columns/StrategyTabColumn\"\nimport { LayoutWithSidebar } from \"components/_layout/LayoutWithSidebar\"\nimport { SommelierTab } from \"components/_modals/DepositModal/SommelierTab\"\nimport {\n  TransparentSkeleton,\n  LightSkeleton,\n} from \"components/_skeleton\"\nimport { StrategyTable } from \"components/_tables/StrategyTable\"\nimport SommNativeList from \"components/SommNativeList\"\nimport { useAllStrategiesData } from \"data/hooks/useAllStrategiesData\"\nimport {\n  DepositModalType,\n  useDepositModalStore,\n} from \"data/hooks/useDepositModalStore\"\nimport useBetterMediaQuery from \"hooks/utils/useBetterMediaQuery\"\nimport {\n  useMemo,\n  useState,\n  useCallback,\n  useEffect,\n  Suspense,\n} from \"react\"\nimport { chainConfig } from \"src/data/chainConfig\"\nimport { SymbolPathPair } from \"components/_filters/DepositTokenFilter\"\nimport { cellarDataMap } from \"src/data/cellarDataMap\"\nimport { CellarData } from \"src/data/types\"\nimport { MiscFilterProp } from \"components/_filters/MiscFilter\"\n\nimport { add, isBefore } from \"date-fns\"\nimport { useAccount } from \"wagmi\"\nimport { StrategyData } from \"data/actions/types\"\nimport { useUserBalances } from \"data/hooks/useUserBalances\"\nimport { useUserDataAllStrategies } from \"data/hooks/useUserDataAllStrategies\"\nimport { useSommNativeVaults } from \"data/hooks/useSommNativeVaults\"\nimport TopLaunchBanner from \"components/_sections/TopLaunchBanner\"\nimport WithdrawalWarningBanner from \"components/_sections/WithdrawalWarningBanner\"\nimport { sortVaultsForMainPage } from \"utils/sortVaults\"\n\nimport SectionHeader from \"components/_sections/SectionHeader\"\nimport { alphaSteth } from \"data/strategies/alpha-steth\"\nimport { MigrationModal } from \"components/_modals/MigrationModal\"\nimport { WalletHealthBanner } from \"components/_banners/WalletHealthBanner\"\nimport dynamic from \"next/dynamic\"\nimport { InView } from \"react-intersection-observer\"\nimport { ChevronUpIcon, ChevronDownIcon } from \"components/_icons\"\nimport {\n  restoreLegacyVisibility,\n  saveLegacyVisibility,\n} from \"utils/legacyVisibility\"\n\n// Dynamically import the legacy vaults section with no SSR\nconst LegacyVaultsSection = dynamic(\n  () => import(\"components/legacy/LegacyVaultsSection\"),\n  { ssr: false, loading: () => null }\n)\n\n// Defer heavy modals until opened\nconst DynamicModalWithExchangeTab = dynamic(\n  () =>\n    import(\"components/_modals/ModalWithExchangeTab\").then((m) => ({\n      default: m.ModalWithExchangeTab,\n    })),\n  { ssr: false, loading: () => null }\n)\nconst DynamicWithdrawModal = dynamic(\n  () =>\n    import(\"components/_modals/WithdrawModal\").then((m) => ({\n      default: m.WithdrawModal,\n    })),\n  { ssr: false, loading: () => null }\n)\nconst DynamicMigrationModal = dynamic(\n  () =>\n    import(\"components/_modals/MigrationModal\").then((m) => ({\n      default: m.MigrationModal,\n    })),\n  { ssr: false, loading: () => null }\n)\n\nexport const PageHome = () => {\n  const [showLegacy, setShowLegacy] = useState<boolean>(\n    restoreLegacyVisibility()\n  )\n\n  useEffect(() => {\n    saveLegacyVisibility(showLegacy)\n  }, [showLegacy])\n  const {\n    data,\n    isLoading,\n    isError,\n    refetch,\n    isFetching,\n    isRefetching,\n  } = useAllStrategiesData()\n  const isMobile = useBetterMediaQuery(\"(max-width: 900px)\")\n  const isTab = useBetterMediaQuery(\"(max-width: 1600px)\")\n  const isDesktop = !isTab && !isMobile\n\n  const {\n    isOpen,\n    onClose,\n    setIsOpen,\n    type: modalType,\n    id,\n  } = useDepositModalStore()\n\n  const { isConnected } = useAccount()\n  const { userBalances } = useUserBalances()\n  const { data: userDataAllStrategies } = useUserDataAllStrategies()\n  const { data: sommNativeMin, isLoading: isSommMinLoading } =\n    useSommNativeVaults()\n\n  const columns = useMemo(() => {\n    return isDesktop\n      ? StrategyDesktopColumn({\n          onDepositModalOpen: ({\n            id,\n            type,\n          }: {\n            id: string\n            type: DepositModalType\n          }) => {\n            setIsOpen({\n              id,\n              type,\n            })\n          },\n        })\n      : isTab && !isMobile\n      ? StrategyTabColumn({\n          onDepositModalOpen: ({\n            id,\n            type,\n          }: {\n            id: string\n            type: DepositModalType\n          }) => {\n            setIsOpen({\n              id,\n              type,\n            })\n          },\n        })\n      : StrategyMobileColumn()\n  }, [isDesktop, isTab, isMobile, setIsOpen])\n\n  const allChainIds = chainConfig.map((chain) => chain.id)\n\n  //Get all deposit assets from all strategies and turn it into a set of unique values\n  const {\n    uniqueAssetsMap,\n    constantAllUniqueAssetsArray,\n  }: {\n    uniqueAssetsMap: Record<string, SymbolPathPair>\n    constantAllUniqueAssetsArray: SymbolPathPair[]\n  } = useMemo(() => {\n    const allDepositAssets = Object.values(cellarDataMap)\n      .map((cellarData: CellarData): SymbolPathPair[] => {\n        // Don't include deprecated strategies\n        if (cellarData.deprecated) {\n          return []\n        }\n        return cellarData.depositTokens.list.map((symbol) => ({\n          symbol: symbol,\n          path: `/assets/icons/${symbol.toLowerCase()}.png`,\n        }))\n      })\n      .flat()\n\n    // Create an object to ensure uniqueness\n    const uniqueAssetsMap: Record<string, SymbolPathPair> = {}\n\n    allDepositAssets.forEach((pair: SymbolPathPair) => {\n      if (!uniqueAssetsMap[pair.symbol]) {\n        uniqueAssetsMap[pair.symbol] = pair\n      }\n    })\n    // Copy the unique assets into a constants array\n    const constantAllUniqueAssetsArray =\n      Object.values(uniqueAssetsMap)\n\n    return { uniqueAssetsMap, constantAllUniqueAssetsArray }\n  }, [cellarDataMap])\n\n  // Always float up \"WETH\", \"USDC\", \"WBTC\", \"SOMM\", \"stETH\" to the top of the list in that order for the inital render\n  const constantOrderedAllUniqueAssetsArray = useMemo(() => {\n    return [\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) => pair.symbol === \"WETH\"\n      ),\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) => pair.symbol === \"USDC\"\n      ),\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) => pair.symbol === \"WBTC\"\n      ),\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) => pair.symbol === \"SOMM\"\n      ),\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) => pair.symbol === \"stETH\"\n      ),\n      ...constantAllUniqueAssetsArray.filter(\n        (pair) =>\n          pair.symbol !== \"WETH\" &&\n          pair.symbol !== \"USDC\" &&\n          pair.symbol !== \"WBTC\" &&\n          pair.symbol !== \"SOMM\" &&\n          pair.symbol !== \"stETH\"\n      ),\n    ]\n  }, [constantAllUniqueAssetsArray])\n\n  const [selectedChainIds, setSelectedChainIds] =\n    useState<string[]>(allChainIds)\n\n  const [selectedDepositAssets, setSelectedDepositAssets] =\n    useState<Record<string, SymbolPathPair>>(uniqueAssetsMap)\n\n  const [showDeprecated, setShowDeprecated] = useState<boolean>(false)\n  const [showIncentivised, setShowIncentivised] =\n    useState<boolean>(false)\n\n  const [selectedMiscFilters, setSelectedMiscFilters] = useState<\n    MiscFilterProp[]\n  >([\n    {\n      name: \"Incentivised\",\n      checked: showIncentivised,\n      stateSetFunction: setShowIncentivised,\n    },\n    {\n      name: \"Deprecated\",\n      checked: showDeprecated,\n      stateSetFunction: setShowDeprecated,\n    },\n  ])\n\n  // Reset Button Helpers, consider moving to a separate file\n\n  // All the params necessary for the reset button (initial filter states)\n  const initialChainIds = allChainIds\n  const initialDepositAssets = uniqueAssetsMap\n  const initialShowDeprecated = false\n  const initialShowIncentivised = false\n\n  const hasFiltersChanged = useMemo(() => {\n    return (\n      !(\n        JSON.stringify(selectedChainIds) !==\n        JSON.stringify(initialChainIds)\n      ) ||\n      !(\n        JSON.stringify(selectedDepositAssets) !==\n        JSON.stringify(initialDepositAssets)\n      ) ||\n      showDeprecated !== initialShowDeprecated ||\n      showIncentivised !== initialShowIncentivised\n    )\n  }, [\n    selectedChainIds,\n    selectedDepositAssets,\n    showDeprecated,\n    showIncentivised,\n  ])\n\n  const resetFilters = useCallback(() => {\n    setSelectedChainIds(initialChainIds)\n    setSelectedDepositAssets(initialDepositAssets)\n    setShowDeprecated(initialShowDeprecated)\n    setShowIncentivised(initialShowIncentivised)\n\n    // Update selectedMiscFilters to reflect the reset state in MiscFilter\n    setSelectedMiscFilters([\n      {\n        name: \"Incentivised\",\n        checked: initialShowIncentivised,\n        stateSetFunction: setShowIncentivised,\n      },\n      {\n        name: \"Deprecated\",\n        checked: initialShowDeprecated,\n        stateSetFunction: setShowDeprecated,\n      },\n    ])\n  }, [])\n\n  const strategyData = useMemo(() => {\n    const filteredData = data || []\n    return filteredData.sort((a, b) => {\n      // Move Alpha stETH to the top of the list\n      if (a?.slug === \"Alpha-stETH\") {\n        return -1\n      }\n      if (b?.slug === \"Alpha-stETH\") {\n        return 1\n      }\n\n      // 1. Priority - strategies deposit assets that user holds\n      if (isConnected && userBalances.data) {\n        for (const balance of userBalances.data) {\n          const doesStrategyHaveAsset = (strategy: StrategyData) =>\n            strategy?.depositTokens?.some((asset) => {\n              // Guard against undefined/null assets\n              if (!asset || !balance.symbol) {\n                return false\n              }\n\n              // if user has ETH consider it as they had WETH\n              if (\n                balance.symbol.toUpperCase() === \"ETH\" &&\n                asset.toUpperCase() === \"WETH\"\n              ) {\n                return true\n              }\n              return (\n                asset.toUpperCase() === balance.symbol.toUpperCase()\n              )\n            })\n          const strategyAHasAsset = doesStrategyHaveAsset(a)\n          const strategyBHasAsset = doesStrategyHaveAsset(b)\n\n          if (\n            (strategyAHasAsset || strategyBHasAsset) &&\n            !(strategyAHasAsset && strategyBHasAsset)\n          ) {\n            return strategyAHasAsset ? -1 : 1\n          }\n        }\n      }\n      // 2. Priority - new strategies\n      const isNewStrategy = (strategy: StrategyData) =>\n        isBefore(\n          new Date(),\n          add(new Date(strategy?.launchDate ?? \"\"), { weeks: 4 })\n        )\n      const isANew = isNewStrategy(a)\n      const isBNew = isNewStrategy(b)\n      if (isANew && isBNew) {\n        return (\n          new Date(b?.launchDate ?? \"\").getTime() -\n          new Date(a?.launchDate ?? \"\").getTime()\n        )\n      } else if (isANew || isBNew) {\n        return isANew ? -1 : 1\n      }\n\n      // 3. Priority - Somm rewards\n      //if ((a?.rewardsApy || b?.rewardsApy) && !(a?.rewardsApy && b?.rewardsApy)) {\n      //return a?.rewardsApy ? -1 : 1;\n      //}\n\n      // 4. Priority - TVL\n      return (\n        parseFloat(b?.tvm?.value ?? \"\") -\n        parseFloat(a?.tvm?.value ?? \"\")\n      )\n    })\n  }, [data?.length, userBalances.data, isConnected])\n\n  const bannerTargetDate: Date =\n    alphaSteth.launchDate ??\n    new Date(Date.UTC(2025, 7, 19, 0, 0, 0, 0))\n\n  const { sommNative, legacy } = useMemo(() => {\n    const list = strategyData || []\n    const sommNative = list.filter((v) => v?.isSommNative)\n    const legacy = list.filter((v) => !v?.isSommNative)\n\n    // Normalize to util input shape and sort deterministically\n    const mapToSortable = (arr: any[]) =>\n      arr.map((v) => {\n        // Find matching user data for this vault\n        const userData = userDataAllStrategies?.strategies?.find(\n          (userStrategy) => {\n            const strategyAddress =\n              userStrategy?.userStrategyData?.strategyData?.address\n            const strategyChain =\n              userStrategy?.userStrategyData?.strategyData?.config\n                ?.chain?.id\n            const vaultAddress = v?.config?.cellar?.address\n            const vaultChain = v?.config?.chain?.id\n\n            return (\n              strategyAddress === vaultAddress &&\n              strategyChain === vaultChain\n            )\n          }\n        )\n\n        const netValue = Number(\n          userData?.userStrategyData?.userData?.netValue?.value ?? 0\n        )\n\n        // Merge user data into the strategy data\n        const enrichedVault = {\n          ...v,\n          netValue: userData?.userStrategyData?.userData?.netValue,\n          userStrategyData: userData?.userStrategyData,\n        }\n\n        return {\n          ref: enrichedVault,\n          name: v?.name,\n          tvl: v?.tvm?.formatted,\n          netValue:\n            userData?.userStrategyData?.userData?.netValue?.formatted,\n        }\n      })\n\n    const sortedLegacy = sortVaultsForMainPage(\n      mapToSortable(legacy),\n      { connected: isConnected }\n    ).map((x) => x.ref)\n\n    const sortedSomm = sortVaultsForMainPage(\n      mapToSortable(sommNative),\n      { connected: isConnected }\n    ).map((x) => x.ref)\n\n    // If minimal Somm-native list is available, prefer it to avoid heavy data needs\n    const preferredSomm =\n      Array.isArray(sommNativeMin) && sommNativeMin.length\n        ? sommNativeMin\n        : sortedSomm\n\n    return { sommNative: preferredSomm as any, legacy: sortedLegacy }\n  }, [\n    strategyData,\n    isConnected,\n    userBalances?.data,\n    userDataAllStrategies?.strategies,\n    sommNativeMin,\n  ])\n\n  const WithdrawalStatusPanel = () => (\n    <Box\n      mt={6}\n      mb={4}\n      borderWidth=\"1px\"\n      borderColor=\"surface.secondary\"\n      rounded=\"xl\"\n      px={4}\n      py={3}\n      bg=\"surface.primary\"\n    >\n      <Text fontSize=\"sm\" color=\"neutral.300\">\n        Legacy vaults may have paused deposits. Review withdrawal\n        options in each vault’s details.\n      </Text>\n    </Box>\n  )\n\n  // ColumnHeaders removed (no longer used)\n\n  const loading = isFetching || isRefetching || isLoading\n  return (\n    <LayoutWithSidebar>\n      <WalletHealthBanner />\n      <TopLaunchBanner targetDate={bannerTargetDate} blogHref=\"#\" />\n      {/*\n        <InfoBanner\n          text={\n            \"A new SOMM incentive proposal for Real Yield ETH on Arbitrum is progressing through governance. If it passes, rewards will begin on March 17.\"\n            \"New incentive programs for Real Yield ETH (on Ethereum) Real Yield BTC and Real Yield USD (on Arbitrum) are progressing through governance. If they pass, rewards will begin flowing on March 24\"\n          }\n        />\n      }\n      */}\n      {/* Filters removed – always show full vault list */}\n      <TransparentSkeleton\n        height={loading ? \"400px\" : \"auto\"}\n        w=\"full\"\n        borderRadius={\"1em\"}\n        isLoaded={!loading}\n      >\n        {isError ? (\n          <ErrorCard message=\"\" py=\"100px\">\n            <Center>\n              <Button\n                w=\"100px\"\n                variant=\"outline\"\n                onClick={() => refetch()}\n              >\n                Retry\n              </Button>\n            </Center>\n          </ErrorCard>\n        ) : (\n          <>\n            {sommNative.length > 0 && (\n              <>\n                <SectionHeader title=\"Somm-native Vaults\" />\n                <Suspense fallback={<LightSkeleton height=\"200px\" />}>\n                  <SommNativeList columns={columns} />\n                </Suspense>\n              </>\n            )}\n\n            {/* Legacy Vaults Toggle Button */}\n            {legacy.length > 0 && (\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                mt={6}\n                mb={4}\n              >\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  leftIcon={\n                    showLegacy ? (\n                      <ChevronUpIcon />\n                    ) : (\n                      <ChevronDownIcon />\n                    )\n                  }\n                  onClick={() => {\n                    setShowLegacy((v) => !v)\n                    if (showLegacy) {\n                      document\n                        .getElementById(\"legacy-vaults\")\n                        ?.scrollIntoView({\n                          block: \"start\",\n                          behavior: \"smooth\",\n                        })\n                    }\n                  }}\n                  aria-controls=\"legacy-vaults\"\n                  aria-expanded={showLegacy}\n                  alignSelf=\"center\"\n                  _hover={{\n                    borderColor: \"purple.base\",\n                    color: \"purple.base\",\n                  }}\n                >\n                  {showLegacy\n                    ? \"Hide Legacy Vaults\"\n                    : `Show Legacy Vaults${\n                        legacy.length > 0 ? ` (${legacy.length})` : \"\"\n                      }`}\n                </Button>\n              </Box>\n            )}\n\n            {/* Legacy Vaults Collapsible Section */}\n            <Collapse\n              in={showLegacy}\n              animateOpacity\n              style={{ overflow: \"visible\" }}\n            >\n              <Box as=\"section\" id=\"legacy-vaults\" mt={4}>\n                <LegacyVaultsSection\n                  legacyVaults={legacy}\n                  enabled={showLegacy}\n                />\n              </Box>\n            </Collapse>\n          </>\n        )}\n\n        {id && (\n          <>\n            <DynamicModalWithExchangeTab\n              heading=\"Deposit\"\n              isOpen={isOpen && modalType === \"deposit\"}\n              onClose={onClose}\n              sommelierTab={\n                <SommelierTab\n                  isOpen={isOpen && modalType === \"deposit\"}\n                  onClose={onClose}\n                />\n              }\n            />\n            <DynamicWithdrawModal\n              isOpen={isOpen && modalType === \"withdraw\"}\n              onClose={onClose}\n            />\n            <DynamicMigrationModal\n              isOpen={isOpen && modalType === \"migrate\"}\n              onClose={onClose}\n            />\n          </>\n        )}\n      </TransparentSkeleton>\n    </LayoutWithSidebar>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PagePrivacyPolicy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageSnapshot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageStrategy.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'faqData' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sectionCellars' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sectionStrategies' is defined but never used.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Box, Link, Text } from \"@chakra-ui/react\"\nimport { HeroStrategy } from \"components/HeroStrategy\"\nimport { Highlight } from \"components/Highlight\"\nimport { ArrowLeftIcon } from \"components/_icons\"\nimport { Layout } from \"components/_layout/Layout\"\nimport { NextPage } from \"next\"\nimport { useRouter } from \"next/router\"\nimport { CustomFaqSection, HomeWithImages } from \"types/sanity\"\nimport { WalletHealthBanner } from \"components/_banners/WalletHealthBanner\"\n\nexport interface StrategyLandingPageProps {\n  id: string\n  faqData: CustomFaqSection\n  sectionCellars: HomeWithImages[\"sectionCellars\"]\n  sectionStrategies: HomeWithImages[\"sectionStrategies\"]\n}\n\nexport const PageStrategy: NextPage<StrategyLandingPageProps> = ({\n  id,\n  faqData,\n  sectionCellars,\n  sectionStrategies,\n}) => {\n  const router = useRouter()\n  return (\n    <Layout>\n      <WalletHealthBanner />\n      <Box px={{ base: 4, sm: 0 }}>\n        <Link\n          mb={4}\n          color=\"neutral.300\"\n          href={`/strategies/${id}/manage`}\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          <ArrowLeftIcon />\n          <Text ml={2}>Back</Text>\n        </Link>\n        <HeroStrategy id={id} />\n        <Highlight id={id} />\n        {/*<Cellars data={sectionCellars} mt={52} />*/}\n        {/*<Strategy data={sectionStrategies} mt={52} />*/}\n        {/*<FAQStrategy data={faqData} mt={52} />*/}\n      </Box>\n    </Layout>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_pages/PageUserTerms.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sections/SectionHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sections/TopLaunchBanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lidoFallbackPng' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Stack,\n  Text,\n  Button,\n  Link,\n  Flex,\n  HStack,\n  Grid,\n  GridItem,\n} from \"@chakra-ui/react\"\nimport NextLink from \"next/link\"\nimport * as React from \"react\"\nimport Countdown from \"components/_common/Countdown\"\nimport NextImage from \"next/image\"\n\ntype Props = {\n  targetDate: Date\n  blogHref?: string\n}\n\nexport default function TopLaunchBanner({\n  targetDate,\n  blogHref = \"#\",\n}: Props) {\n  const lidoSrc = \"/assets/images/eth-lido-uni.svg\"\n  const lidoFallbackPng = \"/assets/icons/lido.png\"\n\n  // Simple expandable copy helper for 3-line clamp -> expand inline\n  function ExpandableBody({ text }: { text: string }) {\n    const [expanded, setExpanded] = React.useState(false)\n    return (\n      <Box mt={{ base: 3, md: 4 }}>\n        <Text\n          textStyle=\"bodyMd\"\n          noOfLines={expanded ? undefined : 3}\n          display=\"-webkit-box\"\n          sx={{\n            WebkitLineClamp: expanded ? \"unset\" : 3,\n            WebkitBoxOrient: \"vertical\",\n          }}\n        >\n          {text}\n        </Text>\n        <Button\n          onClick={() => setExpanded((v) => !v)}\n          size=\"sm\"\n          variant=\"link\"\n          color=\"chip.fg\"\n          mt={1}\n        >\n          {expanded ? \"Read less\" : \"Read more\"}\n        </Button>\n      </Box>\n    )\n  }\n\n  return (\n    <Box\n      p=\"2px\"\n      rounded=\"2xl\"\n      bgGradient=\"linear(to-r, #6a0dad, #9b4dff)\"\n      mb={{ base: 6, md: 8 }}\n    >\n      <Box\n        as=\"section\"\n        bgGradient=\"linear(to-r, banner.bg.start 0%, banner.bg.mid 45%, banner.bg.end 100%)\"\n        rounded=\"2xl\"\n        px={{ base: 4, md: 6 }}\n        py={{ base: 4, md: 6, lg: 7 }}\n        position=\"relative\"\n        overflow=\"hidden\"\n      >\n        {/* GG icon bottom-right, non-blocking, hidden < md */}\n        <Box\n          aria-hidden\n          position=\"absolute\"\n          right={{ base: 6, md: 6 }}\n          bottom={{ base: 6, md: 6 }}\n          pointerEvents=\"none\"\n          display={{ base: \"none\", md: \"block\" }}\n        >\n          <NextImage\n            src=\"/assets/icons/GG.png\"\n            alt=\"\"\n            width={96}\n            height={96}\n            priority={false}\n          />\n        </Box>\n\n        {/* Use Grid (not SimpleGrid) so templateColumns is respected */}\n        <Grid\n          templateColumns={{\n            base: \"1fr\",\n            lg: \"minmax(0,1fr) minmax(260px,340px)\",\n          }}\n          gap={{ base: 5, lg: 8 }}\n          alignItems=\"start\"\n        >\n          {/* LEFT COLUMN */}\n          <GridItem>\n            <Stack spacing={4} maxW=\"860px\">\n              {/* Single pill header (Launching + Lido) */}\n              <HStack\n                spacing={3}\n                bg=\"chip.bg\"\n                px={3}\n                py={1}\n                rounded=\"full\"\n                w=\"fit-content\"\n              >\n                <NextImage\n                  src=\"/assets/icons/lido.png\"\n                  alt=\"Lido\"\n                  width={32}\n                  height={32}\n                  priority={false}\n                />\n                <Text\n                  fontSize={{ base: \"xs\", md: \"sm\" }}\n                  fontWeight={600}\n                  color=\"chip.fg\"\n                >\n                  Launching August 19\n                </Text>\n\n                {/* keep as Link (your current file links to lido.fi); remove Link wrapper if you want non-interactive */}\n                <Link\n                  href=\"https://lido.fi\"\n                  isExternal\n                  _hover={{ textDecoration: \"none\" }}\n                  aria-label=\"Lido official website\"\n                >\n                  <HStack spacing={1.5} whiteSpace=\"nowrap\">\n                    <NextImage\n                      src={lidoSrc}\n                      alt=\"Lido\"\n                      width={20}\n                      height={20}\n                      priority={false}\n                    />\n                    <Text\n                      fontSize={{ base: \"xs\", md: \"sm\" }}\n                      fontWeight={600}\n                      color=\"chip.fg\"\n                    >\n                      Powered by Lido\n                    </Text>\n                  </HStack>\n                </Link>\n              </HStack>\n\n              {/* Heading */}\n              <Text\n                as=\"h2\"\n                textStyle=\"heroTitle\"\n                fontSize={{ base: \"3xl\", md: \"5xl\" }}\n                color=\"text.primary\"\n                mb={{ base: 2, md: 3 }}\n              >\n                Alpha stETH Vault\n              </Text>\n\n              {/* One-line value proposition under title (clamped to 1 line) */}\n              <Text\n                fontSize={{ base: \"sm\", md: \"md\" }}\n                color=\"text.secondary\"\n                noOfLines={1}\n              >\n                Dynamic leveraged stETH strategy powered by Somm +\n                Lido.\n              </Text>\n\n              {/* Mobile/Tablet countdown directly under heading */}\n              <Box display={{ base: \"block\", lg: \"none\" }} mb={4}>\n                <Countdown\n                  size=\"lg\"\n                  targetDate={targetDate}\n                />\n              </Box>\n\n              {/* Paragraph with clamp + Read more disclosure */}\n              <ExpandableBody\n                text={\n                  \"Built with Lido, Alpha stETH dynamically reallocates stETH across Aave, Morpho, Unichain, and Mellow to capture sustainable rewards. Automated risk controls and off-chain strategy computation ensure secure, efficient deployment.\"\n                }\n              />\n\n              {/* Key-point pills (non-interactive) */}\n              <HStack wrap=\"wrap\" spacing={2} mb={5}>\n                {[\n                  \"Blue-chip DeFi exposure\",\n                  \"stETH rewards made simple\",\n                  \"No legacy vault dependency\",\n                ].map((k) => (\n                  <Text\n                    key={k}\n                    as=\"span\"\n                    bg=\"chip.bg\"\n                    color=\"chip.fg\"\n                    rounded=\"full\"\n                    px={3}\n                    py={1}\n                    fontSize=\"sm\"\n                    cursor=\"default\"\n                  >\n                    {k}\n                  </Text>\n                ))}\n              </HStack>\n\n              {/* CTAs */}\n              <HStack spacing={{ base: 3, md: 4 }}>\n                <Button\n                  as={NextLink}\n                  href=\"/strategies/Alpha-stETH/manage\"\n                  size=\"md\"\n                  height=\"40px\"\n                  px=\"20px\"\n                  fontWeight={600}\n                  fontSize=\"sm\"\n                  bg=\"cta.filled.bg\"\n                  color=\"cta.filled.fg\"\n                  _hover={{ bg: \"whiteAlpha.800\" }}\n                  _active={{ bg: \"whiteAlpha.900\" }}\n                  _focusVisible={{\n                    boxShadow:\n                      \"0 0 0 3px var(--chakra-colors-purple-base)\",\n                  }}\n                >\n                  Explore Vault\n                </Button>\n\n                <Button\n                  as={Link}\n                  href={blogHref}\n                  size=\"md\"\n                  height=\"40px\"\n                  px=\"20px\"\n                  fontWeight={600}\n                  fontSize=\"sm\"\n                  variant=\"outline\"\n                  bg=\"transparent\"\n                  color=\"cta.outline.fg\"\n                  borderColor=\"cta.outline.br\"\n                  borderWidth=\"2px\"\n                  _hover={{\n                    bg: \"white\",\n                    color: \"black\",\n                    borderColor: \"white\",\n                  }}\n                  _active={{\n                    bg: \"white\",\n                    color: \"black\",\n                    borderColor: \"white\",\n                  }}\n                  _focusVisible={{\n                    boxShadow:\n                      \"0 0 0 3px var(--chakra-colors-purple-base)\",\n                  }}\n                >\n                  View Strategy Blog\n                </Button>\n              </HStack>\n            </Stack>\n          </GridItem>\n\n          {/* RIGHT COLUMN — desktop countdown */}\n          <GridItem display={{ base: \"none\", lg: \"block\" }}>\n            <Flex align=\"flex-start\" justify=\"flex-start\">\n              <Box\n                position=\"relative\"\n                zIndex={1}\n                maxW=\"100%\"\n                overflow=\"hidden\"\n                pr={2}\n              >\n                <Countdown size=\"lg\" targetDate={targetDate} />\n              </Box>\n            </Flex>\n          </GridItem>\n        </Grid>\n\n        {/* Scroll cue arrow removed per request */}\n      </Box>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sections/WithdrawalStatusPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sections/WithdrawalWarningBanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[143,146],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[143,146],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Text,\n  Heading,\n  Link,\n  HStack,\n  OrderedList,\n  ListItem,\n  Icon,\n} from \"@chakra-ui/react\"\n\nfunction WarningIcon(props: any) {\n  return (\n    <Icon viewBox=\"0 0 24 24\" {...props}>\n      <path fill=\"currentColor\" d=\"M1 21h22L12 2 1 21z\" />\n      <path fill=\"currentColor\" d=\"M13 16h-2v2h2zm0-6h-2v4h2z\" />\n    </Icon>\n  )\n}\n\nexport default function WithdrawalWarningBanner() {\n  return (\n    <Box\n      border=\"1px solid\"\n      borderColor=\"orange.500\"\n      bg=\"orange.900\"\n      color=\"orange.100\"\n      borderRadius=\"lg\"\n      p={6}\n      mt={8}\n    >\n      <HStack spacing={3} mb={4} align=\"center\">\n        <WarningIcon color=\"orange.400\" boxSize={5} />\n        <Heading size=\"md\" color=\"orange.300\">\n          Withdrawals – Legacy Vaults\n        </Heading>\n      </HStack>\n\n      <Text mb={4}>\n        These vaults are currently undergoing deleveraging due to ETH\n        liquidity constraints. They are managed by Veda (formerly\n        Seven Seas).\n      </Text>\n\n      <Text fontWeight=\"semibold\" mb={2}>\n        For vault-specific updates, contact Veda directly:\n      </Text>\n      <HStack spacing={6} mb={4}>\n        <Link\n          href=\"https://discord.com/invite/hT4FZZTBdq\"\n          isExternal\n          color=\"blue.300\"\n        >\n          Veda Discord\n        </Link>\n        <Link\n          href=\"https://x.com/veda_labs\"\n          isExternal\n          color=\"blue.300\"\n        >\n          Veda X\n        </Link>\n      </HStack>\n\n      <Text fontWeight=\"semibold\" mb={2}>\n        Withdrawal Status (as of Aug 13):\n      </Text>\n      <OrderedList spacing={2} mb={4} pl={4}>\n        <ListItem>\n          ~800 ETH of liquidity is being unlocked and going live\n        </ListItem>\n        <ListItem>\n          A 0.25 bps withdrawal discount has been added to help manage\n          deleveraging\n        </ListItem>\n        <ListItem>Withdrawal queue UI has been updated</ListItem>\n        <ListItem>\n          <Text as=\"span\" fontWeight=\"bold\">\n            Recommended:\n          </Text>{\" \"}\n          If you already submitted a withdrawal, consider replacing it\n          to benefit from the new logic and faster processing\n        </ListItem>\n      </OrderedList>\n\n      <Text fontWeight=\"semibold\" mb={2}>\n        For general Somm support or questions about new vaults:\n      </Text>\n      <HStack spacing={6}>\n        <Link href=\"https://t.me/getsomm\" isExternal color=\"blue.300\">\n          Telegram\n        </Link>\n        <Link\n          href=\"https://x.com/sommfinance\"\n          isExternal\n          color=\"blue.300\"\n        >\n          X\n        </Link>\n      </HStack>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sidebar/PortofolioItem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is assigned a value but never used.","line":57,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":38}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  StackProps,\n  HStack,\n  VStack,\n  Text,\n  Stack,\n  Box,\n  Tooltip,\n  Img,\n} from \"@chakra-ui/react\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { useRouter } from \"next/router\"\nimport { FC } from \"react\"\nimport { formatUSD, toEther } from \"utils/formatCurrency\"\nimport { DIRECT, landingType } from \"utils/landingType\"\nimport { useCoinGeckoPrice } from \"data/hooks/useCoinGeckoPrice\"\nimport { showNetValueInAsset } from \"data/uiConfig\"\nimport { tokenConfig } from \"data/tokenConfig\"\n\ninterface PortofolioItemProps extends StackProps {\n  icon: string\n  title: string\n  netValueUsd: string\n  netValueInAsset: number\n  tokenPrice: {\n    value: number | string\n    formatted: string\n  }\n  bondedToken: number\n  slug: string\n  description: string\n  symbol: string\n}\n\nexport const PortofolioItem: FC<PortofolioItemProps> = ({\n  icon,\n  title,\n  netValueUsd,\n  netValueInAsset,\n  tokenPrice,\n  slug,\n  description,\n  bondedToken,\n  symbol,\n  ...props\n}) => {\n  const cellarData = cellarDataMap[slug]\n\n  const { lpToken } = useUserBalance(cellarData.config)\n  const { data: lpTokenData } = lpToken\n\n  const baseAsset = tokenConfig.find(\n    (token) => token.symbol === symbol && cellarData.config.chain.id === token.chain\n  )!\n\n  const { data: coinGeckoPrice, error } = useCoinGeckoPrice(\n    baseAsset\n  )\n\n  const router = useRouter()\n  return (\n    <Tooltip\n      label={description}\n      color=\"neutral.100\"\n      border=\"0\"\n      fontSize=\"12px\"\n      bg=\"neutral.900\"\n      py=\"4\"\n      px=\"6\"\n      top={-4}\n      boxShadow=\"xl\"\n      shouldWrapChildren={false}\n    >\n      <HStack\n        px={8}\n        py={4}\n        _notLast={{\n          borderBottom: \"1px solid\",\n          borderColor: \"surface.secondary\",\n        }}\n        _hover={{\n          bg: \"surface.secondary\",\n        }}\n        borderBottom=\"1px solid\"\n        borderColor=\"surface.secondary\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        cursor=\"pointer\"\n        onClick={() => {\n          router.push(`strategies/${slug}/manage`)\n          const landingTyp = landingType()\n          // analytics.track(\"strategy.selection\", {\n          //   strategyCard: name,\n          //   landingType: landingType(),\n          // })\n          if (landingTyp === DIRECT) {\n            /*  analytics.track(\"strategy.selection.direct\", {\n              strategyCard: name,\n              landingType: landingTyp,\n            })*/\n          } else {\n            /* analytics.track(\"strategy.selection.indirect\", {\n              strategyCard: name,\n              landingType: landingTyp,\n            })*/\n          }\n        }}\n        {...props}\n      >\n        <Stack direction=\"row\">\n          <Box>\n            <Img\n              height={\"2.5em\"}\n              width={\"2.5em\"}\n              src={icon}\n              alt=\"strategy icon\"\n              borderRadius=\"50%\"\n            />\n          </Box>\n          <VStack\n            spacing={0}\n            h=\"100%\"\n            alignSelf=\"baseline\"\n            alignItems=\"flex-start\"\n          >\n            <Text as=\"h6\" fontSize={16} fontWeight={700}>\n              {title}\n            </Text>\n            <Text fontWeight={500} fontSize={12} color=\"neutral.400\">\n              {lpTokenData &&\n                `${toEther(\n                  lpTokenData?.value + BigInt(bondedToken),\n                  lpTokenData?.decimals,\n                  true,\n                  2\n                ).toLocaleString()} Tokens`}\n            </Text>\n            <Text fontWeight={500} fontSize={12} color=\"neutral.400\">\n              1 token = {Number(tokenPrice.value).toFixed(3)} {symbol}{\" \"}\n              ({formatUSD(coinGeckoPrice?.toString(), 4)})\n            </Text>\n          </VStack>\n        </Stack>\n        <VStack\n          spacing={0}\n          h=\"100%\"\n          alignSelf=\"baseline\"\n          alignItems=\"flex-end\"\n          textAlign=\"right\"\n        >\n          <Text as=\"h6\" fontSize={16} fontWeight={700}>\n            {netValueUsd}\n          </Text>\n          <Text fontWeight={500} fontSize={12} color=\"neutral.400\">\n            {(netValueInAsset).toFixed(\n              showNetValueInAsset(cellarData.config) ? 5 : 2\n            )}\n            {` ${symbol}`}\n          </Text>\n        </VStack>\n      </HStack>\n    </Tooltip>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sidebar/YourPortofolio.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2824,2827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2824,2827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Box,\n  Button,\n  Center,\n  HStack,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\"\nimport { ErrorCard } from \"components/_cards/ErrorCard\"\nimport { TransparentCard } from \"components/_cards/TransparentCard\"\nimport { LogoIcon } from \"components/_icons\"\nimport { LighterSkeleton } from \"components/_skeleton\"\nimport { useUserDataAllStrategies } from \"data/hooks/useUserDataAllStrategies\"\nimport { PortofolioItem } from \"./PortofolioItem\"\nimport { formatUSD } from \"utils/formatCurrency\"\nimport { useAccount } from \"wagmi\"\n\nexport const YourPortofolio = () => {\n  const { data, isLoading, isError, refetch, isPending } =\n    useUserDataAllStrategies()\n  const { chain } = useAccount()\n  const valueAndFormatted = ({\n    value,\n    formatted,\n  }: {\n    value?: number | string\n    formatted?: string\n  }) => {\n    return {\n      value: value ?? 0,\n      formatted: formatted ?? \"0\",\n    }\n  }\n\n  return (\n    <VStack spacing=\"32px\" w=\"full\" mt={16}>\n      <TransparentCard\n        fontFamily=\"Haffer\"\n        w=\"100%\"\n        paddingX={0}\n        pt={3}\n      >\n        <VStack alignItems=\"flex-start\" w=\"100%\" spacing={0}>\n          <Text\n            marginX=\"auto\"\n            fontWeight={600}\n            fontSize=\"16px\"\n            mt={3}\n          >\n            {`Your total balance on ${\n              chain?.name ?? \"your current network\"\n            }`}\n          </Text>\n          <LighterSkeleton\n            isLoaded={!isLoading}\n            h={isLoading ? \"60px\" : \"auto\"}\n            m=\"auto\"\n            w=\"full\"\n          >\n            <Text\n              as=\"h3\"\n              fontWeight={700}\n              fontSize=\"40px\"\n              w=\"full\"\n              textAlign=\"center\"\n              mb=\"10px\"\n            >\n              {data?.totalNetValue.formatted}\n            </Text>\n          </LighterSkeleton>\n          <Box\n            py=\"19px\"\n            px={8}\n            w=\"100%\"\n            borderTop=\"1px solid\"\n            borderBottom=\"1px solid\"\n            borderColor=\"surface.secondary\"\n          >\n            <Text fontSize={12} fontWeight={600} color=\"neutral.400\">\n              Vault\n            </Text>\n          </Box>\n          <LighterSkeleton\n            isLoaded={!isLoading}\n            h={isLoading ? \"300px\" : \"auto\"}\n            m=\"auto\"\n            w=\"full\"\n          >\n            <Box w=\"100%\">\n              {!isError && data ? (\n                data.strategies.map(\n                  (strategy) =>\n                    strategy.userStrategyData.strategyData?.slug && (\n                      <PortofolioItem\n                        symbol={\n                          strategy.userStrategyData.strategyData?.symbol ||\n                          \"\"\n                        }\n                        bondedToken={Number(\n                          (strategy?.userStakes as any)?.totalBondedAmount\n                            ?.value ?? 0\n                        )}\n                        key={\n                          strategy.userStrategyData.strategyData?.name\n                        }\n                        icon={\n                          strategy.userStrategyData.strategyData\n                            ?.logo ?? \"\"\n                        }\n                        title={\n                          strategy.userStrategyData.strategyData\n                            ?.name ?? \"\"\n                        }\n                        netValueUsd={\n                          strategy.userStrategyData.userData\n                            ?.netValue?.formatted ?? \"\"\n                        }\n                        netValueInAsset={\n                          strategy.userStrategyData.userData\n                            ?.netValue?.value ?? 0\n                        }\n                        tokenPrice={valueAndFormatted({\n                          value:\n                            strategy.userStrategyData.strategyData\n                              ?.token?.value,\n                          formatted:\n                            strategy.userStrategyData.strategyData\n                              ?.token?.formatted,\n                        })}\n                        slug={\n                          strategy.userStrategyData.strategyData\n                            ?.slug ?? \"\"\n                        }\n                        description={\n                          strategy.userStrategyData.strategyData\n                            ?.description ?? \"\"\n                        }\n                      />\n                    )\n                )\n              ) : data?.strategies.length === 0 ? (\n                <h1>start </h1>\n              ) : (\n                !isPending && (\n                  <ErrorCard message=\"\" py=\"100px\">\n                    <Center>\n                      <Button\n                        w=\"100px\"\n                        variant=\"outline\"\n                        onClick={() => refetch()}\n                      >\n                        Retry\n                      </Button>\n                    </Center>\n                  </ErrorCard>\n                )\n              )}\n            </Box>\n          </LighterSkeleton>\n          <Box\n            py=\"19px\"\n            px={8}\n            w=\"100%\"\n            borderBottom=\"1px solid\"\n            borderColor=\"surface.secondary\"\n          >\n            <Text fontSize={12} fontWeight={600} color=\"neutral.400\">\n              Unclaimed Rewards\n            </Text>\n          </Box>\n          <LighterSkeleton\n            isLoaded={!isLoading}\n            h={isLoading ? \"60px\" : \"auto\"}\n            m=\"auto\"\n            w=\"full\"\n          >\n            <HStack\n              px={8}\n              py={4}\n              pl={12}\n              pb={1}\n              borderColor=\"surface.secondary\"\n              w=\"100%\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <HStack spacing={4}>\n                <LogoIcon color=\"red.normal\" p={0} boxSize=\"30px\" />\n                <HStack spacing={0} h=\"100%\" alignItems=\"flex-start\">\n                  <Text as=\"h6\" fontSize={16} fontWeight={700}>\n                    SOMM\n                  </Text>\n                </HStack>\n              </HStack>\n              <VStack\n                spacing={0}\n                h=\"100%\"\n                alignSelf=\"baseline\"\n                alignItems=\"flex-end\"\n                textAlign=\"right\"\n              >\n                <Text as=\"h6\" fontSize={16} fontWeight={700}>\n                  {formatUSD(data?.totalSommRewardsInUsd.toString())}\n                </Text>\n                <Text\n                  fontWeight={500}\n                  fontSize={12}\n                  color=\"neutral.400\"\n                >\n                  {`${\n                    data?.totalSommRewards.value === BigInt(0)\n                      ? \"0.00\"\n                      : data?.totalSommRewards.formatted\n                  } SOMM`}\n                </Text>\n              </VStack>\n            </HStack>\n          </LighterSkeleton>\n        </VStack>\n      </TransparentCard>\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_sidebar/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_skeleton/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tables/ApyRewardsSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":52,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":52,"endColumn":69,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[1353,1354],"text":""},"desc":"You should remove the non-null assertion."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  CircularProgress,\n  CircularProgressLabel,\n  HStack,\n  Stack,\n  Text,\n  Tooltip,\n} from \"@chakra-ui/react\"\nimport { LogoIcon } from \"components/_icons\"\nimport { FC } from \"react\"\nimport { formatDistanceToNowStrict, subDays } from \"date-fns\"\nimport { baseApyHoverLabel } from \"data/uiConfig\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { CellarType } from \"data/types\"\n\ntype ApyRewardsSectionProps = {\n  baseApy?: string\n  rewardsApy?: string\n  stackingEndDate: string\n  date?: Date\n  cellarId: string\n  baseApySumRewards?: string\n  extraRewardsApy?: string\n  merkleRewardsApy?: number\n}\n\nexport const ApyRewardsSection: FC<ApyRewardsSectionProps> = (\n  props\n) => {\n  const {\n    baseApy,\n    rewardsApy,\n    stackingEndDate,\n    cellarId,\n    baseApySumRewards,\n    extraRewardsApy,\n    merkleRewardsApy\n  } = props\n  const cellarConfig = cellarDataMap[cellarId].config\n  const now = new Date(Date.now()).getTime()\n  const nowDate = new Date(Date.now()).getTime()\n\n  const isStakingOverrideOngoing = cellarConfig.customReward\n    ?.stakingDurationOverride\n    ? cellarConfig.customReward.stakingDurationOverride.getTime() >\n      nowDate\n    : undefined\n  let endDate = new Date(stackingEndDate).getTime()\n\n  if (stackingEndDate === undefined) {\n    endDate =\n      cellarConfig.customReward?.stakingDurationOverride?.getTime()!\n  }\n\n  const startDate = subDays(endDate, 30).getTime()\n  const range = endDate - startDate\n  const current = now - startDate\n  const percentage = (current / range) * 100\n\n  const cellarType = cellarDataMap[cellarId].cellarType\n  const LogoComponent = cellarConfig.customReward?.logo ?? LogoIcon\n  const isHero = cellarDataMap[cellarId].isHero\n\n  if (!baseApy && !rewardsApy && !extraRewardsApy) {\n    return (\n      <Text>\n        --\n      </Text>\n    )\n  }\n\n  // TODO: EXTRACT THIS CODE TO COMPONENTS\n  // TODO: Why the conditional logic?\n  if (cellarType === CellarType.automatedPortfolio) {\n    return (\n      <Stack alignItems=\"flex-end\" spacing={0}>\n        {rewardsApy && (\n          <Tooltip\n            label={`Rewards ends in ${formatDistanceToNowStrict(\n              cellarConfig.customReward?.stakingDurationOverride ??\n                new Date(stackingEndDate)\n            )}`}\n            color=\"neutral.100\"\n            border=\"0\"\n            fontSize=\"12px\"\n            bg=\"neutral.900\"\n            fontWeight={600}\n            py=\"4\"\n            px=\"6\"\n            boxShadow=\"xl\"\n            shouldWrapChildren\n          >\n            <HStack spacing={1}>\n              <Text fontWeight={550} fontSize=\"16px\">\n                {rewardsApy}\n              </Text>\n              <CircularProgress\n                value={percentage}\n                color=\"white\"\n                trackColor=\"none\"\n                size=\"25px\"\n              >\n                <CircularProgressLabel\n                  display=\"flex\"\n                  alignItems=\"center\"\n                >\n                  <LogoIcon\n                    mx=\"auto\"\n                    color=\"red.normal\"\n                    p={0}\n                    boxSize=\"9px\"\n                  />\n                </CircularProgressLabel>\n              </CircularProgress>\n            </HStack>\n          </Tooltip>\n        )}\n      </Stack>\n    )\n  } else {\n    return (\n      <Stack alignItems=\"flex-end\">\n        <HStack spacing={0} alignContent=\"center\" gap={1}>\n          <Tooltip\n            label={\n              <>\n                <Text>\n                  {baseApyHoverLabel(cellarConfig)}{\" \"}\n                  {baseApy ?? \"0.00%\"}\n                </Text>\n                {!cellarConfig.customReward?.showOnlyBaseApy ? (\n                  <>\n                    <Text>\n                      {cellarConfig.customReward?.showSommRewards\n                        ? `SOMM Rewards APY ${rewardsApy ?? \"0.00%\"}`\n                        : null}\n                    </Text>\n                    <Text>\n                      {cellarConfig.customReward\n                        ?.customRewardAPYTooltip ??\n                        `${\n                          cellarConfig.customReward?.showAPY\n                            ? `${cellarConfig.customReward.tokenDisplayName} `\n                            : \"\"\n                        }Rewards APY ${\n                          extraRewardsApy ?? rewardsApy ?? \"0.00%\"\n                        }`}\n                    </Text>\n                    <Text>\n                      {merkleRewardsApy\n                        ? `Merkle Rewards APY ${merkleRewardsApy.toFixed(2)}%`\n                        : ''\n                      }\n                    </Text>\n                  </>\n                ) : (\n                  <></>\n                )}\n              </>\n            }\n            color=\"neutral.100\"\n            border=\"0\"\n            fontSize=\"12px\"\n            bg=\"neutral.900\"\n            fontWeight={600}\n            py=\"4\"\n            px=\"6\"\n            boxShadow=\"xl\"\n            shouldWrapChildren\n          >\n            <Text fontWeight={550} fontSize={isHero ? \"20px\" : \"16px\"}>\n              {baseApySumRewards ?? \"-\"}\n            </Text>\n          </Tooltip>\n          {(rewardsApy && isStakingOverrideOngoing === true) ||\n          (!cellarConfig.customReward?.showOnlyBaseApy === false &&\n            isStakingOverrideOngoing === true) ? (\n            <Tooltip\n              label={\n                cellarConfig.customReward?.customRewardEndMessage\n                  ? `${cellarConfig.customReward.tokenDisplayName} ${cellarConfig.customReward?.customRewardEndMessage}`\n                  : `${\n                      cellarConfig.customReward\n                        ?.customIconToolTipMsg ??\n                      `${\n                        cellarConfig.customReward?.showAPY\n                          ? `${cellarConfig.customReward.tokenDisplayName} `\n                          : \"\"\n                      }Rewards ends in`\n                    } ${formatDistanceToNowStrict(\n                      cellarConfig.customReward\n                        ?.stakingDurationOverride ??\n                        new Date(stackingEndDate)\n                    )}`\n              }\n              color=\"neutral.100\"\n              border=\"0\"\n              fontSize=\"12px\"\n              bg=\"neutral.900\"\n              fontWeight={600}\n              py=\"4\"\n              px=\"6\"\n              boxShadow=\"xl\"\n              shouldWrapChildren\n            >\n              <HStack spacing={1}>\n                <CircularProgress\n                  value={percentage}\n                  color=\"white\"\n                  trackColor=\"none\"\n                  size=\"25px\"\n                >\n                  <CircularProgressLabel\n                    display=\"flex\"\n                    alignItems=\"center\"\n                  >\n                    <LogoComponent\n                      mx=\"auto\"\n                      color=\"red.normal\"\n                      p={0}\n                      boxSize={\n                        cellarConfig.customReward?.logoSize ?? \"9px\"\n                      }\n                    />\n                  </CircularProgressLabel>\n                </CircularProgress>\n              </HStack>\n            </Tooltip>\n          ) : null}\n          {rewardsApy &&\n            (cellarConfig.customReward?.showSommRewards ===\n              undefined ||\n              cellarConfig.customReward?.showSommRewards) && (\n              <Tooltip\n                label={\n                  cellarConfig.customReward\n                    ?.customSommRewardsEndMessage\n                    ? cellarConfig.customReward\n                        .customSommRewardsEndMessage\n                    : `${\n                        cellarConfig.customReward?.showSommRewards\n                          ? \"SOMM Rewards ends in\"\n                          : \"Rewards ends in\"\n                      } ${formatDistanceToNowStrict(\n                        new Date(stackingEndDate)\n                      )}`\n                }\n                color=\"neutral.100\"\n                border=\"0\"\n                fontSize=\"12px\"\n                bg=\"neutral.900\"\n                fontWeight={600}\n                py=\"4\"\n                px=\"6\"\n                boxShadow=\"xl\"\n                shouldWrapChildren\n              >\n                <HStack spacing={1}>\n                  <CircularProgress\n                    value={percentage}\n                    color=\"white\"\n                    trackColor=\"none\"\n                    size=\"25px\"\n                  >\n                    <CircularProgressLabel\n                      display=\"flex\"\n                      alignItems=\"center\"\n                    >\n                      <LogoIcon\n                        mx=\"auto\"\n                        color=\"red.normal\"\n                        p={0}\n                        boxSize=\"9px\"\n                      />\n                    </CircularProgressLabel>\n                  </CircularProgress>\n                </HStack>\n              </Tooltip>\n            )}\n          {extraRewardsApy && (\n            <Tooltip\n              label={` ${cellarConfig.customReward?.tokenDisplayName}\n                        Rewards ends in\n                      ${formatDistanceToNowStrict(\n                        new Date(stackingEndDate)\n                      )}`}\n              color=\"neutral.100\"\n              border=\"0\"\n              fontSize=\"12px\"\n              bg=\"neutral.900\"\n              fontWeight={600}\n              py=\"4\"\n              px=\"6\"\n              boxShadow=\"xl\"\n              shouldWrapChildren\n            >\n              <HStack spacing={1}>\n                <CircularProgress\n                  value={percentage}\n                  color=\"white\"\n                  trackColor=\"none\"\n                  size=\"25px\"\n                >\n                  <CircularProgressLabel\n                    display=\"flex\"\n                    alignItems=\"center\"\n                  >\n                    <LogoComponent\n                      mx=\"auto\"\n                      color=\"red.normal\"\n                      p={0}\n                      boxSize={\n                        cellarConfig.customReward?.logoSize ?? \"9px\"\n                      }\n                    />\n                  </CircularProgressLabel>\n                </CircularProgress>\n              </HStack>\n            </Tooltip>\n          )}\n        </HStack>\n      </Stack>\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tables/SidebarTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'name' is defined but never used.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'landingTyp' is assigned a value but never used.","line":46,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2130,2133],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2130,2133],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2781,2784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2781,2784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Flex,\n  Icon,\n  Table,\n  TableCellProps,\n  TableContainer,\n  TableRowProps,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\"\nimport { FC } from \"react\"\n\nimport { useTable, useSortBy } from \"react-table\"\n\nimport { SortingArrowIcon } from \"components/_icons/SortingArrowIcon\"\nimport { useRouter } from \"next/router\"\nimport { getUserDataAllStrategies } from \"data/actions/common/getUserDataAllStrategies\"\nimport { landingType } from \"utils/landingType\"\n\ninterface BorderTrProps extends TableRowProps {\n  slug: string\n  name: string\n}\n\nexport const BorderTr: FC<BorderTrProps> = ({\n  slug,\n  name,\n  ...props\n}) => {\n  const router = useRouter()\n  return (\n    <Tr\n      _notLast={{\n        borderBottom: \"1px solid\",\n        borderColor: \"surface.secondary\",\n      }}\n      _hover={{\n        bg: \"surface.secondary\",\n      }}\n      cursor=\"pointer\"\n      onClick={() => {\n        router.push(slug)\n        const landingTyp = landingType()\n        //  analytics.track(\"strategy.selection\", {\n        //   strategyCard: name,\n        //   landingType: landingType(),\n        //  })\n        // if (landingTyp === DIRECT) {\n        //  analytics.track(\"strategy.selection.direct\", {\n        //     strategyCard: name,\n        //     landingType: landingTyp,\n        //   })\n        // } else {\n        //    analytics.track(\"strategy.selection.indirect\", {\n        //     strategyCard: name,\n        //     landingType: landingTyp,\n        //    })\n        // }\n      }}\n      _first={{\n        td: {\n          _first: {\n            borderTopLeftRadius: 20,\n          },\n          _last: {\n            borderTopRightRadius: 20,\n          },\n        },\n      }}\n      _last={{\n        td: {\n          _first: {\n            borderBottomLeftRadius: 20,\n          },\n          _last: {\n            borderBottomRightRadius: 20,\n          },\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport const BorderTd: FC<TableCellProps> = (props) => {\n  return <Td {...props} py={7} />\n}\n\nexport interface StrategyTableProps {\n  data: Awaited<\n    ReturnType<typeof getUserDataAllStrategies>\n  >[\"strategies\"]\n  columns: any\n}\n\nexport const SidebarTable: FC<StrategyTableProps> = ({\n  columns,\n  data,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable(\n    {\n      columns,\n      data,\n    },\n    useSortBy\n  )\n  return (\n    <TableContainer>\n      <Table\n        {...getTableProps()}\n        variant=\"unstyled\"\n        sx={{\n          borderCollapse: \"collapse\",\n        }}\n      >\n        <Thead border=\"none\" color=\"neutral.400\">\n          {headerGroups.map((headerGroup, index) => (\n            <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\n              {headerGroup.headers.map((column: any, index) => {\n                return column.canSort ? (\n                  <Th\n                    {...column.getHeaderProps(\n                      column.getSortByToggleProps()\n                    )}\n                    userSelect=\"none\"\n                    textTransform=\"unset\"\n                    key={index}\n                  >\n                    <Flex\n                      alignItems=\"center\"\n                      gap={2}\n                      justifyContent=\"end\"\n                    >\n                      {column.render(\"Header\")}\n                      <Icon as={SortingArrowIcon} boxSize={3} />\n                    </Flex>\n                  </Th>\n                ) : (\n                  <Th\n                    {...column.getHeaderProps()}\n                    userSelect=\"none\"\n                    textTransform=\"unset\"\n                    key={index}\n                    maxW={1}\n                  >\n                    {column.render(\"Header\")}\n                  </Th>\n                )\n              })}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody\n          backgroundColor=\"surface.primary\"\n          {...getTableBodyProps()}\n        >\n          {rows.map((row, indexRow) => {\n            prepareRow(row)\n            return (\n              <BorderTr\n                {...row.getRowProps()}\n                key={indexRow}\n                name={\n                  row.original.userStrategyData.strategyData?.name ||\n                  \"--\"\n                }\n                slug={\n                  \"strategies/\" +\n                  row.original.userStrategyData.strategyData?.slug\n                }\n              >\n                {row.cells.map((cell, indexData) => {\n                  return (\n                    <BorderTd\n                      {...cell.getCellProps()}\n                      key={indexData}\n                    >\n                      {cell.render(\"Cell\")}\n                    </BorderTd>\n                  )\n                })}\n              </BorderTr>\n            )\n          })}\n        </Tbody>\n      </Table>\n    </TableContainer>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tables/StrategyDate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tables/StrategySection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tables/StrategyTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Suspense' is defined but never used.","line":14,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'href' is defined but never used.","line":122,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2988,2991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2988,2991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useTable\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":148,"column":9,"nodeType":"Identifier","endLine":148,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3380,3383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3380,3383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4209,4212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4209,4212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Flex,\n  Icon,\n  Table,\n  TableCellProps,\n  TableContainer,\n  TableRowProps,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@chakra-ui/react\"\nimport { memo, FC, Suspense } from \"react\"\nimport { useTable, useSortBy } from \"react-table\"\nimport { SortingArrowIcon } from \"components/_icons/SortingArrowIcon\"\nimport { AllStrategiesData } from \"data/actions/types\"\nimport { isComingSoon } from \"utils/isComingSoon\"\nimport { useRouter } from \"next/router\"\n\ninterface BorderTrProps extends TableRowProps {\n  slug: string\n  name: string\n}\n\nexport const BorderTr: FC<BorderTrProps> = ({\n  slug,\n  name,\n  ...props\n}) => {\n  const router = useRouter()\n  return (\n    <Tr\n      tabIndex={0}\n      role=\"link\"\n      aria-label={`Open ${name}`}\n      _notLast={{\n        borderBottom: \"1px solid\",\n        borderColor: \"surface.secondary\",\n      }}\n      _hover={{\n        bg: \"surface.secondary\",\n      }}\n      _focusVisible={{\n        outline: \"2px solid\",\n        outlineColor: \"purple.base\",\n        outlineOffset: \"2px\",\n      }}\n      cursor=\"pointer\"\n      onClick={() => {\n        router.push(slug)\n      }}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.preventDefault()\n          router.push(slug)\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport const HeroTr: FC<BorderTrProps> = ({\n  slug,\n  name,\n  ...props\n}) => {\n  const router = useRouter()\n  return (\n    <Tr\n      tabIndex={0}\n      role=\"link\"\n      aria-label={`Open ${name}`}\n      _hover={{\n        backgroundImage: \"url('/assets/images/waves-bg.svg')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n      sx={{\n        padding: \"10px\",\n        fontSize: \"40px\",\n        border: \"2.5px solid\",\n        borderColor: \"purple.base\",\n        borderRadius: \"10px\",\n        height: \"200px\",\n        backgroundImage: \"url('/assets/images/waves-bg-simple.svg')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        boxShadow: \"0 0 15px 5px rgba(147, 51, 234, 0.3)\",\n        transition: \"box-shadow 0.3s ease-in-out\",\n        \"&:hover\": {\n          boxShadow: \"0 0 20px 8px rgba(147, 51, 234, 0.5)\",\n        },\n        \"@media (max-width: 768px)\": {\n          backgroundImage: \"url('/assets/images/waves-bg.svg')\",\n        },\n      }}\n      _focusVisible={{\n        outline: \"2px solid\",\n        outlineColor: \"purple.base\",\n        outlineOffset: \"2px\",\n      }}\n      onClick={() => {\n        router.push(slug)\n      }}\n      cursor=\"pointer\"\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.preventDefault()\n          router.push(slug)\n        }\n      }}\n      {...props}\n    />\n  )\n}\n\nexport const BorderTd: FC<TableCellProps & { href: string }> = ({\n  href,\n  ...props\n}) => {\n  return <Td py={7}>{props.children}</Td>\n}\n\nexport interface StrategyTableProps {\n  data: AllStrategiesData\n  columns: any\n  showHeader?: boolean\n}\n\nexport const StrategyTable = memo(\n  ({ columns, data, showHeader = true }: StrategyTableProps) => {\n    if (!data || !Array.isArray(data) || data.length === 0) {\n      return null\n    }\n\n    StrategyTable.displayName = \"StrategyTable\"\n\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      rows,\n      prepareRow,\n    } = useTable<any>(\n      {\n        columns,\n        data,\n      },\n      useSortBy\n    )\n    return (\n      <TableContainer\n        borderColor=\"surface.secondary\"\n        borderWidth={1}\n        rounded=\"xl\"\n      >\n        <Table\n          {...getTableProps()}\n          variant=\"unstyled\"\n          sx={{\n            borderCollapse: \"collapse\",\n          }}\n          rounded=\"lg\"\n        >\n          {showHeader && (\n            <Thead border=\"none\" color=\"neutral.400\">\n              {headerGroups.map((headerGroup, index) => (\n                <Tr\n                  {...headerGroup.getHeaderGroupProps()}\n                  key={index}\n                  bg=\"surface.primary\"\n                  borderBottom=\"1px solid\"\n                  borderColor=\"surface.secondary\"\n                >\n                  {headerGroup.headers.map((column: any, index) => {\n                    return column.canSort ? (\n                      <Th\n                        {...column.getHeaderProps(\n                          column.getSortByToggleProps()\n                        )}\n                        userSelect=\"none\"\n                        textTransform=\"unset\"\n                        key={index}\n                      >\n                        <Flex\n                          alignItems=\"center\"\n                          gap={2}\n                          justifyContent=\"end\"\n                        >\n                          {column.render(\"Header\")}\n                          <Icon\n                            as={SortingArrowIcon}\n                            boxSize={3}\n                            opacity={0.5}\n                            cursor=\"default\"\n                          />\n                        </Flex>\n                      </Th>\n                    ) : (\n                      <Th\n                        {...column.getHeaderProps()}\n                        userSelect=\"none\"\n                        textTransform=\"unset\"\n                        key={index}\n                        maxW={1}\n                      >\n                        {column.render(\"Header\")}\n                      </Th>\n                    )\n                  })}\n                </Tr>\n              ))}\n            </Thead>\n          )}\n          <Tbody\n            backgroundColor=\"surface.primary\"\n            {...getTableBodyProps()}\n          >\n            {rows.map((row, indexRow) => {\n              prepareRow(row)\n\n              const countdown = isComingSoon(row.original.launchDate)\n              const href = countdown\n                ? \"strategies/\" + row.original.slug\n                : \"strategies/\" + row.original.slug + \"/manage\"\n\n              if (row.original.isHero) {\n                return (\n                  <HeroTr\n                    slug={href}\n                    name={row.original.name}\n                    key={indexRow}\n                  >\n                    {row.cells.map((cell, indexData) => {\n                      return (\n                        <BorderTd\n                          {...cell.getCellProps()}\n                          key={indexData}\n                          href={href}\n                        >\n                          {cell.render(\"Cell\")}\n                        </BorderTd>\n                      )\n                    })}\n                  </HeroTr>\n                )\n              }\n              return (\n                <BorderTr\n                  opacity={row.original.deprecated ? 0.5 : 1}\n                  {...row.getRowProps()}\n                  key={indexRow}\n                  slug={href}\n                  name={row.original.name}\n                >\n                  {row.cells.map((cell, indexData) => {\n                    return (\n                      <BorderTd\n                        {...cell.getCellProps()}\n                        key={indexData}\n                        href={href}\n                      >\n                        {cell.render(\"Cell\")}\n                      </BorderTd>\n                    )\n                  })}\n                </BorderTr>\n              )\n            })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    )\n  }\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tabs/CustomTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tabs/ExchangeTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'title' is defined but never used.","line":8,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Text, Link, HStack, Image, Stack } from \"@chakra-ui/react\"\n\nimport { ExternalLinkIcon } from \"components/_icons\"\nimport React from \"react\"\nimport { useRouter } from \"next/router\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\n\nexport const ExchangeTab = ({ title }: { title: string }) => {\n  const id = useRouter().query.id as string\n  const exchanges = cellarDataMap[id].exchanges\n\n  return (\n    <Stack>\n      {exchanges &&\n        exchanges.length > 1 &&\n        exchanges\n          .filter((item) => \"url\" in item)\n          .map((item) => (\n            <Link\n              key={item.name}\n              href={item.url}\n              onClick={() => {\n                // analytics.track(\n                //   `${\n                //     title.toLocaleLowerCase() === \"deposit\"\n                //       ? \"deposit\"\n                //       : \"withdraw\"\n                //   }.exchange`,\n                //   {\n                //     platformSelection: `${item.name}`,\n                //   }\n                // )\n              }}\n              target=\"_blank\"\n            >\n              <HStack\n                justifyContent=\"space-between\"\n                backgroundColor=\"surface.secondary\"\n                padding={4}\n                borderRadius=\"xl\"\n              >\n                <HStack spacing={4}>\n                  <Image\n                    alt={item.name}\n                    src={item.logo}\n                    boxSize={6}\n                  />\n                  <Text fontSize=\"xl\" fontWeight=\"bold\">\n                    {item.name}\n                  </Text>\n                </HStack>\n                <ExternalLinkIcon />\n              </HStack>\n            </Link>\n          ))}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_toasts/BaseToast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_tooltip/AvatarTooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_typography/CardHeading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_vaults/KPIBox.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Box' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Box, Stack, Text, StackProps } from \"@chakra-ui/react\"\n\ntype KPIBoxProps = StackProps & {\n  label: string\n  value?: string | number | null\n  align?: \"left\" | \"center\" | \"right\"\n  fontVariantNumeric?: \"tabular-nums\" | \"normal\"\n}\n\nexport default function KPIBox({\n  label,\n  value,\n  align = \"left\",\n  fontVariantNumeric = \"tabular-nums\",\n  ...rest\n}: KPIBoxProps) {\n  return (\n    <Stack\n      spacing={1}\n      align={\n        align === \"left\"\n          ? \"flex-start\"\n          : align === \"right\"\n          ? \"flex-end\"\n          : \"center\"\n      }\n      minW={0}\n      {...rest}\n    >\n      <Text\n        fontSize={{ base: \"xl\", md: \"2xl\" }}\n        fontWeight={800}\n        lineHeight={1}\n        sx={{ fontVariantNumeric }}\n        isTruncated\n      >\n        {value ?? \"\"}\n      </Text>\n      <Text fontSize=\"xs\" color=\"neutral.400\" isTruncated>\n        {label}\n      </Text>\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_vaults/LegacyVaultCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1468,1471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1468,1471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1936,1939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1936,1939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'status' is assigned a value but never used.","line":65,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2311,2314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2311,2314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useUserStrategyData\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":84,"column":9,"nodeType":"Identifier","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2817,2820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2817,2820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3276,3279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3276,3279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Avatar,\n  Badge,\n  Box,\n  Button,\n  HStack,\n  Image,\n  Text,\n  Tooltip,\n  VStack,\n  Grid,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n} from \"@chakra-ui/react\"\nimport {\n  useDepositModalStore,\n  DepositModalType,\n} from \"data/hooks/useDepositModalStore\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useUserBalance } from \"data/hooks/useUserBalance\"\nimport { toEther } from \"utils/formatCurrency\"\nimport { useAccount, useSwitchChain } from \"wagmi\"\nimport { useRouter } from \"next/router\"\nimport ConnectGate from \"components/wallet/ConnectGate\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport ChainSwitcherInline from \"components/network/ChainSwitcherInline\"\nimport ActionButton from \"components/ui/ActionButton\"\nimport { coerceNetValue, parseMoneyString } from \"utils/money\"\n\ntype StrategyLike = {\n  slug?: string\n  logo?: string\n  name?: string\n  provider?: { title?: string } | string\n  tvm?: { value?: number | string; formatted?: string }\n  baseApySumRewards?: { value?: number | string; formatted?: string }\n  config?: { chain?: { displayName?: string; id?: string } }\n  status?: \"active\" | \"paused\" | \"withdrawals-only\"\n  deprecated?: boolean\n}\n\nexport default function LegacyVaultCard({\n  vault,\n  enabled = true,\n}: {\n  vault?: StrategyLike\n  enabled?: boolean\n}) {\n  const router = useRouter()\n  const { setIsOpen } = useDepositModalStore()\n  const providerText =\n    (vault?.provider as any)?.title ||\n    (vault?.provider as string) ||\n    \"\"\n  const tvl = vault?.tvm?.formatted ?? \"–\"\n  const netValueNum =\n    typeof vault?.baseApySumRewards?.value === \"string\"\n      ? parseFloat(vault?.baseApySumRewards?.value as string)\n      : (vault?.baseApySumRewards?.value as number | undefined)\n  const netFormatted = vault?.baseApySumRewards?.formatted ?? \"–\"\n  const chainName = vault?.config?.chain?.displayName ?? \"Ethereum\"\n  const chainLogo = (vault as any)?.config?.chain?.logoPath\n  const status: \"active\" | \"paused\" | \"withdrawals-only\" =\n    vault?.status ?? (vault?.deprecated ? \"paused\" : \"paused\")\n\n  // Wallet/chain/balance state\n  const { isConnected, chain } = useAccount()\n  const cellarConfig = vault?.slug\n    ? cellarDataMap[vault.slug]?.config\n    : undefined\n  const { lpToken } = useUserBalance(cellarConfig as any)\n  const { data: lpTokenData } = lpToken\n  const { switchChainAsync } = useSwitchChain()\n  const desiredChainId = cellarConfig?.chain?.wagmiId\n  const needsSwitch = !!desiredChainId && chain?.id !== desiredChainId\n\n  // User net value (manage page logic)\n  const stratAddress = cellarConfig?.cellar?.address\n  const stratChainId = cellarConfig?.chain?.id\n  const { data: userStratData } =\n    stratAddress && stratChainId\n      ? useUserStrategyData(stratAddress, stratChainId, enabled)\n      : ({} as any)\n\n  // Use user's actual net value for withdrawal logic, not the display net value\n  const userNetValue =\n    userStratData?.userStrategyData?.userData?.netValue?.formatted\n  const nv = coerceNetValue(userNetValue)\n  const canWithdraw = Number.isFinite(nv) && nv > 0\n  const lpTokenDisabled =\n    !lpTokenData ||\n    Number(toEther(lpTokenData?.formatted, lpTokenData?.decimals)) <=\n      0\n  const userNetValueFmt: string | undefined = (userStratData as any)\n    ?.userStrategyData?.userData?.netValue?.formatted\n\n  const safeVal = (v?: string | number | null) =>\n    v == null || v === \"\" || v === 0 || v === \"0\" ? \"–\" : v\n\n  // Rewards tone and arrow\n  const rewardsArrow =\n    typeof netValueNum === \"number\"\n      ? netValueNum >= 0\n        ? \"↑\"\n        : \"↓\"\n      : \"\"\n  const rewardsColor =\n    typeof netValueNum === \"number\"\n      ? netValueNum >= 0\n        ? \"green.300\"\n        : \"red.300\"\n      : \"neutral.300\"\n\n  const href = vault?.slug\n    ? `/strategies/${vault.slug}/manage`\n    : undefined\n\n  // Disabled tooltip text\n  let tooltipLabel: string | undefined\n  if (!isConnected) tooltipLabel = \"Connect your wallet first\"\n  else if (needsSwitch)\n    tooltipLabel = `Switch to ${cellarConfig?.chain?.displayName}`\n  else if (lpTokenDisabled) tooltipLabel = \"No funds to withdraw\"\n\n  return (\n    <Box\n      borderWidth=\"1px\"\n      borderColor=\"surface.secondary\"\n      bg=\"surface.primary\"\n      rounded=\"xl\"\n      p={{ base: 4, md: 5 }}\n      w=\"full\"\n      cursor={href ? \"pointer\" : \"default\"}\n      role={href ? \"link\" : undefined}\n      tabIndex={href ? 0 : undefined}\n      aria-label={href ? `Open ${vault?.name ?? \"vault\"}` : undefined}\n      _hover={{ bg: \"surface.secondary\", borderColor: \"purple.base\" }}\n      _focusVisible={{\n        outline: \"2px solid\",\n        outlineColor: \"purple.base\",\n        outlineOffset: \"2px\",\n      }}\n      transition=\"background-color .2s ease, border-color .2s ease, box-shadow .2s ease\"\n      onClick={() => {\n        if (href) router.push(href)\n      }}\n      onKeyDown={(e) => {\n        if (!href) return\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.preventDefault()\n          router.push(href)\n        }\n      }}\n    >\n      {/* 3-column layout: identity | KPIs | action */}\n      <Grid\n        templateColumns={{ base: \"1fr\", md: \"1.2fr 1.2fr 0.9fr\" }}\n        gap={{ base: 4, md: 6 }}\n        alignItems=\"center\"\n      >\n        {/* Identity */}\n        <HStack spacing={3} align=\"center\" minW={0}>\n          {vault?.logo && (\n            <Image\n              src={vault.logo}\n              alt={vault.name || \"Vault\"}\n              boxSize=\"44px\"\n              rounded=\"full\"\n            />\n          )}\n          <VStack spacing={1} align=\"flex-start\" minW={0}>\n            <Text\n              fontWeight={800}\n              fontSize={{ base: \"lg\", md: \"xl\" }}\n              noOfLines={1}\n            >\n              {vault?.name}\n            </Text>\n            <HStack spacing={2} flexWrap=\"wrap\">\n              <Text fontSize=\"sm\" color=\"whiteAlpha.800\">\n                {providerText}\n              </Text>\n              {chainLogo && (\n                <HStack\n                  spacing={1}\n                  px={2}\n                  py={0.5}\n                  rounded=\"full\"\n                  bg=\"whiteAlpha.100\"\n                >\n                  <Avatar\n                    name={chainName}\n                    src={chainLogo}\n                    background=\"transparent\"\n                    border=\"none\"\n                    sx={{ width: \"18px\", height: \"18px\" }}\n                  />\n                  <Text fontSize=\"xs\" color=\"whiteAlpha.800\">\n                    {chainName}\n                  </Text>\n                </HStack>\n              )}\n            </HStack>\n          </VStack>\n        </HStack>\n\n        {/* KPIs */}\n        <Grid\n          templateColumns={{ base: \"1fr\", md: \"repeat(3, 1fr)\" }}\n          gap={4}\n          alignItems=\"center\"\n        >\n          <VStack spacing={1} align=\"flex-start\">\n            <Text\n              fontSize={{ base: \"xl\", md: \"2xl\" }}\n              fontWeight={800}\n              lineHeight={1}\n            >\n              {safeVal(tvl)}\n            </Text>\n            <Text fontSize=\"xs\" color=\"neutral.400\">\n              TVL\n            </Text>\n          </VStack>\n          <VStack spacing={1} align=\"center\">\n            <Text\n              fontSize={{ base: \"xl\", md: \"2xl\" }}\n              fontWeight={800}\n              lineHeight={1}\n            >\n              {safeVal(userNetValueFmt)}\n            </Text>\n            <Text fontSize=\"xs\" color=\"neutral.400\">\n              Net Value\n            </Text>\n          </VStack>\n          <VStack spacing={1} align=\"flex-end\">\n            <HStack spacing={1}>\n              <Text\n                fontSize={{ base: \"xl\", md: \"2xl\" }}\n                fontWeight={800}\n                lineHeight={1}\n                color={rewardsColor}\n              >\n                {safeVal(netFormatted)}\n              </Text>\n              <Text fontSize=\"sm\" color={rewardsColor} aria-hidden>\n                {rewardsArrow}\n              </Text>\n            </HStack>\n            <Text fontSize=\"xs\" color=\"neutral.400\">\n              Net Rewards\n            </Text>\n          </VStack>\n        </Grid>\n\n        {/* Debug Info */}\n        {process.env.NEXT_PUBLIC_DEBUG_SORT === \"1\" && (\n          <div className=\"text-xs opacity-60\">\n            nv={coerceNetValue(userNetValue)} tvl=\n            {parseMoneyString(vault?.tvm?.formatted)} connected=\n            {String(Boolean(isConnected))}\n          </div>\n        )}\n\n        {/* Action */}\n        <VStack spacing={2} align={{ base: \"stretch\", md: \"end\" }}>\n          <ConnectGate\n            fallbackLabel=\"Connect wallet to withdraw\"\n            fullWidth\n            overrideChainId={cellarConfig?.chain?.id}\n          >\n            {needsSwitch ? (\n              <Popover placement=\"bottom\" isLazy>\n                <PopoverTrigger>\n                  <ActionButton\n                    variantStyle=\"primary\"\n                    size=\"md\"\n                    minW=\"180px\"\n                    onMouseDown={(e) => e.stopPropagation()}\n                    onClick={(e) => e.stopPropagation()}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\" || e.key === \" \") {\n                        e.stopPropagation()\n                      }\n                    }}\n                  >\n                    Switch network to proceed\n                  </ActionButton>\n                </PopoverTrigger>\n                <PopoverContent\n                  p={2}\n                  borderWidth={1}\n                  borderColor=\"purple.dark\"\n                  borderRadius={12}\n                  bg=\"surface.bg\"\n                  _focus={{ outline: \"unset\", boxShadow: \"unset\" }}\n                  onMouseDown={(e) => e.stopPropagation()}\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <PopoverBody>\n                    <ChainSwitcherInline\n                      requiredChainId={desiredChainId}\n                      fullWidth\n                      onSwitched={async () => {\n                        // after successful switch, open withdraw flow\n                        try {\n                          await switchChainAsync?.({\n                            chainId: desiredChainId!,\n                          })\n                        } catch {}\n                        if (vault?.slug) {\n                          setIsOpen({\n                            id: vault.slug,\n                            type: \"withdraw\" as DepositModalType,\n                          })\n                        }\n                      }}\n                    />\n                  </PopoverBody>\n                </PopoverContent>\n              </Popover>\n            ) : (\n              <Tooltip\n                label={tooltipLabel}\n                isDisabled={!tooltipLabel}\n                bg=\"surface.bg\"\n                color=\"neutral.300\"\n                placement=\"top\"\n              >\n                <ActionButton\n                  variantStyle={\n                    !canWithdraw || !vault?.slug ? \"ghost\" : \"primary\"\n                  }\n                  size=\"md\"\n                  minW=\"180px\"\n                  isDisabled={!canWithdraw || !vault?.slug}\n                  onClick={async (e) => {\n                    e.stopPropagation()\n                    if (!vault?.slug) return\n                    setIsOpen({\n                      id: vault.slug,\n                      type: \"withdraw\" as DepositModalType,\n                    })\n                  }}\n                >\n                  Enter Withdrawal\n                </ActionButton>\n              </Tooltip>\n            )}\n          </ConnectGate>\n        </VStack>\n      </Grid>\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/_vaults/StrategyRow.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Stack' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'built' is assigned a value but never used.","line":42,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'netVal' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1546,1549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1546,1549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'launchDate'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [launchDate]","fix":{"range":[1769,1794],"text":"[launchDate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":59,"column":7,"nodeType":"ChainExpression","endLine":59,"endColumn":30},{"ruleId":"react-hooks/rules-of-hooks","severity":1,"message":"React Hook \"useUserStrategyData\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":66,"column":9,"nodeType":"Identifier","endLine":66,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2230,2233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2230,2233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2295,2298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2295,2298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'launchDate'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [launchDate]","fix":{"range":[3283,3308],"text":"[launchDate]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":105,"column":7,"nodeType":"ChainExpression","endLine":105,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3888,3891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3888,3891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6556,6559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6556,6559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  Badge,\n  Box,\n  Grid,\n  HStack,\n  Text,\n  VStack,\n  Image,\n  Button,\n  Avatar,\n  Stack,\n} from \"@chakra-ui/react\"\nimport { useEffect, useMemo, useState } from \"react\"\nimport ConnectGate from \"components/wallet/ConnectGate\"\nimport { useDepositModalStore } from \"data/hooks/useDepositModalStore\"\nimport { useUserStrategyData } from \"data/hooks/useUserStrategyData\"\nimport KPIBox from \"components/_vaults/KPIBox\"\nimport ActionButton from \"components/ui/ActionButton\"\n\ntype Vault = {\n  name?: string\n  isSommNative?: boolean\n  provider?: { title?: string } | string\n  builtWith?: string[]\n  description?: string\n  launchDate?: string | number | Date\n  tvm?: { formatted?: string }\n  baseApySumRewards?: { value?: number | string; formatted?: string }\n  config?: {\n    chain?: { displayName?: string; id?: string }\n    cellar?: { address?: string }\n  }\n  slug?: string\n}\n\nexport default function StrategyRow({ vault }: { vault: Vault }) {\n  const { setIsOpen } = useDepositModalStore()\n  const providerText =\n    (vault?.provider as any)?.title ||\n    (vault?.provider as string) ||\n    \"\"\n  const built = Array.isArray(vault?.builtWith)\n    ? vault?.builtWith\n    : []\n  const tvl = vault?.tvm?.formatted\n  const netVal =\n    typeof vault?.baseApySumRewards?.value === \"string\"\n      ? parseFloat(vault?.baseApySumRewards?.value)\n      : (vault?.baseApySumRewards?.value as number | undefined)\n  const netFmt = vault?.baseApySumRewards?.formatted\n  const chainLabel = vault?.config?.chain?.displayName ?? \"—\"\n  const chainLogo = (vault as any)?.config?.chain?.logoPath\n  const launchDate = vault?.launchDate\n    ? new Date(vault.launchDate)\n    : undefined\n\n  const isPreLaunch = useMemo(() => {\n    return !!launchDate && Date.now() < launchDate.getTime()\n  }, [launchDate?.getTime?.()])\n\n  // User net value (reuse manage page logic via hook)\n  const strategyAddress = vault?.config?.cellar?.address\n  const strategyChainId = vault?.config?.chain?.id\n  const { data: userStratData } =\n    strategyAddress && strategyChainId\n      ? useUserStrategyData(\n          strategyAddress,\n          strategyChainId,\n          // Gate by connection status implicitly via hook (enabled flag)\n          true\n        )\n      : ({} as any)\n  const netValueFmt: string | undefined = (userStratData as any)\n    ?.userStrategyData?.userData?.netValue?.formatted\n\n  const safeValue = (v?: string | number | null) =>\n    v === undefined || v === null || v === \"\" || v === 0 || v === \"0\"\n      ? \"–\"\n      : v\n\n  // Helper text countdown (compact). Updates every second, rendered once below button\n  const [remaining, setRemaining] = useState<string>(\"\")\n  useEffect(() => {\n    if (!launchDate) return\n    const tick = () => {\n      const ms = launchDate.getTime() - Date.now()\n      if (ms <= 0) {\n        setRemaining(\"\")\n        return\n      }\n      const days = Math.max(0, Math.floor(ms / (24 * 60 * 60 * 1000)))\n      const hours = Math.max(\n        0,\n        Math.floor((ms % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000))\n      )\n      const minutes = Math.max(\n        0,\n        Math.floor((ms % (60 * 60 * 1000)) / (60 * 1000))\n      )\n      setRemaining(`${days}d ${hours}h ${minutes}m`)\n    }\n    tick()\n    const id = setInterval(tick, 1000)\n    return () => clearInterval(id)\n  }, [launchDate?.getTime?.()])\n\n  const oneLineDesc = vault?.description?.length\n    ? vault.description\n    : \"Dynamically reallocates stETH across Aave, Morpho, Unichain, and Mellow.\"\n\n  return (\n    <Box>\n      <Grid\n        templateColumns={{ base: \"1fr\", md: \"1.2fr 1.1fr 1fr\" }}\n        gap={{ base: 3, md: 6 }}\n        alignItems=\"center\"\n      >\n        {/* Left column: Identity */}\n        <HStack spacing={{ base: 2, md: 3 }} align=\"center\" minW={0}>\n          <Image\n            src={\n              vault?.isSommNative\n                ? \"/assets/icons/alpha-steth.png\"\n                : (vault as any)?.logo\n            }\n            alt={vault?.name || \"Vault\"}\n            boxSize={{ base: \"32px\", md: \"40px\" }}\n            rounded=\"full\"\n            flexShrink={0}\n          />\n          <VStack spacing={1} align=\"flex-start\" minW={0} flex={1}>\n            <HStack spacing={2} flexWrap=\"wrap\" minW={0}>\n              <Text\n                fontSize={{ base: \"md\", md: \"xl\" }}\n                fontWeight={800}\n                noOfLines={1}\n              >\n                {vault?.name}\n              </Text>\n            </HStack>\n            <HStack spacing={2} flexWrap=\"wrap\">\n              {vault?.isSommNative && (\n                <Badge\n                  colorScheme=\"blue\"\n                  fontSize={{ base: \"xs\", md: \"sm\" }}\n                >\n                  Somm-native\n                </Badge>\n              )}\n              {chainLogo && (\n                <HStack\n                  spacing={1}\n                  px={2}\n                  py={0.5}\n                  rounded=\"full\"\n                  bg=\"whiteAlpha.100\"\n                >\n                  <Avatar\n                    name={chainLabel}\n                    src={chainLogo}\n                    background=\"transparent\"\n                    border=\"none\"\n                    sx={{ width: \"16px\", height: \"16px\" }}\n                  />\n                  <Text fontSize=\"xs\" color=\"whiteAlpha.800\">\n                    {chainLabel}\n                  </Text>\n                </HStack>\n              )}\n            </HStack>\n            {providerText && (\n              <Text\n                fontSize={{ base: \"xs\", md: \"sm\" }}\n                color=\"whiteAlpha.800\"\n                noOfLines={1}\n              >\n                {providerText}\n              </Text>\n            )}\n          </VStack>\n        </HStack>\n\n        {/* Center column: KPIs in equal widths */}\n        <Grid\n          templateColumns={{\n            base: \"repeat(3, 1fr)\",\n            md: \"repeat(3, 1fr)\",\n          }}\n          gap={{ base: 2, md: 4 }}\n          alignItems=\"center\"\n        >\n          <KPIBox label=\"TVL\" value={safeValue(tvl)} align=\"left\" />\n          <KPIBox\n            label=\"Net Value\"\n            value={safeValue(netValueFmt)}\n            align=\"center\"\n          />\n          <KPIBox\n            label=\"Net Rewards\"\n            value={safeValue(netFmt)}\n            align=\"right\"\n          />\n        </Grid>\n\n        {/* Right column: chain + primary action with single helper */}\n        <VStack spacing={2} align={{ base: \"stretch\", md: \"end\" }}>\n          <ConnectGate\n            fallbackLabel=\"Connect wallet to deposit\"\n            fullWidth\n            overrideChainId={(vault as any)?.config?.chain?.id}\n          >\n            {isPreLaunch ? (\n              <ActionButton\n                variantStyle=\"primary\"\n                size={{ base: \"sm\", md: \"md\" }}\n                isDisabled\n                onClick={(e) => e.stopPropagation()}\n              >\n                Deposit\n              </ActionButton>\n            ) : (\n              <ActionButton\n                variantStyle=\"primary\"\n                size={{ base: \"sm\", md: \"md\" }}\n                onClick={(e) => {\n                  e.stopPropagation()\n                  if (!vault?.slug) return\n                  setIsOpen({ id: vault.slug, type: \"deposit\" })\n                }}\n              >\n                Deposit\n              </ActionButton>\n            )}\n          </ConnectGate>\n          {isPreLaunch && remaining && (\n            <Text fontSize=\"xs\" color=\"neutral.400\">\n              Available in: {remaining}\n            </Text>\n          )}\n        </VStack>\n      </Grid>\n\n      {/* One-line description */}\n      {oneLineDesc && (\n        <Text\n          mt={{ base: 2, md: 3 }}\n          fontSize={{ base: \"xs\", md: \"sm\" }}\n          color=\"neutral.300\"\n          noOfLines={1}\n        >\n          {oneLineDesc}\n        </Text>\n      )}\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/legacy/LegacyVaultsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/network/ChainSwitcherInline.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Text' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Stack, Text } from \"@chakra-ui/react\"\nimport NetworkSelector from \"components/wallet/NetworkSelector\"\n\nexport default function ChainSwitcherInline({\n  requiredChainId,\n  onSwitched,\n  fullWidth,\n}: {\n  requiredChainId?: number\n  onSwitched?: (chainId: number) => void\n  fullWidth?: boolean\n}) {\n  return (\n    <Stack spacing={3} w={fullWidth ? \"100%\" : \"auto\"}>\n      <NetworkSelector\n        mode=\"inline\"\n        requiredChainId={requiredChainId}\n        onSwitched={onSwitched}\n        fullWidth={fullWidth}\n      />\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/ui/ActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/vaults/VaultList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from \"react\"\nimport { VStack } from \"@chakra-ui/react\"\nimport { sortVaults } from \"utils/sortVaults\"\nimport LegacyVaultCard from \"components/_vaults/LegacyVaultCard\"\nimport StrategyRow from \"components/_vaults/StrategyRow\"\nimport { useAccount } from \"wagmi\"\n\nexport default function VaultList({ vaults }: { vaults: any[] }) {\n  const { isConnected } = useAccount()\n  const sorted = useMemo(\n    () =>\n      sortVaults(\n        vaults.map((v) => ({\n          ...v,\n          metrics: { tvl: Number(v?.tvm?.value ?? 0) },\n          user: {\n            netValue: Number(\n              v?.userStrategyData?.userData?.netValue?.value ?? 0\n            ),\n          },\n        })),\n        isConnected\n      ),\n    [isConnected, vaults]\n  )\n\n  return (\n    <VStack spacing={4} align=\"stretch\">\n      {sorted.map((v) =>\n        v?.isSommNative ? (\n          <StrategyRow key={v?.slug ?? v?.name} vault={v} />\n        ) : (\n          <LegacyVaultCard key={v?.slug ?? v?.name} vault={v} />\n        )\n      )}\n    </VStack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/vaults/layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/wallet/ActionAccessGate.tsx","messages":[{"ruleId":"react/no-children-prop","severity":1,"message":"Do not pass children as props. Instead, nest children between the opening and closing tags.","line":25,"column":11,"nodeType":"JSXAttribute","messageId":"nestChildren","endLine":25,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode } from \"react\"\nimport { Box, VisuallyHidden } from \"@chakra-ui/react\"\nimport { useAccount } from \"wagmi\"\nimport NetworkSelector from \"components/wallet/NetworkSelector\"\nimport ConnectButton from \"components/_buttons/ConnectButton\"\n\nexport default function ActionAccessGate({\n  requiredChainId,\n  children,\n  fullWidth,\n}: {\n  requiredChainId: number\n  children: ReactNode\n  fullWidth?: boolean\n}) {\n  const { isConnected, chain } = useAccount()\n\n  if (!isConnected) {\n    return (\n      <Box w={fullWidth ? \"100%\" : \"auto\"}>\n        <VisuallyHidden aria-live=\"polite\">\n          Wallet not connected\n        </VisuallyHidden>\n        <ConnectButton\n          children={\"Connect wallet to withdraw\"}\n          size=\"lg\"\n          w={fullWidth ? \"100%\" : undefined}\n        />\n      </Box>\n    )\n  }\n\n  if (chain?.id !== requiredChainId) {\n    return (\n      <Box w={fullWidth ? \"100%\" : \"auto\"}>\n        <VisuallyHidden aria-live=\"polite\">\n          Wrong network\n        </VisuallyHidden>\n        <NetworkSelector\n          mode=\"inline\"\n          requiredChainId={requiredChainId}\n          fullWidth={fullWidth}\n        />\n      </Box>\n    )\n  }\n\n  return <>{children}</>\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/wallet/ConnectGate.tsx","messages":[{"ruleId":"react/no-children-prop","severity":1,"message":"Do not pass children as props. Instead, nest children between the opening and closing tags.","line":45,"column":9,"nodeType":"JSXAttribute","messageId":"nestChildren","endLine":45,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode } from \"react\"\nimport { Box, VisuallyHidden } from \"@chakra-ui/react\"\nimport { useAccount } from \"wagmi\"\nimport ConnectButton from \"components/_buttons/ConnectButton\"\n\ntype ConnectGateProps = {\n  children: ReactNode\n  fallbackLabel?: string\n  fullWidth?: boolean\n  overrideChainId?: string\n}\n\nexport default function ConnectGate({\n  children,\n  fallbackLabel,\n  fullWidth,\n  overrideChainId,\n}: ConnectGateProps) {\n  const { isConnected } = useAccount()\n\n  if (isConnected) return <>{children}</>\n\n  return (\n    <Box\n      w={fullWidth ? \"100%\" : \"auto\"}\n      onMouseDown={(e) => {\n        e.stopPropagation()\n      }}\n      onClick={(e) => {\n        e.stopPropagation()\n      }}\n      onKeyDown={(e) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n          e.stopPropagation()\n        }\n      }}\n    >\n      <VisuallyHidden aria-live=\"polite\">\n        Wallet not connected\n      </VisuallyHidden>\n      <ConnectButton\n        overridechainid={overrideChainId}\n        // Use default styled variant to match app header theme\n        // size and width align with primary CTAs\n        children={fallbackLabel || \"Connect wallet to continue\"}\n        size=\"md\"\n        height=\"44px\"\n        minW=\"148px\"\n        w={fullWidth ? \"100%\" : undefined}\n        variant=\"sommOutline\"\n      />\n    </Box>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/components/wallet/NetworkSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from \"react\"\nimport { Button, Stack, Text, VisuallyHidden } from \"@chakra-ui/react\"\nimport { useAccount } from \"wagmi\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { chainConfig, Chain } from \"data/chainConfig\"\nimport { requestSwitchWithAdd } from \"utils/wallet/chainUtils\"\n\ninterface NetworkSelectorProps {\n  requiredChainId?: number\n  mode?: \"inline\" | \"button\"\n  onSwitched?: (chainId: number) => void\n  fullWidth?: boolean\n}\n\nexport default function NetworkSelector({\n  requiredChainId,\n  mode = \"button\",\n  onSwitched,\n  fullWidth = false,\n}: NetworkSelectorProps) {\n  const { chain } = useAccount()\n  const { addToast } = useBrandedToast()\n\n  const currentChain: Chain | undefined = useMemo(() => {\n    if (!chain?.id) return undefined\n    return chainConfig.find((c) => c.wagmiId === chain.id)\n  }, [chain?.id])\n\n  const requiredChain: Chain | undefined = useMemo(() => {\n    if (!requiredChainId) return undefined\n    return chainConfig.find((c) => c.wagmiId === requiredChainId)\n  }, [requiredChainId])\n\n  const handleQuickSwitch = async () => {\n    if (!requiredChain) return\n    try {\n      await requestSwitchWithAdd(requiredChain.wagmiId as 1 | 42161 | 8453)\n      onSwitched?.(requiredChain.wagmiId)\n    } catch (e: any) {\n      addToast({\n        heading: \"Network switch failed\",\n        status: \"error\",\n        body: <Text>{e?.message ?? \"Unable to switch network\"}</Text>,\n      })\n    }\n  }\n\n  const caption =\n    currentChain && requiredChain\n      ? `You're on ${currentChain.displayName}. This vault runs on ${requiredChain.displayName}.`\n      : undefined\n\n  return (\n    <Stack spacing={2} w={fullWidth ? \"100%\" : \"auto\"}>\n      <VisuallyHidden aria-live=\"polite\">\n        Select or switch network\n      </VisuallyHidden>\n      {requiredChain &&\n        currentChain?.wagmiId !== requiredChain.wagmiId && (\n          <Button\n            onClick={handleQuickSwitch}\n            size={mode === \"inline\" ? \"lg\" : \"md\"}\n            w={fullWidth ? \"100%\" : undefined}\n            height={\"44px\"}\n            _focusVisible={{\n              boxShadow: \"0 0 0 3px var(--chakra-colors-purple-base)\",\n            }}\n            aria-describedby={\n              caption ? \"network-switch-caption\" : undefined\n            }\n          >\n            {`Switch to ${requiredChain.displayName}`}\n          </Button>\n        )}\n      {caption && (\n        <Text\n          id=\"network-switch-caption\"\n          fontSize=\"sm\"\n          color=\"gray.500\"\n          textAlign=\"center\"\n        >\n          {caption}\n        </Text>\n      )}\n    </Stack>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/constants/withdraw.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/context/dialogContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135,138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135,138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[196,199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[196,199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[694,697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[694,697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, FC, ReactNode, useContext, useState } from \"react\"\n\nexport interface DialogContext {\n  title?: string\n  body?: any\n  isOpen?: boolean\n  openDialog: (title?: string, body?: any) => void\n  onClose: () => void\n}\n\nconst defaultContext: DialogContext = {\n  title: '',\n  body: '',\n  onClose: () => {},\n  openDialog: () => {}\n}\n\nexport const dialogContext = createContext<DialogContext>(defaultContext)\n\nexport const DialogProvider: FC<{ children: ReactNode; }> = ({ children }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n  const [title, setTitle] = useState<string>()\n  const [body, setBody] = useState<string>()\n\n  const openDialog = (title?: string, body?: any) => {\n    setIsOpen(true)\n    setTitle(title)\n    if (body) setBody(body)\n  }\n\n  const onClose = () => setIsOpen(false)\n\n  const value = {\n    title,\n    body,\n    isOpen,\n    openDialog,\n    onClose\n  }\n\n  return (\n    <dialogContext.Provider value={value}>{children}</dialogContext.Provider>\n  )\n}\n\nexport const useDialog = () => useContext(dialogContext)\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/context/geoContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/context/rpc_context.tsx","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":60,"column":17,"nodeType":"TSTypeLiteral","messageId":"bannedTypeMessage","endLine":60,"endColumn":19,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"object"},"fix":{"range":[2067,2069],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"unknown"},"fix":{"range":[2067,2069],"text":"unknown"},"desc":"Replace `{}` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"Record<string, never>"},"fix":{"range":[2067,2069],"text":"Record<string, never>"},"desc":"Replace `{}` with `Record<string, never>`."},{"messageId":"bannedTypeReplacement","data":{"name":"{}","replacement":"NonNullable<unknown>"},"fix":{"range":[2067,2069],"text":"NonNullable<unknown>"},"desc":"Replace `{}` with `NonNullable<unknown>`."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Chain } from \"src/data/chainConfig\"\nimport { createPublicClient, getAddress, getContract, PublicClient } from \"viem\"\nimport { http } from \"wagmi\"\n\nexport const ALCHEMY_API_KEY = process.env.NEXT_PUBLIC_ALCHEMY_KEY\nexport const INFURA_API_KEY = process.env.NEXT_PUBLIC_INFURA_API_KEY\nexport const QUICKNODE_API_KEY = process.env.NEXT_PUBLIC_QUICKNODE_KEY\n\nexport const ALCHEMY_API_URL = {\n  ethereum: \"https://eth-mainnet.alchemyapi.io/v2\",\n  arbitrum: \"https://arb-mainnet.alchemyapi.io/v2\",\n  optimism: \"https://opt-mainnet.alchemyapi.io/v2\"\n}\nexport const INFURA_API_URL = {\n  ethereum: \"https://mainnet.infura.io/v3\",\n  arbitrum: \"https://arbitrum-mainnet.infura.io/v3\",\n  optimism: \"https://optimism-mainnet.infura.io/v3\"\n}\n\nexport const QUICKNODE_API_URL = {\n  scroll: \"https://damp-cool-model.scroll-mainnet.quiknode.pro/\"\n}\nexport async function getActiveProvider(chain: Chain) {\n  let publicClient: PublicClient | null = null\n\n  if (chain.quicknodeRpcUrl && QUICKNODE_API_KEY) {\n    publicClient = createPublicClient({\n      chain: chain.viemChain,\n      transport: http(`${chain.quicknodeRpcUrl}/${QUICKNODE_API_KEY}`)\n    })\n    console.log(\"Attempting to connect via Quicknode...\")\n  } else if (chain.alchemyRpcUrl && ALCHEMY_API_KEY) {\n    publicClient = createPublicClient({\n      chain: chain.viemChain,\n      transport: http(`${chain.alchemyRpcUrl}/${ALCHEMY_API_KEY}`)\n    })\n    console.log(\"Attempting to connect via Alchemy...\")\n  } else if (chain.infuraRpcUrl && INFURA_API_KEY) {\n    publicClient = createPublicClient({\n      chain: chain.viemChain,\n      transport: http(`${chain.infuraRpcUrl}/${INFURA_API_KEY}`)\n    })\n\n    console.log(\"Attempting to connect via Infura...\")\n  }\n\n  // Attempt to connect using the configured provider\n  try {\n    await publicClient?.getBlockNumber()\n    console.log(\"Connected to provider\")\n    return publicClient\n  } catch (error) {\n    console.error(\"Failed to connect to any provider!\", error)\n    return null\n  }\n}\n\nexport async function queryContract(\n  contractAddress: string,\n  abi: readonly {}[],\n  chain: Chain\n) {\n  const publicClient = await getActiveProvider(chain)\n\n  if (!publicClient) {\n    console.error(\"No provider is available!\")\n    return null\n  }\n\n  const contract = getContract({\n    abi,\n    address: getAddress(contractAddress),\n    client: publicClient\n  })\n  return contract\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/context/wagmiContext/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[261,264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[261,264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, useState } from \"react\"\nimport {\n  QueryClient,\n  QueryClientProvider,\n} from \"@tanstack/react-query\"\n\n// Deprecated: server-side Wagmi configuration moved to client-only provider to avoid ESM crashes\nexport const wagmiConfig = undefined as any\n\nexport const QueryProvider = ({\n  children,\n}: {\n  children: ReactNode\n}) => {\n  const [queryClient] = useState(() => new QueryClient())\n  return (\n    <QueryClientProvider client={queryClient}>\n      {/* WagmiProvider is now provided by WagmiClientProvider in _app.tsx */}\n      {children}\n    </QueryClientProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/CELLAR_STAKING_V0815/getStakingEnd.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[101,104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[101,104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { zonedTimeToUtc } from \"date-fns-tz\"\n\nexport const getStakingEnd = async (\n  stakerContract: any\n) => {\n  try {\n    const ended = await stakerContract.read.ended()\n    const endTimestamp = await stakerContract.read.endTimestamp()\n    const endDate =\n      Number(endTimestamp) === 0\n        ? undefined\n        : zonedTimeToUtc(\n            new Date(Number(endTimestamp) * 1000),\n            \"UTC\"\n          )\n    return {\n      ended,\n      endDate,\n    }\n  } catch (error) {\n    return undefined\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/CELLAR_STAKING_V0815/getUserStakes.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[926,929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[926,929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { toEther } from \"utils/formatCurrency\"\nimport { StakerUserData, UserStake } from \"../types\"\nimport { ConfigProps } from \"data/types\"\nimport { formatUnits } from \"viem\"\n\nexport const getUserStakes = async (\n  address: string,\n  stakerContract: any,\n  sommelierPrice: string,\n  strategyConfig: ConfigProps\n) => {\n  try {\n\n    if (!stakerContract) {\n      throw new Error(\"provider is undefined\")\n    }\n\n    const userStakes = await stakerContract.read.getUserStakes([address])\n\n    const claimAllRewards = await stakerContract.simulate.claimAll({account: address})\n\n\n    let totalClaimAllRewards = BigInt(0)\n    claimAllRewards.result.length &&\n      claimAllRewards.result.forEach((reward: bigint) => {\n        totalClaimAllRewards = totalClaimAllRewards + reward\n      })\n\n    let userStakesArray: UserStake[] = []\n    let totalRewards = BigInt(0)\n    let totalBondedAmount = BigInt(0)\n\n\n    userStakes.forEach((item: any) => {\n      const {\n        amount,\n        amountWithBoost,\n        unbondTimestamp,\n        rewardPerTokenPaid,\n        rewards,\n        lock,\n      } = item\n\n      totalRewards = totalRewards + BigInt(rewards)\n      totalBondedAmount = totalBondedAmount + BigInt(amount)\n      userStakesArray.push({\n        amount: BigInt(amount),\n        amountWithBoost: BigInt(amountWithBoost),\n        rewardPerTokenPaid: BigInt(rewardPerTokenPaid),\n        rewards: BigInt(rewards),\n        unbondTimestamp,\n        lock,\n      })\n    })\n\n    //!!!!!!!! TODO This is hardcoded for somm\n    const claimAllRewardsUSD = Number(formatUnits(totalClaimAllRewards, 6)) * Number(sommelierPrice)\n\n    const userStakeData: StakerUserData = {\n      // It's actually list of claimable rewards\n      claimAllRewards: claimAllRewards.result,\n      claimAllRewardsUSD,\n      totalBondedAmount: {\n        value: totalBondedAmount,\n        formatted:\n          toEther(\n            totalBondedAmount,\n            strategyConfig.cellar.decimals, // Must be cellar decimals\n            false,\n            2\n          ),\n      },\n      totalClaimAllRewards: {\n        value: totalClaimAllRewards,\n        formatted:\n          toEther(\n            totalClaimAllRewards,\n            6, // TODO: Post incentive refractor this must be the incentive asset decimals (Hardcoded for somm)\n            false,\n            2\n          ),\n      },\n      totalRewards,\n      userStakes: userStakesArray,\n    }\n    return userStakeData\n  } catch (error) {\n    console.warn(error)\n\n    throw error\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/fetchMarketChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getAllContracts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":11,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Client, getContract } from \"viem\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { AllContracts } from \"../types\"\n\nexport const getAllContracts = async (\n  providerMap: Map<string, Client>,\n  signerMap: Map<string, Client | undefined>\n) => {\n  let contracts: AllContracts = {}\n\n  for (const [key, cellar] of Object.entries(cellarDataMap)) {\n    const provider = providerMap.get(cellar.config.chain.id)\n    const signer = signerMap.get(cellar.config.chain.id)\n\n    // Make sure we have a provider before attempting to create a contract\n    if (!provider) {\n      throw new Error(\n        `Provider for chain ${cellar.config.chain.id} not found`\n      )\n    }\n\n    const cellarContract = getContract({\n      address: cellar.config.cellar.address as `0x${string}`,\n      abi: cellar.config.cellar.abi,\n      client: {\n        public: provider\n      },\n    })\n\n    const cellarSigner = getContract({\n      address: cellar.config.cellar.address as `0x${string}`,\n      abi: cellar.config.cellar.abi,\n      client: {\n        public: provider,\n        wallet: signer || undefined\n      }\n    })\n\n    const stakerContract =\n      cellar.config.staker &&\n      getContract({\n        address: cellar.config.staker.address as `0x${string}`,\n        abi: cellar.config.staker.abi,\n        client: {\n          public: provider\n        }\n      })\n\n    const stakerSigner =\n      cellar.config.staker &&\n      getContract({\n        address: cellar.config.staker.address as `0x${string}`,\n        abi: cellar.config.staker.abi,\n        client: {\n          public: provider,\n          wallet: signer || undefined\n        }\n      })\n\n    const cellarRouterSigner =\n      cellar.config.cellarRouter &&\n      getContract({\n        address: cellar.config.cellarRouter.address as `0x${string}`,\n        abi: cellar.config.cellarRouter.abi,\n        client: {\n          public: provider,\n          wallet: signer || undefined,\n        },\n      })\n\n    const boringVaultLens = \n      cellar.config.lens &&\n        getContract({\n          address: cellar.config.lens.address as `0x${string}`,\n          abi: cellar.config.lens.abi,\n          client: {\n            public: provider,\n          },\n        })\n\n    const boringQueue =\n      cellar.config.boringQueue &&\n      getContract({\n        address: cellar.config.boringQueue.address as `0x${string}`,\n        abi: cellar.config.boringQueue.abi,\n        client: {\n          public: provider,\n          wallet: signer || undefined,\n        },\n      })\n\n    const contract = {\n      cellarContract,\n      cellarSigner,\n      stakerContract,\n      stakerSigner,\n      cellarRouterSigner,\n      boringVaultLens,\n      boringQueue,\n      chain: cellar.config.chain.id,\n    }\n\n    let chainId = ''\n    if (cellar.config.chain.id !== 'ethereum'){\n      chainId = `-${cellar.config.chain.id}`\n    }\n\n    contracts = {\n      ...contracts,\n      [`${cellar.config.cellar.address}${chainId}`]: contract,\n    }\n  }\n\n  return contracts\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getAllStrategiesData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getBaseApy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getChanges.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getMerkleRewardsApy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[404,407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[404,407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1365,1368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1365,1368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { fetchCoingeckoPrice } from \"queries/get-coingecko-price\"\nimport { CellarNameKey, ConfigProps } from \"data/types\"\nimport { tokenConfigMap } from \"data/tokenConfig\"\nimport { formatUnits } from \"viem\"\n\nconst ARB_TOKENS_IN_PERIOD_ETH = 30000\nconst ARB_TOKENS_IN_PERIOD_USD = 7500\n\nconst OP_TOKENS_IN_PERIOD = 5000\n\nconst PERIOD_DAYS = 7\n\nexport const getMerkleRewardsApy = async (\n  cellarContract: any,\n  cellarConfig: ConfigProps\n) => {\n  let tokenPrice;\n  let tokensInPeriod;\n\n  if (cellarConfig.chain.id === \"arbitrum\") {\n    tokenPrice = await fetchCoingeckoPrice(tokenConfigMap.ARB_ARBITRUM, \"usd\");\n\n    tokensInPeriod = cellarConfig.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_ARB\n      ? ARB_TOKENS_IN_PERIOD_ETH\n      : ARB_TOKENS_IN_PERIOD_USD;\n\n  } else {\n    tokenPrice = await fetchCoingeckoPrice(tokenConfigMap.OP_OPTIMISM, \"usd\");\n    tokensInPeriod = OP_TOKENS_IN_PERIOD;\n  }\n\n  const baseAssetPrice = await fetchCoingeckoPrice(cellarConfig.baseAsset, \"usd\");\n  const totalValueStaked = await fetchTotalValueStaked(cellarContract);\n\n  const totalValueStakedInUsd =\n    parseFloat(formatUnits(totalValueStaked, cellarConfig.cellar.decimals)) * Number(baseAssetPrice)\n\n  return ((tokensInPeriod * Number(tokenPrice)) /\n      totalValueStakedInUsd) *\n    (365 / PERIOD_DAYS) *\n    100\n}\nconst fetchTotalValueStaked = async (\n  cellarContract: any\n) => {\n  try {\n    const totalAssets = await cellarContract.read.totalAssets()\n    return totalAssets\n  } catch (error) {\n    console.error(\"Failed to fetch total value staked:\", error)\n    return BigInt(0)\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getPreviewShare.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[91,94],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[91,94],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const getPreviewRedeem = async ({\n  cellarContract,\n  value,\n}: {\n  cellarContract: any\n  value?: string\n}) => {\n  if (!value) return\n  try {\n    const shares = await cellarContract.read.previewRedeem([value])\n    return {\n      value: shares,\n    }\n  } catch (e) {\n    console.error(\"Error in getPreviewRedeem\", e)\n    return null\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getRewardsApy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[199,202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[199,202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ConfigProps } from \"data/types\"\nimport { formatUnits } from \"viem\"\n\nexport const getRewardsApy = async ({\n  stakerContract,\n  sommPrice,\n  assetPrice,\n  cellarConfig,\n}: {\n  stakerContract: any\n  sommPrice: string\n  assetPrice: string\n  cellarConfig: ConfigProps\n}) => {\n  try {\n\n    const stakingEnd = await stakerContract.read.endTimestamp()\n    const isStakingOngoing = BigInt(Date.now()) < stakingEnd * 1000n;\n\n    let potentialStakingApy = 0\n    if (isStakingOngoing) {\n      const rewardRateRes = await stakerContract.read.rewardRate()\n      const rewardRate = formatUnits(rewardRateRes, 6)\n\n\n      const totalDepositWithBoostRes =\n        await stakerContract.read.totalDepositsWithBoost()\n      const totalDepositWithBoost =\n        formatUnits(totalDepositWithBoostRes.toString(), cellarConfig.cellar.decimals)\n\n      // Assuming a user deposits 10k worth of the asset\n      const userDeposit = 10000 / Number(assetPrice)\n      const withUserDeposit = (Number(totalDepositWithBoost) + userDeposit) * Number(assetPrice)\n\n      potentialStakingApy = Number(rewardRate)\n        * Number(sommPrice)\n        / withUserDeposit\n        * 365 * 24 * 60 * 60 * 100\n\n    }\n\n    return {\n      formatted: potentialStakingApy.toFixed(2) + \"%\",\n      value: potentialStakingApy,\n    }\n  } catch (error) {\n    console.warn(error)\n    return\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getStrategyData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getToken.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getTokenPrice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getTvm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getUsdcGainChartData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'day' is assigned a value but never used.","line":18,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":63,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { format, isSameDay, subDays } from \"date-fns\"\nimport { getGainPct } from \"utils/getGainPct\"\nimport { GetAssetGainChartDataProps, PriceData } from \"../types\"\nimport { MarketChartResponse } from \"./fetchMarketChart\"\n\nexport type UsdcGainChartData = Awaited<\n  ReturnType<typeof getUsdcGainChartData>\n>\n\ninterface GetUsdcGainChartData extends GetAssetGainChartDataProps {\n  usdcData: MarketChartResponse\n}\n// Shift back 1 day coin gecko price is intentional\nexport const getUsdcGainChartData = async (\n  props: GetUsdcGainChartData\n) => {\n  try {\n    const { day, interval, firstDate } = props\n    const isDaily = interval === \"daily\"\n    const usdcData = props.usdcData\n\n    const usdcGainPct = (() => {\n      let res: PriceData[] = []\n      usdcData.prices.map(([date, value]) => {\n        const firstDailyDateData =\n          isDaily &&\n          firstDate &&\n          usdcData.prices.find((item) =>\n            isSameDay(subDays(new Date(item[0]), 1), firstDate)\n          )\n\n        const firstData = isDaily\n          ? firstDailyDateData\n          : usdcData.prices[0]\n        if (firstData) {\n          res.push({\n            date,\n            change: getGainPct(value, firstData[1]),\n            value: value,\n          })\n        }\n      })\n      return res\n    })()\n\n    let usdcMap = new Map()\n\n    usdcGainPct.map((usdc) => {\n      const getKey = (date: number) =>\n        format(new Date(date), interval === \"daily\" ? \"dLL\" : \"dHH\")\n\n      if (!usdcMap.has(getKey(usdc.date))) {\n        usdcMap.set(getKey(usdc.date), {\n          x: isDaily\n            ? subDays(new Date(usdc.date), 1)\n            : new Date(usdc.date),\n          y: usdc.change,\n          value: usdc.value.toFixed(6),\n        })\n      }\n    })\n    return {\n      usdcDatum: Array.from(usdcMap, ([_, v]) => v).slice(\n        isDaily ? 1 : 0\n      ),\n    }\n  } catch (error) {\n    console.warn(error)\n    throw error\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getUserData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatUnits' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useAccount' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'cellarDataMap' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStrategyData' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAllStrategiesData' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatUSD' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'address' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'publicClient' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[421,424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[421,424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chainId' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[729,732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[729,732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[885,888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[885,888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contracts' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'address' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userAddress' is defined but never used.","line":39,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sommPrice' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'baseAssetPrice' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'chain' is defined but never used.","line":42,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":8},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1096,1099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1096,1099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { formatUnits } from \"viem\"\nimport { useAccount, usePublicClient } from \"wagmi\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { getStrategyData } from \"./getStrategyData\"\nimport { getAllStrategiesData } from \"./getAllStrategiesData\"\nimport { useQuery } from \"@tanstack/react-query\"\nimport { formatUSD } from \"utils/formatCurrency\"\n\nexport const getUserData = async (\n  address: string,\n  publicClient: any,\n  chainId: number\n) => {\n  try {\n    // This legacy function isn't used for critical paths anymore.\n    // Return a safe minimal object to prevent runtime errors.\n    return {\n      shares: 0n,\n      stakedShares: 0n,\n      strategyData: null,\n      allStrategiesData: null,\n      netValue: 0,\n    } as any\n  } catch {\n    return {\n      shares: 0n,\n      stakedShares: 0n,\n      strategyData: null,\n      allStrategiesData: null,\n      netValue: 0,\n    } as any\n  }\n}\n\nexport const getUserDataWithContracts = async ({\n  contracts,\n  address,\n  strategyData,\n  userAddress,\n  sommPrice,\n  baseAssetPrice,\n  chain,\n}: {\n  contracts: any\n  address: string\n  strategyData: any\n  userAddress: string\n  sommPrice: string\n  baseAssetPrice: string\n  chain: string\n}) => {\n  try {\n    // For now, return a safe default since the contract approach is problematic\n    // The actual user data should come from useUserBalance hook which is already\n    // being used in useUserStrategyData\n    return {\n      userStrategyData: {\n        userData: {\n          netValue: { formatted: \"0\", value: 0 },\n          shares: { formatted: \"0\", value: 0n },\n          stakedShares: { formatted: \"0\", value: 0n },\n        },\n        strategyData,\n      },\n      userStakes: null,\n    }\n  } catch (error) {\n    console.error(\"Error in getUserData:\", error)\n    return {\n      userStrategyData: {\n        userData: {\n          netValue: { formatted: \"0\", value: 0 },\n          shares: { formatted: \"0\", value: 0n },\n          stakedShares: { formatted: \"0\", value: 0n },\n        },\n        strategyData,\n      },\n      userStakes: null,\n    }\n  }\n}\n\nexport const useUserData = (address: string, chainId: number) => {\n  const publicClient = usePublicClient()\n\n  return useQuery({\n    queryKey: [\"USE_USER_DATA\", address, chainId],\n    queryFn: async () => {\n      return await getUserData(address, publicClient, chainId)\n    },\n    enabled: Boolean(address && chainId && publicClient),\n  })\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/common/getUserDataAllStrategies.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2495,2498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2495,2498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3400,3403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3400,3403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3439,3442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3439,3442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AllContracts, AllStrategiesData } from \"../types\"\nimport { formatUSD, toEther } from \"utils/formatCurrency\"\nimport { reactQueryClient } from \"utils/reactQuery\"\nimport { getUserDataWithContracts } from \"./getUserData\"\nimport { fetchCoingeckoPrice } from \"queries/get-coingecko-price\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { ConfigProps } from \"data/types\"\n\nexport const getUserDataAllStrategies = async ({\n  allContracts,\n  strategiesData,\n  userAddress,\n  sommPrice,\n  chain,\n}: {\n  allContracts: AllContracts\n  strategiesData: AllStrategiesData\n  userAddress: string\n  sommPrice: string\n  chain: string\n}) => {\n  const userDataRes = await Promise.all(\n    Object.entries(allContracts)?.map(async ([key, contracts]) => {\n      // Only get data for the current chain\n      if (contracts.chain !== chain) {\n        return\n      }\n\n      // If chain is not ethereum, key format is '{address}-{chain}', otherwise it is '{address}'\n      const address = key.split(\"-\")[0]\n\n      const strategyData = strategiesData.find(\n        (item) =>\n          item?.address === address &&\n          item.config.chain.id === contracts.chain\n      )\n\n      const result = await reactQueryClient.fetchQuery({\n        queryKey: [\n          \"USE_USER_DATA\",\n          { contractAddress: address, userAddress },\n        ],\n        queryFn: async () => {\n          const strategy = Object.values(cellarDataMap).find(\n            ({ config }) =>\n              config.cellar.address.toLowerCase() ===\n                address.toLowerCase() &&\n              config.chain.id === contracts.chain\n          )!\n\n          const config: ConfigProps = strategy.config!\n\n          const baseAsset = config.baseAsset\n          const baseAssetPrice = await fetchCoingeckoPrice(\n            baseAsset,\n            \"usd\"\n          )\n\n          try {\n            return await getUserDataWithContracts({\n              address,\n              contracts,\n              sommPrice,\n              strategyData: strategyData,\n              userAddress,\n              baseAssetPrice: baseAssetPrice!,\n              chain: contracts.chain,\n            })\n          } catch (error) {\n            console.log(\"error\", error)\n            // Return a safe fallback to keep the query defined\n            return {\n              shares: 0n,\n              stakedShares: 0n,\n              strategyData: null,\n              allStrategiesData: null,\n              netValue: 0,\n              userStakes: null,\n            } as any\n          }\n        },\n      })\n      return result\n    })\n  )\n\n  const userData = userDataRes.filter((item) => !!item)\n\n  const totalNetValue = (() => {\n    let total = 0\n    userData.forEach((item) => {\n      total += Number(item?.netValue)\n    })\n    return total\n  })()\n\n  const totalSommRewards = userData.reduce((total, item) => {\n    return (\n      total +\n      (item\n        ? item.userStakes\n          ? item.userStakes.totalClaimAllRewards.value\n          : 0n\n        : 0n)\n    )\n  }, 0n)\n\n  const totalSommRewardsInUsd = userData.reduce((total, item) => {\n    return (\n      total +\n      (item\n        ? item.userStakes\n          ? Number(item.userStakes.claimAllRewardsUSD)\n          : 0\n        : 0)\n    )\n  }, 0)\n  type Data = Awaited<ReturnType<typeof getUserDataWithContracts>>\n  const isData = (item: Data | undefined): item is Data => {\n    return Boolean(item && typeof (item as any).netValue === 'number' && (item as any).netValue > 0)\n  }\n  const cleanData = userData.filter(isData)\n\n  const data = {\n    totalNetValue: {\n      value: totalNetValue,\n      formatted: formatUSD(String(totalNetValue)),\n    },\n    totalSommRewards: {\n      value: totalSommRewards,\n      formatted: Number(\n        toEther(totalSommRewards, 6, false, 2)\n      ).toLocaleString(),\n    },\n    totalSommRewardsInUsd,\n    strategies: cleanData,\n  }\n\n  return data\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/actions/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1268,1271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1268,1271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getContract } from \"viem\"\nimport { getAllStrategiesData } from \"./common/getAllStrategiesData\"\nimport { getStrategyData } from \"./common/getStrategyData\"\n\nexport interface UserStake {\n  amount: bigint\n  amountWithBoost: bigint\n  rewardPerTokenPaid: bigint\n  rewards: bigint\n  unbondTimestamp: number\n  lock: number\n}\nexport interface StakerUserData {\n  claimAllRewards: bigint[]\n  claimAllRewardsUSD: number\n  totalBondedAmount: {\n    value: bigint\n    formatted: string\n  }\n  totalClaimAllRewards: {\n    value: bigint\n    formatted: string\n  }\n  totalRewards: bigint\n  userStakes: UserStake[]\n}\n\nexport interface StakerData {\n  rewardRate: bigint\n  potentialStakingApy: bigint\n}\n\nexport interface CellarData {\n  activeAsset: string\n  name: string\n  maxLocked: bigint\n  accrualPeriod: bigint\n  totalAssets: bigint\n  apy: bigint\n}\n\nexport interface CellarUserData {\n  maxDeposit: bigint\n  maxWithdraw: bigint\n  netValue: bigint\n}\n\nexport interface DepositAndSwapPayload {\n  selectedToken?: {\n    address: string\n    decimals: number\n    symbol: string\n  }\n  activeAsset?: {\n    address: string\n    decimals: number\n    symbol: string\n  }\n  cellarAddress: string\n  depositAmount: number\n  slippage: number\n}\n\nexport interface DepositAndSwapParams {\n  provider: any\n  senderAddress: string\n  payload: DepositAndSwapPayload\n}\n\nexport type KnownCoingeckoAssetId =\n  | \"wrapped-bitcoin\"\n  | \"weth\"\n  | \"usd-coin\"\n\nexport interface PriceData {\n  date: number\n  change: number\n  value: number\n}\n\nexport type GetAssetGainChartDataProps = {\n  day: number\n  interval: \"hourly\" | \"daily\"\n  firstDate?: Date\n}\n\nexport interface StrategyContracts {\n  cellarContract: ReturnType<typeof getContract>\n  cellarSigner: ReturnType<typeof getContract>\n  stakerContract?: ReturnType<typeof getContract>\n  stakerSigner?: ReturnType<typeof getContract>\n  cellarRouterSigner?: ReturnType<typeof getContract>\n  chain: string\n}\nexport type AllContracts = Record<string, StrategyContracts>\n\nexport type AllStrategiesData = Awaited<\n  ReturnType<typeof getAllStrategiesData>\n>\n\nexport type StrategyData = Awaited<ReturnType<typeof getStrategyData>>\n\nexport type GetAllTimeShareValueQuery = {\n  __typename?: \"Query\" | undefined\n  cellar?:\n    | {\n        __typename?: \"Cellar\" | undefined\n        dayDatas: Array<{\n          __typename?: \"CellarDayData\"\n          date: number\n          shareValue: string\n        }>\n      }\n    | null\n    | undefined\n}\n\nexport type GetMonthlyShareValueQuery = {\n  __typename?: \"Query\" | undefined\n  cellar?:\n    | {\n        __typename?: \"Cellar\" | undefined\n        dayDatas: Array<{\n          __typename?: \"CellarDayData\"\n          date: number\n          shareValue: string\n        }>\n      }\n    | null\n    | undefined\n}\n\nexport type GetWeeklyShareValueQuery = {\n  __typename?: \"Query\" | undefined\n  cellar?:\n    | {\n        __typename?: \"Cellar\" | undefined\n        dayDatas: Array<{\n          __typename?: \"CellarDayData\"\n          date: number\n          shareValue: string\n        }>\n      }\n    | null\n    | undefined\n}\n\nexport type GetHourlyShareValueQuery = {\n  __typename?: \"Query\" | undefined\n  cellarHourDatas: Array<{\n    __typename?: \"CellarHourData\"\n    date: number\n    shareValue: string\n  }>\n}\n\nexport type GetStrategyDataQuery = {\n  __typename?: \"Query\"\n  cellar?: {\n    __typename?: \"Cellar\"\n    id: string\n    tvlTotal: string\n    shareValue: string\n    dayDatas: Array<{\n      __typename?: \"CellarDayData\"\n      date: number\n      shareValue: string\n    }>\n  } | null\n}\n\nexport type GetAllStrategiesDataQuery = {\n  __typename?: \"Query\"\n  cellars: Array<{\n    __typename?: \"Cellar\"\n    id: string\n    tvlTotal: string\n    shareValue: string\n    dayDatas: Array<{\n      __typename?: \"CellarDayData\"\n      date: number\n      shareValue: string\n    }>\n    chain: string\n  }>\n}\n\nexport type GetTVLDataQuery = {\n  [address: string]: number;\n  'total_tvl': number;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/cellarDataMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/chainConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'QUICKNODE_API_URL' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { mainnet, arbitrum, optimism } from \"wagmi/chains\"\nimport { Chain as ViemChain } from \"viem\"\nimport {\n  ALCHEMY_API_URL,\n  INFURA_API_URL,\n  QUICKNODE_API_URL,\n} from \"context/rpc_context\"\n\nexport interface Chain {\n  id: string\n  viemId: string\n  viemChain: ViemChain\n  wagmiId: 10 | 1 | 42161\n  displayName: string\n  logoPath: string\n  alt: string\n  infuraRpcUrl?: string\n  alchemyRpcUrl?: string\n  quicknodeRpcUrl?: string\n  blockExplorer: {\n    name: string\n    url: string\n  }\n  withdrawQueueAddress: string\n  priceRouterAddress: string\n}\n\nexport const placeholderChain: Chain = {\n  id: \"unknown\",\n  viemChain: mainnet,\n  viemId: \"\",\n  wagmiId: 1,\n  displayName: \"Switch Chain (Unsupported)\",\n  logoPath: \"/assets/icons/unknownchain.svg\",\n  alt: \"Placeholder logo\",\n  infuraRpcUrl: \"\",\n  alchemyRpcUrl: \"\",\n  quicknodeRpcUrl: \"\",\n  blockExplorer: {\n    name: \"Unknown\",\n    url: \"#\",\n  },\n  withdrawQueueAddress: \"\",\n  priceRouterAddress: \"\",\n}\n\nexport const chainConfig: Chain[] = [\n  {\n    id: \"ethereum\",\n    viemId: \"Ethereum\",\n    viemChain: mainnet,\n    wagmiId: mainnet.id,\n    displayName: \"Ethereum\",\n    logoPath: \"/assets/icons/ethereum-alt.png\",\n    alt: \"Ethereum logo\",\n    infuraRpcUrl: INFURA_API_URL.ethereum,\n    alchemyRpcUrl: ALCHEMY_API_URL.ethereum,\n    blockExplorer: mainnet.blockExplorers.default,\n    withdrawQueueAddress:\n      \"0x5751d75b642975E4E7fdE39f35F9a6c11b867169\",\n    priceRouterAddress: \"0xA1A0bc3D59e4ee5840c9530e49Bdc2d1f88AaF92\",\n    quicknodeRpcUrl: \"\",\n  },\n  {\n    id: \"arbitrum\",\n    viemId: \"Arbitrum One\",\n    viemChain: arbitrum,\n    wagmiId: arbitrum.id,\n    displayName: \"Arbitrum\",\n    logoPath: \"/assets/icons/arbitrum.svg\",\n    alt: \"Arbitrum logo\",\n    infuraRpcUrl: INFURA_API_URL.arbitrum,\n    alchemyRpcUrl: ALCHEMY_API_URL.arbitrum,\n    blockExplorer: arbitrum.blockExplorers.default,\n    withdrawQueueAddress:\n      \"0x516AD60801b62fCABCCDA7be178e4478D4018071\",\n    priceRouterAddress: \"0xBB35643AE2Af63C616a7ed6eB8Df15ca1d86fe11\",\n  },\n  {\n    id: \"optimism\",\n    viemId: \"OP Mainnet\",\n    viemChain: optimism,\n    wagmiId: optimism.id,\n    displayName: \"Optimism\",\n    logoPath: \"/assets/icons/optimism.svg\",\n    alt: \"Optimism logo\",\n    infuraRpcUrl: INFURA_API_URL.optimism,\n    alchemyRpcUrl: ALCHEMY_API_URL.optimism,\n    blockExplorer: optimism.blockExplorers.default,\n    withdrawQueueAddress:\n      \"0x516AD60801b62fCABCCDA7be178e4478D4018071\",\n    priceRouterAddress: \"0xBB35643AE2Af63C616a7ed6eB8Df15ca1d86fe11\",\n  },\n  // Scroll removed per requirements\n]\n\nexport const chainConfigMap: Record<string, Chain> =\n  chainConfig.reduce<Record<string, Chain>>(\n    (map, chain) => {\n      map[chain.id] = chain\n      return map\n    },\n    { unknown: placeholderChain }\n  )\n\nexport const supportedChains = [\"ethereum\", \"arbitrum\", \"optimism\"]\n\nexport const getChainByViemId = (viemId: string | undefined) =>\n  chainConfig.find((c) => c.viemId === viemId) ??\n  chainSlugMap.ETHEREUM\nexport const chainSlugMap = {\n  ETHEREUM: chainConfigMap[\"ethereum\"],\n  ARBITRUM: chainConfigMap[\"arbitrum\"],\n  OPTIMISM: chainConfigMap[\"optimism\"],\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/context/apyChartContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dayChartProps' is assigned a value but never used.","line":83,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeline' is assigned a value but never used.","line":175,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":18},{"ruleId":"@typescript-eslint/no-non-null-asserted-optional-chain","severity":1,"message":"Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.","line":181,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNullOptionalChain","endLine":181,"endColumn":45,"suggestions":[{"messageId":"suggestRemovingNonNull","fix":{"range":[4124,4125],"text":""},"desc":"You should remove the non-null assertion."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array. Outer scope values like 'prevWeek' aren't valid dependencies because mutating them doesn't re-render the component.","line":218,"column":6,"nodeType":"ArrayExpression","endLine":218,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [address, reexecuteWeeklyTrigger, cellarData.config.chain.id]","fix":{"range":[5346,5389],"text":"[address, reexecuteWeeklyTrigger, cellarData.config.chain.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array. Outer scope values like 'prevMonth' aren't valid dependencies because mutating them doesn't re-render the component.","line":248,"column":6,"nodeType":"ArrayExpression","endLine":248,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [address, reexecuteMonthlyTrigger, cellarData.config.chain.id]","fix":{"range":[6404,6449],"text":"[address, reexecuteMonthlyTrigger, cellarData.config.chain.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array.","line":274,"column":6,"nodeType":"ArrayExpression","endLine":274,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [address, cellarData.config.chain.id, reexecuteAllTimeTrigger]","fix":{"range":[7430,7464],"text":"[address, cellarData.config.chain.id, reexecuteAllTimeTrigger]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'weeklyData' is assigned a value but never used.","line":276,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'monthlyData' is assigned a value but never used.","line":279,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":279,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setDataAllTime' is assigned a value but never used.","line":410,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":410,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  createContext,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n  ReactNode\n} from \"react\"\nimport { LineSvgProps, LineSeries } from \"@nivo/line\"\nimport { format, subDays } from \"date-fns\"\nimport {\n  getPreviousMonth,\n  getPreviousWeek,\n} from \"utils/calculateTime\"\nimport { createApyChangeDatum } from \"utils/chartHelper\"\nimport {\n  cellarDataMap,\n  CellaAddressDataMap,\n} from \"src/data/cellarDataMap\"\nimport { CellarData } from \"data/types\"\nimport { config as utilConfig } from \"src/utils/config\"\nimport { useStrategyData } from \"data/hooks/useStrategyData\"\nimport { fetchWeeklyShareValueData } from \"queries/get-weekly-share-value-data\"\nimport { fetchMonthlyShareValueData } from \"queries/get-monthly-share-value-data\"\nimport { fetchAllTimeShareValueData } from \"queries/get-all-time-share-value-data\"\nimport {\n  GetAllTimeShareValueQuery,\n  GetMonthlyShareValueQuery,\n  GetWeeklyShareValueQuery,\n} from \"src/data/actions/types\"\n\nexport interface DataProps {\n  series?: LineSeries[]\n  chartProps: Partial<LineSvgProps<LineSeries>>\n}\n\nexport interface ApyData {\n  yFormatted: string | number\n  xFormatted: string | number\n  average: string | number\n}\n\nexport interface ShowLine {\n  apy: boolean\n}\n\ntype Timeline = \"7D\" | \"30D\" | \"ALL\"\n\nexport interface ApyChartContext {\n  isFetching: boolean\n  isError: boolean\n  data: DataProps & { label?: string }\n  reexecuteWeekly: () => void\n  reexecuteMonthly: () => void\n  reexecuteAllTime: () => void\n  timeArray: {\n    title: string\n    onClick: () => void\n  }[]\n  apyChange: ApyData\n  setApyChange: Dispatch<SetStateAction<ApyData>>\n  showLine: ShowLine\n  setShowLine: Dispatch<SetStateAction<ShowLine>>\n}\n\nconst hourlyChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d %H:%M\",\n    tickValues: \"every 3 hours\",\n  },\n  xFormat: \"time:%H:%M\",\n  xScale: {\n    type: \"time\",\n    format: \"%H:%M\",\n    useUTC: false,\n    precision: \"hour\",\n  },\n}\n\nconst dayChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every day\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\n\nconst monthChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every 2 days\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\n\nconst allTimeChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every 2 days\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\n\nconst defaultSerieId = \"default\"\n\nconst initialData: ApyChartContext = {\n  data: {\n    series: [{ id: defaultSerieId, data: [{ x: new Date(), y: 0 }] }],\n    chartProps: hourlyChartProps,\n  },\n  isFetching: true,\n  isError: false,\n  reexecuteWeekly: () => null,\n  reexecuteMonthly: () => null,\n  reexecuteAllTime: () => null,\n  setApyChange: () => null,\n  apyChange: {\n    xFormatted: \"\",\n    yFormatted: \"\",\n    average: \"\",\n  },\n  timeArray: [\n    {\n      title: \"\",\n      onClick: () => null,\n    },\n  ],\n  showLine: {\n    apy: true,\n  },\n  setShowLine: () => null,\n}\n\nconst apyChartContext = createContext<ApyChartContext>(initialData)\n\nconst prevWeek = getPreviousWeek()\nconst prevMonth = getPreviousMonth()\n\nexport const ApyChartProvider: FC<{\n  address: string\n  chain: string\n  children: ReactNode\n}> = ({ children, address, chain }) => {\n  let chainStr = \"\"\n  if (chain !== \"ethereum\") {\n    chainStr = \"-\" + chain\n  }\n\n  const cellarConfig: CellarData =\n    CellaAddressDataMap[address.toLowerCase() + chainStr]\n  const [showLine, setShowLine] = useState<ShowLine>({\n    apy: true,\n  })\n  const [timeline, setTimeline] = useState<Timeline>(\"7D\")\n  const cellarData = Object.values(cellarDataMap).find(\n    (item) =>\n      item.config.cellar.address === address &&\n      item.config.chain.id === cellarConfig.config.chain.id\n  )!\n  const launchDate = cellarData?.launchDate!\n  const { data: strategyData, isLoading: isStrategyDataLoading } =\n    useStrategyData(\n      cellarData!.config.cellar.address,\n      cellarData!.config.chain.id\n    )\n  const launchDay = launchDate ?? subDays(new Date(), 8)\n  const launchEpoch = Math.floor(launchDay.getTime() / 1000)\n\n  const [weeklyDataRaw, setWeeklyDataRaw] = useState<\n    GetWeeklyShareValueQuery | undefined\n  >(undefined)\n  const [weeklyIsFetching, setWeeklyIsFetching] = useState(false)\n  const [weeklyError, setWeeklyError] = useState(null)\n  const [reexecuteWeeklyTrigger, setReexecuteWeeklyTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteWeekly = useCallback(() => {\n    setReexecuteWeeklyTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setWeeklyIsFetching(true)\n    fetchWeeklyShareValueData(\n      prevWeek,\n      address,\n      cellarData.config.chain.id\n    )\n      .then((data) => {\n        setWeeklyDataRaw(data)\n        setWeeklyIsFetching(false)\n      })\n      .catch((error) => {\n        setWeeklyError(error)\n        setWeeklyIsFetching(false)\n      })\n  }, [prevWeek, address, reexecuteWeeklyTrigger]) // re-execute the effect when 'prevWeek' or 'address' changes\n\n  const [monthlyDataRaw, setMonthlyDataRaw] = useState<\n    GetMonthlyShareValueQuery | undefined\n  >(undefined)\n  const [monthlyIsFetching, setMonthlyIsFetching] = useState(false)\n  const [monthlyError, setMonthlyError] = useState(null)\n  const [reexecuteMonthlyTrigger, setReexecuteMonthlyTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteMonthly = useCallback(() => {\n    setReexecuteMonthlyTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setMonthlyIsFetching(true)\n    fetchMonthlyShareValueData(\n      prevMonth,\n      address,\n      cellarData.config.chain.id\n    )\n      .then((data) => {\n        setMonthlyDataRaw(data)\n        setMonthlyIsFetching(false)\n      })\n      .catch((error) => {\n        setMonthlyError(error)\n        setMonthlyIsFetching(false)\n      })\n  }, [prevMonth, address, reexecuteMonthlyTrigger]) // re-execute the effect when 'prevMonth' or 'address' changes\n\n  const [allTimeDataRaw, setAllTimeDataRaw] = useState<\n    GetAllTimeShareValueQuery | undefined\n  >(undefined)\n  const [allTimeIsFetching, setAllTimeIsFetching] = useState(false)\n  const [allTimeError, setAllTimeError] = useState(null)\n  const [reexecuteAllTimeTrigger, setReexecuteAllTimeTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteAllTime = useCallback(() => {\n    setReexecuteAllTimeTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setAllTimeIsFetching(true)\n    fetchAllTimeShareValueData(address, cellarData.config.chain.id)\n      .then((data) => {\n        setAllTimeDataRaw(data)\n        setAllTimeIsFetching(false)\n      })\n      .catch((error) => {\n        setAllTimeError(error)\n        setAllTimeIsFetching(false)\n      })\n  }, [address, reexecuteAllTimeTrigger])\n\n  let weeklyData = weeklyDataRaw?.cellar?.dayDatas.filter(\n    (item) => new Date(item.date * 1000) > launchDate\n  )\n  let monthlyData = monthlyDataRaw?.cellar?.dayDatas.filter(\n    (item) => new Date(item.date * 1000) > launchDate\n  )\n\n  // data inverted\n  let allTimeData = allTimeDataRaw?.cellar?.dayDatas\n    .filter((item) => new Date(item.date * 1000) > launchDate)\n    .reverse()\n\n  // Functions to update data returned by hook\n  const setDataWeekly = useCallback(() => {\n    setTimeline(\"7D\")\n    let apyDatum = createApyChangeDatum({\n      data: allTimeData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      }),\n      launchEpoch,\n      decimals: cellarConfig.config.cellar.decimals, // Cellar decimals\n      smooth: true,\n      daysSmoothed: 7,\n      daysRendered: 7,\n    })\n\n    const series = [\n      {\n        id: \"apy\",\n        data: apyDatum || []\n      },\n    ]\n\n    setData({\n      series,\n      chartProps: monthChartProps, // Note the use of month chart props here, this is due to the fixed time window\n      label: \"7D\",\n    })\n\n    if (\n      series &&\n      series.length > 0 &&\n      series[0].data &&\n      series[0].data.length > 0\n    ) {\n      const latestData = series[0].data.at(-1)\n      const firstData = series[0].data.at(0)\n\n      const dateText = `${format(\n        new Date(String(firstData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )} - ${format(\n        new Date(String(latestData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )}`\n      const valueExists: boolean =\n        Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n\n      let average =\n        Number(\n          apyDatum?.reduce((a, b) => Number(a) + Number(b), 0)\n        ) / Number(apyDatum?.length)\n\n      setApyChange({\n        xFormatted: dateText,\n        yFormatted: `${valueExists ? String(latestData?.y) : \"--\"}`,\n        average: average.toFixed(1) + \"%\",\n      })\n    }\n  }, [allTimeData, launchEpoch, cellarConfig.config.cellar.decimals])\n\n  const setDataMonthly = useCallback(() => {\n    setTimeline(\"30D\")\n    let apyDatum = createApyChangeDatum({\n      data: allTimeData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      }),\n      launchEpoch,\n      decimals: cellarConfig.config.cellar.decimals, // Cellar decimals\n      smooth: true,\n      daysSmoothed: 30,\n      daysRendered: 30,\n    })\n    const series = [\n      {\n        id: \"apy\",\n        data: apyDatum || []\n      },\n    ]\n\n    setData({\n      series,\n      chartProps: monthChartProps,\n      label: \"30D\",\n    })\n\n    if (\n      series &&\n      series.length > 0 &&\n      series[0].data &&\n      series[0].data.length > 0\n    ) {\n      const latestData = series[0].data.at(-1)\n      const firstData = series[0].data.at(0)\n\n      const dateText = `${format(\n        new Date(String(firstData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )} - ${format(\n        new Date(String(latestData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )}`\n      const valueExists: boolean =\n        Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n\n      let average =\n        Number(\n          apyDatum?.reduce((a, b) => Number(a) + Number(b), 0)\n        ) / Number(apyDatum?.length)\n\n      setApyChange({\n        xFormatted: dateText,\n        yFormatted: `${valueExists ? String(latestData?.y) : \"--\"}`,\n        average: average.toFixed(1) + \"%\",\n      })\n    }\n  }, [allTimeData, launchEpoch, cellarConfig.config.cellar.decimals])\n\n  const setDataAllTime = useCallback(() => {\n    setTimeline(\"ALL\")\n    let apyDatum = createApyChangeDatum({\n      data: allTimeData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      }),\n      launchEpoch,\n      decimals: cellarConfig.config.cellar.decimals, // Cellar decimals\n      smooth: false,\n      daysSmoothed: 0,\n      daysRendered: 0,\n    })\n    const series = [\n      {\n        id: \"apy\",\n        data: apyDatum || []\n      },\n    ]\n    setData({\n      series,\n      chartProps: allTimeChartProps,\n      label: \"All time\",\n    })\n\n    if (\n      series &&\n      series.length > 0 &&\n      series[0].data &&\n      series[0].data.length > 0\n    ) {\n      const latestData = series[0].data.at(-1)\n      const firstData = series[0].data.at(0)\n\n      const dateText = `${format(\n        new Date(String(firstData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )} - ${format(\n        new Date(String(latestData?.x ?? new Date())),\n        \"d MMM yyyy\"\n      )}`\n      const valueExists: boolean =\n        Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n\n      let average =\n        Number(\n          apyDatum?.reduce((a, b) => Number(a) + Number(b), 0)\n        ) / Number(apyDatum?.length)\n\n      setApyChange({\n        xFormatted: dateText,\n        yFormatted: `${valueExists ? String(latestData?.y) : \"--\"}`,\n        average: average.toFixed(1) + \"%\",\n      })\n    }\n  }, [allTimeData, launchEpoch, cellarConfig.config.cellar.decimals])\n\n  // Set data to be returned by hook\n  const [data, setData] = useState<DataProps & { label?: string }>({\n    series: [{ id: defaultSerieId, data: [{ x: new Date(), y: 0 }] }],\n    chartProps: hourlyChartProps,\n  })\n\n  // Set tvl value\n  const [apyChange, setApyChange] = useState<ApyData>({\n    xFormatted: \"\",\n    yFormatted: \"\",\n    average: \"\",\n  })\n\n  // Grouped loading state\n  const isFetching =\n    weeklyIsFetching ||\n    monthlyIsFetching ||\n    allTimeIsFetching ||\n    isStrategyDataLoading\n  const isError = !!weeklyError || !!monthlyError || !!allTimeError\n\n  let timeArray = [\n    {\n      title: \"7D\",\n      onClick: setDataWeekly,\n    },\n    {\n      title: \"30D\",\n      onClick: setDataMonthly,\n    },\n  ]\n\n  // Override time array for Morpho ETH\n  if (\n    cellarConfig.slug === utilConfig.CONTRACT.MORPHO_ETH.SLUG ||\n    cellarConfig.slug === utilConfig.CONTRACT.REAL_YIELD_USD_ARB.SLUG\n  ) {\n    timeArray = [\n      {\n        title: \"7D\",\n        onClick: setDataWeekly,\n      },\n    ]\n  }\n  useEffect(() => {\n    const idIsDefault: boolean =\n      data?.series![0].id === defaultSerieId\n    if (allTimeData && idIsDefault && strategyData) {\n      if (\n        cellarConfig.slug === utilConfig.CONTRACT.MORPHO_ETH.SLUG ||\n        cellarConfig.slug ===\n          utilConfig.CONTRACT.REAL_YIELD_USD_ARB.SLUG\n      ) {\n        setDataWeekly()\n      } else {\n        setDataMonthly()\n      }\n    }\n  }, [\n    allTimeData,\n    data,\n    strategyData,\n    setDataWeekly,\n    setDataMonthly,\n    cellarConfig.slug,\n  ])\n\n  const dataC = {\n    ...data,\n    series: data.series?.filter((item) => {\n      if (item.id === \"apy\") {\n        return showLine.apy\n      }\n      return false\n    }),\n  }\n\n  return (\n    <apyChartContext.Provider\n      value={{\n        isFetching,\n        isError,\n        data: dataC,\n        reexecuteWeekly,\n        reexecuteMonthly,\n        reexecuteAllTime,\n        timeArray,\n        apyChange,\n        setApyChange,\n        showLine,\n        setShowLine,\n      }}\n    >\n      {children}\n    </apyChartContext.Provider>\n  )\n}\n\nexport const useApyChart = () => {\n  const context = useContext(apyChartContext)\n\n  if (context === undefined) {\n    throw new Error(\n      \"This hook must be used within a ApyChartProvider.\"\n    )\n  }\n\n  return context\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/context/homeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/context/tokenPriceChartContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeline' is assigned a value but never used.","line":168,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":18},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array. Outer scope values like 'prev24Hours' aren't valid dependencies because mutating them doesn't re-render the component.","line":202,"column":6,"nodeType":"ArrayExpression","endLine":202,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [address, reexecuteHourlyTrigger, cellarData.config.chain.id]","fix":{"range":[4964,5010],"text":"[address, reexecuteHourlyTrigger, cellarData.config.chain.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array. Outer scope values like 'prevWeek' aren't valid dependencies because mutating them doesn't re-render the component.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [address, reexecuteWeeklyTrigger, cellarData.config.chain.id]","fix":{"range":[6010,6053],"text":"[address, reexecuteWeeklyTrigger, cellarData.config.chain.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array. Outer scope values like 'prevMonth' aren't valid dependencies because mutating them doesn't re-render the component.","line":262,"column":6,"nodeType":"ArrayExpression","endLine":262,"endColumn":51,"suggestions":[{"desc":"Update the dependencies array to be: [address, reexecuteMonthlyTrigger, cellarData.config.chain.id]","fix":{"range":[7068,7113],"text":"[address, reexecuteMonthlyTrigger, cellarData.config.chain.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cellarData.config.chain.id'. Either include it or remove the dependency array.","line":288,"column":6,"nodeType":"ArrayExpression","endLine":288,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [address, cellarData.config.chain.id, reexecuteAllTimeTrigger]","fix":{"range":[8094,8128],"text":"[address, cellarData.config.chain.id, reexecuteAllTimeTrigger]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LineSvgProps, LineSeries } from \"@nivo/line\"\nimport { format } from \"date-fns\"\nimport {\n  GetAllTimeShareValueQuery,\n  GetHourlyShareValueQuery,\n  GetMonthlyShareValueQuery,\n  GetWeeklyShareValueQuery,\n} from \"data/actions/types\"\nimport { fetchHourlyShareValueData } from \"queries/get-hourly-share-value-data\"\nimport { fetchWeeklyShareValueData } from \"queries/get-weekly-share-value-data\"\nimport { fetchMonthlyShareValueData } from \"queries/get-monthly-share-value-data\"\nimport { fetchAllTimeShareValueData } from \"queries/get-all-time-share-value-data\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport {\n  createContext,\n  Dispatch,\n  FC,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n  ReactNode,\n} from \"react\"\nimport { colors } from \"theme/colors\"\nimport {\n  getPrevious24Hours,\n  getPreviousMonth,\n  getPreviousWeek,\n} from \"utils/calculateTime\"\nimport {\n  createTokenPriceChangeDatum,\n  formatPercentage,\n} from \"utils/chartHelper\"\n\nexport interface DataProps {\n  series?: LineSeries[]\n  chartProps: Partial<LineSvgProps<LineSeries>>\n}\n\nexport interface TokenPriceData {\n  yFormatted: string | number\n  xFormatted: string | number\n}\n\nexport interface ShowLine {\n  tokenPrice: boolean\n}\n\ntype Timeline = \"1D\" | \"1W\" | \"1M\" | \"ALL\"\n\nexport interface TokenPriceChartContext {\n  isFetching: boolean\n  isError: boolean\n  data: DataProps\n  reexecuteHourly: () => void\n  reexecuteWeekly: () => void\n  reexecuteMonthly: () => void\n  reexecuteAllTime: () => void\n  timeArray: {\n    title: string\n    onClick: () => void\n  }[]\n  tokenPriceChange: TokenPriceData\n  setTokenPriceChange: Dispatch<SetStateAction<TokenPriceData>>\n  showLine: ShowLine\n  setShowLine: Dispatch<SetStateAction<ShowLine>>\n}\n\nconst hourlyChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d %H:%M\",\n    tickValues: \"every 3 hours\",\n  },\n  xFormat: \"time:%H:%M\",\n  xScale: {\n    type: \"time\",\n    format: \"%H:%M\",\n    useUTC: false,\n    precision: \"hour\",\n  },\n}\nconst dayChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every day\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\nconst monthChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every 2 days\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\nconst allTimeChartProps: Partial<LineSvgProps<LineSeries>> = {\n  axisBottom: {\n    format: \"%d\",\n    tickValues: \"every 2 days\",\n  },\n  xFormat: \"time:%b %d, %Y\",\n  xScale: {\n    type: \"time\",\n    format: \"%d\",\n    useUTC: false,\n    precision: \"day\",\n  },\n}\n\nconst defaultSerieId = \"default\"\n\nconst initialData: TokenPriceChartContext = {\n  data: {\n    series: [{ id: defaultSerieId, data: [{ x: new Date(), y: 0 }] }],\n    chartProps: hourlyChartProps,\n  },\n  isFetching: true,\n  isError: false,\n  reexecuteHourly: () => null,\n  reexecuteWeekly: () => null,\n  reexecuteMonthly: () => null,\n  reexecuteAllTime: () => null,\n  setTokenPriceChange: () => null,\n  tokenPriceChange: {\n    xFormatted: \"\",\n    yFormatted: \"\",\n  },\n  timeArray: [\n    {\n      title: \"\",\n      onClick: () => null,\n    },\n  ],\n  showLine: {\n    tokenPrice: true,\n  },\n  setShowLine: () => null,\n}\n\nconst tokenPriceChartContext =\n  createContext<TokenPriceChartContext>(initialData)\n\nconst prev24Hours = getPrevious24Hours()\nconst prevWeek = getPreviousWeek()\nconst prevMonth = getPreviousMonth()\n\nexport const TokenPriceChartProvider: FC<{\n  address: string\n  chain: string\n  children: ReactNode\n}> = ({ children, address, chain }) => {\n  const [showLine, setShowLine] = useState<ShowLine>({\n    tokenPrice: true,\n  })\n  const [timeline, setTimeline] = useState<Timeline>(\"1M\")\n  const cellarData = Object.values(cellarDataMap).find(\n    (item) =>\n      item.config.cellar.address === address &&\n      item.config.chain.id === chain\n  )!\n  const [hourlyDataRaw, setHourlyDataRaw] = useState<\n    GetHourlyShareValueQuery | undefined\n  >(undefined)\n  const [hourlyIsFetching, setHourlyIsFetching] = useState(false)\n  const [hourlyError, setHourlyError] = useState(null)\n  const [reexecuteHourlyTrigger, setReexecuteHourlyTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteHourly = useCallback(() => {\n    setReexecuteHourlyTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setHourlyIsFetching(true)\n    fetchHourlyShareValueData(\n      prev24Hours,\n      address,\n      cellarData.config.chain.id\n    )\n      .then((data) => {\n        setHourlyDataRaw(data)\n        setHourlyIsFetching(false)\n      })\n      .catch((error) => {\n        setHourlyError(error)\n        setHourlyIsFetching(false)\n      })\n  }, [prev24Hours, address, reexecuteHourlyTrigger]) // re-execute the effect when 'prev24Hours' or 'address' changes\n\n  const [weeklyDataRaw, setWeeklyDataRaw] = useState<\n    GetWeeklyShareValueQuery | undefined\n  >(undefined)\n  const [weeklyIsFetching, setWeeklyIsFetching] = useState(false)\n  const [weeklyError, setWeeklyError] = useState(null)\n  const [reexecuteWeeklyTrigger, setReexecuteWeeklyTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteWeekly = useCallback(() => {\n    setReexecuteWeeklyTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setWeeklyIsFetching(true)\n    fetchWeeklyShareValueData(\n      prevWeek,\n      address,\n      cellarData.config.chain.id\n    )\n      .then((data) => {\n        setWeeklyDataRaw(data)\n        setWeeklyIsFetching(false)\n      })\n      .catch((error) => {\n        setWeeklyError(error)\n        setWeeklyIsFetching(false)\n      })\n  }, [prevWeek, address, reexecuteWeeklyTrigger]) // re-execute the effect when 'prevWeek' or 'address' changes\n\n  const [monthlyDataRaw, setMonthlyDataRaw] = useState<\n    GetMonthlyShareValueQuery | undefined\n  >(undefined)\n  const [monthlyIsFetching, setMonthlyIsFetching] = useState(false)\n  const [monthlyError, setMonthlyError] = useState(null)\n  const [reexecuteMonthlyTrigger, setReexecuteMonthlyTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteMonthly = useCallback(() => {\n    setReexecuteMonthlyTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setMonthlyIsFetching(true)\n    fetchMonthlyShareValueData(\n      prevMonth,\n      address,\n      cellarData.config.chain.id\n    )\n      .then((data) => {\n        setMonthlyDataRaw(data)\n        setMonthlyIsFetching(false)\n      })\n      .catch((error) => {\n        setMonthlyError(error)\n        setMonthlyIsFetching(false)\n      })\n  }, [prevMonth, address, reexecuteMonthlyTrigger]) // re-execute the effect when 'prevMonth' or 'address' changes\n\n  const [allTimeDataRaw, setAllTimeDataRaw] = useState<\n    GetAllTimeShareValueQuery | undefined\n  >(undefined)\n  const [allTimeIsFetching, setAllTimeIsFetching] = useState(false)\n  const [allTimeError, setAllTimeError] = useState(null)\n  const [reexecuteAllTimeTrigger, setReexecuteAllTimeTrigger] =\n    useState(0) // a state variable to trigger re-fetch\n\n  // useCallback is used to prevent unnecessary re-renders when passing this function down to child components\n  const reexecuteAllTime = useCallback(() => {\n    setReexecuteAllTimeTrigger((prevState) => prevState + 1)\n  }, [])\n\n  useEffect(() => {\n    setAllTimeIsFetching(true)\n    fetchAllTimeShareValueData(address, cellarData.config.chain.id)\n      .then((data) => {\n        setAllTimeDataRaw(data)\n        setAllTimeIsFetching(false)\n      })\n      .catch((error) => {\n        setAllTimeError(error)\n        setAllTimeIsFetching(false)\n      })\n  }, [address, reexecuteAllTimeTrigger])\n\n  const hourlyData = hourlyDataRaw?.cellarHourDatas\n  const weeklyData = weeklyDataRaw?.cellar?.dayDatas\n  const monthlyData = monthlyDataRaw?.cellar?.dayDatas.filter(\n    (item) => new Date(item.date * 1000) > new Date(2022, 9, 29)\n  )\n  // data inverted\n  const allTimeData = allTimeDataRaw?.cellar?.dayDatas.filter(\n    (item) => new Date(item.date * 1000) > new Date(2022, 9, 29)\n  )\n\n  // Functions to update data returned by hook\n  const setDataHourly = () => {\n    setTimeline(\"1D\")\n    const tokenPriceDatum = createTokenPriceChangeDatum(\n      hourlyData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      })\n    )\n\n    const series = [\n      {\n        id: \"token-price\",\n        data: tokenPriceDatum || [],\n        color: colors.neutral[100],\n      },\n    ]\n\n    setData({\n      series,\n      chartProps: hourlyChartProps,\n    })\n    const latestData = series[0].data.at(0)\n    const firstData = series[0].data.at(-1)\n\n    const valueExists: boolean =\n      Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n\n    const dateText = `${format(\n      new Date(String(firstData?.x)),\n      \"HH:mm d MMM\"\n    )} - ${format(\n      new Date(String(latestData?.x)),\n      \"HH:mm d MMM yyyy\"\n    )}`\n    setTokenPriceChange({\n      xFormatted: dateText,\n      yFormatted: `${\n        valueExists ? formatPercentage(String(latestData?.y)) : \"--\"\n      }`,\n    })\n  }\n\n  const setDataWeekly = () => {\n    setTimeline(\"1W\")\n    const tokenPriceDatum = createTokenPriceChangeDatum(\n      weeklyData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      })\n    )\n\n    const series = [\n      {\n        id: \"token-price\",\n        data: tokenPriceDatum || [],\n        color: colors.neutral[100],\n      },\n    ]\n    setData({\n      series,\n      chartProps: dayChartProps,\n    })\n    const latestData = series![0].data.at(0)\n    const firstData = series![0].data.at(-1)\n\n    const dateText = `${format(\n      new Date(String(firstData?.x)),\n      \"d MMM yyyy\"\n    )} - ${format(new Date(String(latestData?.x)), \"d MMM yyyy\")}`\n    const valueExists: boolean =\n      Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n    setTokenPriceChange({\n      xFormatted: dateText,\n      yFormatted: `${\n        valueExists ? formatPercentage(String(latestData?.y)) : \"--\"\n      }`,\n    })\n  }\n\n  const setDataMonthly = () => {\n    setTimeline(\"1M\")\n    const tokenPriceDatum = createTokenPriceChangeDatum(\n      monthlyData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      })\n    )\n    const series = [\n      {\n        id: \"token-price\",\n        data: tokenPriceDatum || [],\n        color: colors.neutral[100],\n      },\n    ]\n    setData({\n      series,\n      chartProps: monthChartProps,\n    })\n\n    const latestData = series[0].data.at(0)\n    const firstData = series[0].data.at(-1)\n\n    const valueExists: boolean =\n      Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n    const dateText = `${format(\n      new Date(String(firstData?.x)),\n      \"d MMM yyyy\"\n    )} - ${format(new Date(String(latestData?.x)), \"d MMM yyyy\")}`\n    setTokenPriceChange({\n      xFormatted: dateText,\n      yFormatted: `${\n        valueExists ? formatPercentage(String(latestData?.y)) : \"--\"\n      }`,\n    })\n  }\n\n  const setDataAllTime = () => {\n    setTimeline(\"ALL\")\n    const tokenPriceDatum = createTokenPriceChangeDatum(\n      allTimeData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      })\n    )\n    const series = [\n      {\n        id: \"token-price\",\n        data: tokenPriceDatum || [],\n        color: colors.neutral[100],\n      },\n    ]\n    setData({\n      series,\n      chartProps: allTimeChartProps,\n    })\n\n    const latestData = series[0].data.at(0)\n    const firstData = series[0].data.at(-1)\n\n    const valueExists: boolean =\n      Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n    const dateText = `${format(\n      new Date(String(firstData?.x)),\n      \"d MMM yyyy\"\n    )} - ${format(new Date(String(latestData?.x)), \"d MMM yyyy\")}`\n    setTokenPriceChange({\n      xFormatted: dateText,\n      yFormatted: `${\n        valueExists ? formatPercentage(String(latestData?.y)) : \"--\"\n      }`,\n    })\n  }\n\n  // Set data to be returned by hook\n  const [data, setData] = useState<DataProps>({\n    series: [{ id: defaultSerieId, data: [{ x: new Date(), y: 0 }] }],\n    chartProps: hourlyChartProps,\n  })\n\n  // Set tvl value\n  const [tokenPriceChange, setTokenPriceChange] =\n    useState<TokenPriceData>({\n      xFormatted: \"\",\n      yFormatted: \"\",\n    })\n\n  // Grouped loading state\n  const isFetching =\n    hourlyIsFetching ||\n    weeklyIsFetching ||\n    monthlyIsFetching ||\n    allTimeIsFetching\n\n  const isError =\n    !!hourlyError || !!weeklyError || !!monthlyError || !!allTimeError\n\n  const timeArray = [\n    {\n      title: \"1D\",\n      onClick: setDataHourly,\n    },\n    {\n      title: \"1W\",\n      onClick: setDataWeekly,\n    },\n    {\n      title: \"1M\",\n      onClick: setDataMonthly,\n    },\n    { title: \"All\", onClick: setDataAllTime },\n  ]\n\n  // Set monthly data by default\n  useEffect(() => {\n    const idIsDefault: boolean =\n      data?.series![0].id === defaultSerieId\n    if (monthlyData && idIsDefault) {\n      const monthlyDataMap = monthlyData?.map((item) => {\n        return {\n          date: item.date,\n          shareValue: item.shareValue,\n        }\n      })\n      const tokenPriceDatum =\n        createTokenPriceChangeDatum(monthlyDataMap)\n\n      const series = [\n        {\n          id: \"token-price\",\n          data: tokenPriceDatum || [],\n          color: colors.neutral[100],\n        },\n      ]\n\n      setData({\n        series,\n        chartProps: dayChartProps,\n      })\n\n      const latestData = series![0].data.at(0)\n      const firstData = series![0].data.at(-1)\n\n      const dateText = `${format(\n        new Date(String(firstData?.x)),\n        \"d MMM yyyy\"\n      )} - ${format(new Date(String(latestData?.x)), \"d MMM yyyy\")}`\n      const valueExists: boolean =\n        Boolean(latestData?.y) || String(latestData?.y) === \"0\"\n      setTokenPriceChange({\n        xFormatted: dateText,\n        yFormatted: `${\n          valueExists ? formatPercentage(String(latestData?.y)) : \"--\"\n        }`,\n      })\n    }\n  }, [monthlyData, data])\n\n  const dataC = {\n    ...data,\n    series: data.series?.filter((item) => {\n      if (item.id === \"token-price\") {\n        return showLine.tokenPrice\n      }\n      return false\n    }),\n  }\n\n  return (\n    <tokenPriceChartContext.Provider\n      value={{\n        isFetching,\n        isError,\n        data: dataC,\n        reexecuteHourly,\n        reexecuteWeekly,\n        reexecuteMonthly,\n        reexecuteAllTime,\n        timeArray,\n        tokenPriceChange,\n        setTokenPriceChange,\n        showLine,\n        setShowLine,\n      }}\n    >\n      {children}\n    </tokenPriceChartContext.Provider>\n  )\n}\n\nexport const useTokenPriceChart = () => {\n  const context = useContext(tokenPriceChartContext)\n\n  if (context === undefined) {\n    throw new Error(\n      \"This hook must be used within a TokenPriceChartProvider.\"\n    )\n  }\n\n  return context\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useAllContracts.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":16,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\"\nimport { getAllContracts } from \"data/actions/common/getAllContracts\"\nimport {\n  http,\n  useAccount,\n  usePublicClient,\n  useWalletClient,\n} from \"wagmi\"\nimport { chainConfig } from \"data/chainConfig\"\nimport { INFURA_API_KEY } from \"src/context/rpc_context\"\nimport { createPublicClient } from \"viem\"\n\nexport const useAllContracts = () => {\n  const publicClient = usePublicClient()\n  const walletClient = useWalletClient()\n  const { isConnected } = useAccount()\n\n  const query = useQuery({\n    queryKey: [\n      \"USE_ALL_STRATEGIES_CONTRACTS\",\n      publicClient?.chain?.id,\n    ],\n    queryFn: () => {\n      const providerMap = new Map()\n      const signerMap = new Map()\n\n      const chainId = publicClient?.chain?.id\n\n      chainConfig.forEach((chain) => {\n        if (chain.wagmiId !== chainId) {\n          providerMap.set(\n            chain.id,\n            createPublicClient({\n              chain: chain.viemChain,\n              transport: http(\n                `${chain.infuraRpcUrl}/${INFURA_API_KEY}`\n              ),\n            })\n          )\n        } else {\n          providerMap.set(chain.id, publicClient)\n          signerMap.set(chain.id, walletClient)\n        }\n      })\n\n      return getAllContracts(providerMap, signerMap)\n    },\n    enabled: !!publicClient?.chain?.id,\n  })\n\n  return query\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useAllStrategiesData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usePublicClient' is defined but never used.","line":3,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\"\nimport { getAllStrategiesData } from \"data/actions/common/getAllStrategiesData\"\nimport { useAccount, usePublicClient } from \"wagmi\"\nimport { useAllContracts } from \"./useAllContracts\"\nimport { useCoinGeckoPrice } from \"./useCoinGeckoPrice\"\nimport { fetchCellarStrategyData } from \"queries/get-all-strategies-data\"\nimport { useState, useEffect } from \"react\"\nimport { GetAllStrategiesDataQuery } from \"data/actions/types\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport {\n  getChainByViemId,\n  supportedChains,\n} from \"src/data/chainConfig\"\n\nexport const useAllStrategiesData = () => {\n  const { chain: viemChain } = useAccount()\n  const { data: allContracts } = useAllContracts()\n\n  const chain = getChainByViemId(viemChain?.name)\n\n  const sommToken = tokenConfig.find((token) => {\n    const compareChain = supportedChains.includes(\n      chain ? chain.id : \"\"\n    )\n      ? \"ethereum\"\n      : chain?.id\n    return (\n      token.coinGeckoId === \"sommelier\" &&\n      token.chain === (compareChain || \"ethereum\")\n    )\n  })!\n\n  const { data: sommPrice } = useCoinGeckoPrice(sommToken)\n\n  const [cellarData, setcellarData] = useState<\n    GetAllStrategiesDataQuery | undefined\n  >(undefined)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    fetchCellarStrategyData()\n      .then(({ data, error }) => {\n        if (error) {\n          setError(error)\n        } else {\n          setcellarData(data)\n        }\n      })\n      .catch((error) => setError(error))\n    return () => {\n      setError(null)\n      setcellarData(undefined)\n    }\n  }, [])\n\n  const query = useQuery({\n    queryKey: [\"USE_ALL_STRATEGIES_DATA\", viemChain?.id],\n    queryFn: async () => {\n      return await getAllStrategiesData({\n        allContracts: allContracts!,\n        sommPrice: sommPrice!,\n        cellarData: cellarData,\n      })\n    },\n    enabled: !!allContracts && !!sommPrice && !!cellarData,\n    staleTime: 120_000,\n  })\n\n  return {\n    ...query,\n    isError: Boolean(error) || query.isError,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useBoringQueueWithdrawals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useCoinGeckoPrice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useCreateContracts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useDepositModalStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useEnsoRoutes.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1147,1150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1147,1150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'lastResponse'. Either include it or remove the dependency array. If 'setResponse' needs the current value of 'lastResponse', you can also switch to useReducer instead of useState and read 'lastResponse' in the reducer.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [config, lastResponse, shouldFetch]","fix":{"range":[3929,3950],"text":"[config, lastResponse, shouldFetch]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\"\n\n// Enso Docs can be found at https://www.enso.finance/developers or https://docs.enso.finance/\n\nconst ensoApiKey = process.env.NEXT_PUBLIC_ENSO_API_KEY\n\nexport interface TokenMap {\n  address: string\n  amountBaseDenom: number\n}\n\nexport interface EnsoRouteConfig {\n  fromAddress: string\n  tokensIn: TokenMap[]\n  tokenOut: string\n  slippage: number\n}\n\nexport const getEnsoRouterAddress = async (fromAddress: string) => {\n  const response = await fetch(\n    `https://api.enso.finance/api/v1/wallet?chainId=1&fromAddress=${fromAddress}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${ensoApiKey}`,\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }\n  )\n  const routerAddress = (await response.json()).address\n  return routerAddress\n}\n\n// ! Before this User must approve spend on the routing contract so it can execute the swap (if not done so already),\n// ! See pt 1 on https://docs.enso.finance/examples/eoa/route-1-position\nexport const useEnsoRoutes = (\n  config: EnsoRouteConfig,\n  shouldFetch: boolean,\n  lastResponse: any\n) => {\n  // Enso routes aren't in use for now and to avoid failing requests, returning early\n  return { ensoResponse: '1', ensoError: null, ensoLoading: false };\n  const [ensoResponse, setResponse] = useState<any>(null)\n  const [ensoError, setError] = useState<string | null>(null)\n  const [ensoLoading, setLoading] = useState<boolean>(true)\n\n  useEffect(() => {\n    if (!shouldFetch) {\n      setLoading(false)\n      setError(null)\n      setResponse(lastResponse)\n      return\n    }\n\n    let intervalId: number\n\n    const fetchRoutes = async () => {\n      setLoading(true)\n      setError(null)\n      try {\n        const actions = config.tokensIn.map((tokenIn) => {\n          return {\n            protocol: \"enso\",\n            action: \"route\",\n            args: {\n              tokenIn: tokenIn.address,\n              tokenOut: config.tokenOut,\n              amountIn: String(tokenIn.amountBaseDenom),\n              slippage: String(config.slippage * 100),\n            },\n          }\n        })\n\n        // For now only support a single token in, so assert len actions == 1\n        if (actions.length !== 1) {\n          throw new Error(\n            \"Current routing implementation only support a single token in.\"\n          )\n        }\n\n        // TODO: Generalize for multichain (check if enso actually supports multichain first)\n        const formattedRouteURL = `https://api.enso.finance/api/v1/shortcuts/route?chainId=1&fromAddress=${config.fromAddress}&receiver=${config.fromAddress}&spender=${config.fromAddress}&amountIn=${actions[0].args.amountIn}&tokenIn=${actions[0].args.tokenIn}&tokenOut=${actions[0].args.tokenOut}&slippage=${actions[0].args.slippage}&routingStrategy=router`\n\n        const response = await fetch(`${formattedRouteURL}`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${ensoApiKey}`,\n            \"Access-Control-Allow-Origin\": \"*\",\n          },\n        })\n\n        if (response.status === 404) {\n          throw new Error(\"No routes found\")\n        }\n\n        if (response.status !== 200) {\n          console.log(response.status)\n          throw new Error(\"Internal Router Error\")\n        }\n        const result = await response.json()\n\n        setResponse(result)\n        setLoading(false)\n        setError(null)\n      } catch (error) {\n        console.log(error)\n        setError(\n          (error as Error).message || \"An unknown error occurred\"\n        )\n        setLoading(false)\n      }\n    }\n    fetchRoutes()\n\n    // Run fetchRoutes every 10 seconds\n    intervalId = setInterval(fetchRoutes, 10000) as unknown as number\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [config, shouldFetch])\n\n  return { ensoResponse, ensoError, ensoLoading }\n}\n\n// Example Usage\n/**\nimport { useEnsoRoutes } from '....';\n\nconst EnsoDepositComponent = () => {\n  const config = {\n    fromAddress: 'user_address',\n    tokensIn: [{\n      address: 'token_address',\n      amountBaseDenom: 100\n    }],\n    tokenOut: 'final_token',\n    slippage: 1 // 1% slippage\n  };\n\n  const { ensoResponse, ensoError, ensoLoading } = useEnsoRoutes(config);\n\n\n  // TODO: I think (need to verify) you'd want a helper function here to see if the user has approved the enso contract to spend their tokens before actually submitting the final tx\n\n  // Basically here you need to render the UX object\n  return (\n    <div>\n      {loading && <p>Loading...</p>} // If its loading show a loading indicator\n      {error && <p>Error: {error}</p>} // If its an error add a toast or something\n      {Render your response here } // If we get a good response, show user how many tokens out expected, and if the user hits submit send the tx\n    </div>\n  );\n}\n**/\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useGetPreviewRedeem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useMarketChart.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useSommNativeVaults.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useStrategyData.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'address' and 'cellarData.config.chain.id'. Either include them or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [address, cellarData.config.chain.id]","fix":{"range":[1593,1595],"text":"[address, cellarData.config.chain.id]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\"\nimport { getStrategyData } from \"data/actions/common/getStrategyData\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { GetStrategyDataQuery } from \"src/data/actions/types\"\nimport { usePublicClient } from \"wagmi\"\nimport { useAllContracts } from \"./useAllContracts\"\nimport { useCoinGeckoPrice } from \"./useCoinGeckoPrice\"\nimport { fetchIndividualCellarStrategyData } from \"queries/get-individual-strategy-data\"\nimport { useState, useEffect } from \"react\"\nimport { tokenConfig } from \"data/tokenConfig\"\n\nexport const useStrategyData = (\n  address: string,\n  chain: string,\n  enabled: boolean = true\n) => {\n  const publicClient = usePublicClient()\n\n  const { data: allContracts } = useAllContracts()\n  const sommToken = tokenConfig.find(\n    (token) =>\n      token.coinGeckoId === \"sommelier\" && token.chain === chain\n  )!\n\n  const { data: sommPrice } = useCoinGeckoPrice(sommToken)\n\n  const [stratData, setStratData] = useState<\n    GetStrategyDataQuery | undefined\n  >(undefined)\n  const [error, setError] = useState(null)\n\n  const cellarData = Object.values(cellarDataMap).find(\n    (item) =>\n      item.config.cellar.address.toLowerCase() ===\n        address.toLowerCase() && item.config.chain.id === chain\n  )!\n\n  useEffect(() => {\n    fetchIndividualCellarStrategyData(\n      address.toLowerCase(),\n      cellarData.config.chain.id\n    )\n      .then(({ data, error }) => {\n        if (error) {\n          setError(error)\n        } else {\n          setStratData(data)\n        }\n      })\n      .catch((error) => setError(error))\n  }, [])\n\n  const config = Object.values(cellarDataMap).find(\n    (item) =>\n      item.config.cellar.address.toLowerCase() ===\n        address.toLowerCase() && item.config.chain.id === chain\n  )!.config\n  const isNoDataSource = Boolean(config!.isNoDataSource)\n  const baseAsset = config.baseAsset\n  const { data: baseAssetPrice } = useCoinGeckoPrice(baseAsset)\n\n  // if chain is not ethereum, key format is '{address}-{chain}', otherwise it is '{address}'\n  const key =\n    address + (config.chain.id !== \"ethereum\" ? \"-\" + chain : \"\")\n\n  // Get cellar contracts for the chain\n  const query = useQuery({\n    queryKey: [\n      \"USE_STRATEGY_DATA\",\n      { provider: publicClient?.uid, address: key },\n    ],\n    queryFn: async () => {\n      const result = await getStrategyData({\n        address,\n        contracts: allContracts![key]!,\n        sommPrice: sommPrice ?? \"0\",\n        stratData: structuredClone(stratData?.cellar),\n        baseAssetPrice: baseAssetPrice ?? \"0\",\n      })\n\n      return result\n    },\n    enabled:\n      enabled &&\n      !!allContracts &&\n      !!sommPrice &&\n      (isNoDataSource || !!stratData) &&\n      !!baseAssetPrice,\n  })\n\n  return {\n    ...query,\n    isError: Boolean(error) || query.isError,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useUsdcGainChartData.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'onSuccess' and 'query.data'. Either include them or remove the dependency array. If 'onSuccess' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [enabled, onSuccess, query.data]","fix":{"range":[1278,1313],"text":"[enabled, onSuccess, query.data]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":50,"column":7,"nodeType":"CallExpression","endLine":50,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useUserBalance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useUserBalances.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useUserDataAllStrategies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useUserStrategyData.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUserDataWithContracts' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'allContracts' is assigned a value but never used.","line":19,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":47,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\"\nimport { getUserDataWithContracts } from \"data/actions/common/getUserData\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { useAccount } from \"wagmi\"\nimport { useAllContracts } from \"./useAllContracts\"\nimport { useCoinGeckoPrice } from \"./useCoinGeckoPrice\"\nimport { useStrategyData } from \"./useStrategyData\"\nimport { useUserBalance } from \"./useUserBalance\"\nimport { tokenConfig } from \"data/tokenConfig\"\nimport { formatUSD } from \"utils/formatCurrency\"\nimport { showNetValueInAsset } from \"data/uiConfig\"\n\nexport const useUserStrategyData = (\n  strategyAddress: string,\n  chain: string,\n  enabled: boolean = true\n) => {\n  const { address: userAddress } = useAccount()\n  const { data: allContracts } = useAllContracts()\n  const strategyData = useStrategyData(strategyAddress, chain)\n  const sommToken = tokenConfig.find(\n    (token) =>\n      token.coinGeckoId === \"sommelier\" && token.chain === chain\n  )!\n\n  const sommPrice = useCoinGeckoPrice(sommToken)\n\n  const config = Object.values(cellarDataMap).find(\n    (item) =>\n      item.config.cellar.address.toLowerCase() ===\n        strategyAddress.toLowerCase() &&\n      item.config.chain.id === chain\n  )!.config\n\n  const isNoDataSource = Boolean(\n    Object.values(cellarDataMap).find(\n      (item) =>\n        item.config.cellar.address === strategyAddress &&\n        item.config.chain.id === chain\n    )?.config.isNoDataSource\n  )\n  const { lpToken } = useUserBalance(config)\n  const baseAsset = config.baseAsset\n  const { data: baseAssetPrice } = useCoinGeckoPrice(baseAsset)\n\n  // if chain is not ethereum, key format is '{address}-{chain}', otherwise it is '{address}'\n  const key =\n    strategyAddress +\n    (config.chain.id !== \"ethereum\" ? \"-\" + chain : \"\")\n  const query = useQuery({\n    queryKey: [\"USE_USER_DATA\", strategyAddress, chain, userAddress],\n    queryFn: async () => {\n      // Use the LP token data from useUserBalance instead of contract calls\n      const lpTokenData = lpToken.data\n\n      if (!lpTokenData || !strategyData.data) {\n        return {\n          userStrategyData: {\n            userData: {\n              netValue: { formatted: \"0\", value: 0 },\n              shares: { formatted: \"0\", value: 0n },\n              stakedShares: { formatted: \"0\", value: 0n },\n              ...(showNetValueInAsset(config) && {\n                netValueInAsset: { formatted: \"0\", value: 0 },\n              }),\n            },\n            strategyData: strategyData.data,\n          },\n          userStakes: null,\n        }\n      }\n\n      // Calculate net value using LP token balance and token price\n      const shares = lpTokenData.value\n      const sharesFormatted = lpTokenData.formatted\n      const tokenPrice =\n        parseFloat(\n          (strategyData.data.tokenPrice || \"0\").replace(\"$\", \"\")\n        ) || 0\n      const baseAssetPriceValue =\n        parseFloat(baseAssetPrice || \"0\") || 0\n\n      const netValue = Number(sharesFormatted) * tokenPrice\n\n      // Calculate net value in base asset for strategies that support it\n      const netValueInAsset =\n        showNetValueInAsset(config) && baseAssetPriceValue > 0\n          ? netValue / baseAssetPriceValue\n          : 0\n\n      return {\n        userStrategyData: {\n          userData: {\n            netValue: {\n              formatted: formatUSD(netValue.toString(), 2),\n              value: netValue,\n            },\n            shares: {\n              formatted: sharesFormatted,\n              value: shares,\n            },\n            stakedShares: {\n              formatted: \"0\",\n              value: 0n,\n            },\n            ...(showNetValueInAsset(config) && {\n              netValueInAsset: {\n                formatted: netValueInAsset.toFixed(5),\n                value: netValueInAsset,\n              },\n            }),\n          },\n          strategyData: strategyData.data,\n        },\n        userStakes: null,\n      }\n    },\n    enabled:\n      enabled &&\n      !!userAddress &&\n      !!sommPrice.data &&\n      !!lpToken.data &&\n      !!baseAssetPrice &&\n      !!strategyData.data &&\n      isNoDataSource === false,\n    staleTime: 120_000,\n  })\n  return query\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/hooks/useWithdrawRequestStatus.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used.","line":13,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'chainId'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":84,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [withdrawQueueContract, address, cellarConfig, boringQueueWithdrawals, walletClient, chainId]","fix":{"range":[2441,2550],"text":"[withdrawQueueContract, address, cellarConfig, boringQueueWithdrawals, walletClient, chainId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\"\nimport { useAccount, useChainId, usePublicClient, useWalletClient } from \"wagmi\"\nimport { getAddress, getContract } from \"viem\"\nimport withdrawQueueV0821 from \"src/abi/withdraw-queue-v0.8.21.json\"\nimport { useBoringQueueWithdrawals } from \"./useBoringQueueWithdrawals\"\nimport { ConfigProps } from \"data/types\"\n\nexport const useWithdrawRequestStatus = (\n  cellarConfig: ConfigProps\n) => {\n  const [isActiveWithdrawRequest, setIsActiveWithdrawRequest] =\n    useState(false)\n  const { address, isConnected } = useAccount()\n  const chainId = useChainId()\n  const publicClient = usePublicClient()\n  const walletClient = useWalletClient()\n\n  const { data: boringQueueWithdrawals } = useBoringQueueWithdrawals(\n    cellarConfig.cellar.address,\n    cellarConfig.chain.id,\n    { enabled: !!cellarConfig.boringQueue }\n  )\n\n  const withdrawQueueContract =\n    publicClient &&\n    getContract({\n      address: getAddress(cellarConfig.chain.withdrawQueueAddress),\n      abi: withdrawQueueV0821,\n      client: {\n        wallet: walletClient?.data,\n        public: publicClient,\n      },\n    })\n\n  useEffect(() => {\n    const checkWithdrawRequest = async () => {\n      if (chainId !== cellarConfig.chain.wagmiId) return\n        try {\n          if (\n            walletClient &&\n            withdrawQueueContract &&\n            address &&\n            cellarConfig &&\n            !boringQueueWithdrawals\n          ) {\n            const withdrawRequest =\n              await withdrawQueueContract.read.getUserWithdrawRequest([\n                address,\n                cellarConfig.cellar.address,\n              ])\n\n            const isWithdrawRequestValid =\n              (await withdrawQueueContract.read.isWithdrawRequestValid([\n                cellarConfig.cellar.address,\n                address,\n                withdrawRequest,\n              ])) as unknown as boolean\n\n            setIsActiveWithdrawRequest(isWithdrawRequestValid)\n          } else if (\n            boringQueueWithdrawals &&\n            cellarConfig.boringVault &&\n            address\n          ) {\n            setIsActiveWithdrawRequest(\n              boringQueueWithdrawals?.open_requests.length > 0\n            )\n          } else {\n            setIsActiveWithdrawRequest(false)\n          }\n        } catch (error) {\n          console.error(error)\n          setIsActiveWithdrawRequest(false)\n        }\n    }\n\n    checkWithdrawRequest()\n  }, [\n    withdrawQueueContract,\n    address,\n    cellarConfig,\n    boringQueueWithdrawals,\n    walletClient,\n  ])\n\n  return isActiveWithdrawRequest\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/aave-stable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/alpha-steth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/arbitrum-test-multi-asset-deposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/arbitrum-test-real-yield-usd.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/defi-stars.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/eth-btc-momentum.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/eth-btc-trend.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/eth-trend-growth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/fraximal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/morpho-eth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-1inch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-btc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-ens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-eth-arb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-eth-opt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-eth-scroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-eth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-link.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-snx.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-uni.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-usd-arb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/real-yield-usd.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/steady-btc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/steady-eth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/steady-matic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/steady-uni.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-diveth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-eeth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-eethv2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-ethx.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-ezeth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-gho.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-rseth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-somm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-steth-steth-deposit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-steth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategies/turbo-sweth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/strategyPageContentData.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/tokenConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":678,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":678,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16819,16822],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16819,16822],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { chainSlugMap } from \"./chainConfig\"\n\nexport interface Token {\n  src: string\n  alt: string\n  symbol: string\n  address: string\n  coinGeckoId: string\n  decimals: number\n  chain: string\n}\n\n/**\n *\n *  tokenConfig is for storing the all token data that used in the app\n */\nexport const tokenConfig: Token[] = [\n  {\n    src: \"/assets/icons/somm.png\",\n    alt: \"Sommelier logo\",\n    symbol: \"axlSOMM\",\n    address: \"0x4e914bbdcde0f455a8ac9d59d3bf739c46287ed2\", //NEED TO UPDATE\n    coinGeckoId: \"sommelier\",\n    decimals: 6,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/somm.png\",\n    alt: \"Sommelier logo\",\n    symbol: \"axlSOMM\",\n    address: \"0x4e914bbdcde0f455a8ac9d59d3bf739c46287ed2\",\n    coinGeckoId: \"sommelier\",\n    decimals: 6,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/somm.png\",\n    alt: \"Sommelier logo\",\n    symbol: \"axlSOMM\",\n    address: \"0x4e914bbdcde0f455a8ac9d59d3bf739c46287ed2\", //NEED TO UPDATE\n    coinGeckoId: \"sommelier\",\n    decimals: 6,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/somm.png\",\n    alt: \"Sommelier logo\",\n    symbol: \"SOMM\",\n    address: \"0xa670d7237398238de01267472c6f13e5b8010fd1\",\n    coinGeckoId: \"sommelier\",\n    decimals: 6,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/eth.png\",\n    alt: \"Ethereum logo\",\n    symbol: \"WETH\",\n    address: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    coinGeckoId: \"weth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/eth.png\",\n    alt: \"Ethereum logo\",\n    symbol: \"WETH\",\n    address: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n    coinGeckoId: \"weth\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/arb.png\",\n    alt: \"Arbitrum logo\",\n    symbol: \"ARB\",\n    address: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n    coinGeckoId: \"arbitrum\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/optimism.svg\",\n    alt: \"Optimism logo\",\n    symbol: \"OP\",\n    address: \"0x4200000000000000000000000000000000000042\",\n    coinGeckoId: \"optimism\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/eth.png\",\n    alt: \"Ethereum logo\",\n    symbol: \"WETH\",\n    address: \"0x4200000000000000000000000000000000000006\",\n    coinGeckoId: \"weth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/eth.png\",\n    alt: \"Ethereum logo\",\n    symbol: \"WETH\",\n    address: \"0x5300000000000000000000000000000000000004\",\n    coinGeckoId: \"weth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/wbtc.png\",\n    alt: \"Bitcoin logo\",\n    symbol: \"WBTC\",\n    address: \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\",\n    coinGeckoId: \"wrapped-bitcoin\",\n    decimals: 8,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/usdc.png\",\n    alt: \"USD Coin logo\",\n    symbol: \"USDC\",\n    address: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/ampl.png\",\n    alt: \"Ampleforth logo\",\n    symbol: \"AMPL\",\n    address: \"0xd46ba6d942050d489dbd938a2c909a5d5039a161\",\n    coinGeckoId: \"ampleforth\",\n    decimals: 9,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/busd.png\",\n    alt: \"Binance USD logo\",\n    symbol: \"BUSD\",\n    address: \"0x4Fabb145d64652a948d72533023f6E7A623C7C53\",\n    coinGeckoId: \"binance-usd\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/dai.png\",\n    alt: \"Dai logo\",\n    symbol: \"DAI\",\n    address: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    coinGeckoId: \"dai\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/frax.png\",\n    alt: \"Frax logo\",\n    symbol: \"FRAX\",\n    address: \"0x853d955acef822db058eb8505911ed77f175b99e\",\n    coinGeckoId: \"frax\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/gusd.png\",\n    alt: \"Gemini Dollar logo\",\n    symbol: \"GUSD\",\n    address: \"0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd\",\n    coinGeckoId: \"gemini-dollar\",\n    decimals: 2,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/usdp.png\",\n    alt: \"Pax Dollar logo\",\n    symbol: \"USDP\",\n    address: \"0x8e870d67f660d95d5be530380d0ec0bd388289e1\",\n    coinGeckoId: \"pax-dollar\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/rai.png\",\n    alt: \"Rai Reflex Index logo\",\n    symbol: \"RAI\",\n    address: \"0x03ab458634910aad20ef5f1c8ee96f1d6ac54919\",\n    coinGeckoId: \"rai\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/susd.png\",\n    alt: \"sUSD logo\",\n    symbol: \"sUSD\",\n    address: \"0x57Ab1ec28D129707052df4dF418D58a2D46d5f51\",\n    coinGeckoId: \"susd\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/tusd.png\",\n    alt: \"TrueUSD logo\",\n    symbol: \"TUSD\",\n    address: \"0x0000000000085d4780B73119b644AE5ecd22b376\",\n    coinGeckoId: \"true-usd\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/usdt.png\",\n    alt: \"Tether logo\",\n    symbol: \"USDT\",\n    address: \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n    coinGeckoId: \"tether\",\n    decimals: 6,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/uniswap.png\",\n    alt: \"Uniswap logo\",\n    symbol: \"UNI\",\n    address: \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\",\n    coinGeckoId: \"uniswap\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/matic.png\",\n    alt: \"Matic logo\",\n    symbol: \"MATIC\",\n    address: \"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\",\n    coinGeckoId: \"matic-network\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/cbETH.png\",\n    alt: \"cbETH logo\",\n    symbol: \"cbETH\",\n    address: \"0xbe9895146f7af43049ca1c1ae358b0541ea49704\",\n    coinGeckoId: \"coinbase-wrapped-staked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/cbETH.png\",\n    alt: \"cbETH logo\",\n    symbol: \"cbETH\",\n    address: \"0x1debd73e752beaf79865fd6446b0c970eae7732f\",\n    coinGeckoId: \"coinbase-wrapped-staked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/cbETH.png\",\n    alt: \"cbETH logo\",\n    symbol: \"cbETH\",\n    address: \"00xadDb6A0412DE1BA0F936DCaeb8Aaa24578dcF3B2\",\n    coinGeckoId: \"coinbase-wrapped-staked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/reth.png\",\n    alt: \"rETH logo\",\n    symbol: \"rETH\",\n    address: \"0xae78736cd615f374d3085123a210448e74fc6393\",\n    coinGeckoId: \"rocket-pool-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/reth.png\",\n    alt: \"rETH logo\",\n    symbol: \"rETH\",\n    address: \"0xEC70Dcb4A1EFa46b8F2D97C310C9c4790ba5ffA8\",\n    coinGeckoId: \"rocket-pool-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/reth.png\",\n    alt: \"rETH logo\",\n    symbol: \"rETH\",\n    address: \"0x9Bcef72be871e61ED4fBbc7630889beE758eb81D\",\n    coinGeckoId: \"rocket-pool-eth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/reth.png\",\n    alt: \"rETH logo\",\n    symbol: \"rETH\",\n    address: \"0x53878B874283351D26d206FA512aEcE1Bef6C0dD\",\n    coinGeckoId: \"rocket-pool-eth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/steth.png\",\n    alt: \"stETH logo\",\n    symbol: \"stETH\",\n    address: \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\",\n    coinGeckoId: \"staked-ether\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/rseth.png\",\n    alt: \"rsETH logo\",\n    symbol: \"rsETH\",\n    address: \"0xa1290d69c65a6fe4df752f95823fae25cb99e5a7\",\n    coinGeckoId: \"kelp-dao-restaked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/ezeth.png\",\n    alt: \"ezETH logo\",\n    symbol: \"ezETH\",\n    address: \"0xbf5495efe5db9ce00f80364c8b423567e58d2110\",\n    coinGeckoId: \"renzo-restaked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/comp.png\",\n    alt: \"COMP logo\",\n    symbol: \"COMP\",\n    address: \"0xc00e94cb662c3520282e6f5717214004a7f26888\",\n    coinGeckoId: \"compound-governance-token\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/crv.png\",\n    alt: \"CRV logo\",\n    symbol: \"CRV\",\n    address: \"0xd533a949740bb3306d119cc777fa900ba034cd52\",\n    coinGeckoId: \"curve-dao-token\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/ldo.png\",\n    alt: \"LDO logo\",\n    symbol: \"LDO\",\n    address: \"0x5a98fcbea516cf06857215779fd812ca3bef1b32\",\n    coinGeckoId: \"lido-dao\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/mkr.png\",\n    alt: \"MKR logo\",\n    symbol: \"MKR\",\n    address: \"0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2\",\n    coinGeckoId: \"maker\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/aave.png\",\n    alt: \"AAVE logo\",\n    symbol: \"AAVE\",\n    address: \"0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9\",\n    coinGeckoId: \"aave\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/chainlink.png\",\n    alt: \"LINK logo\",\n    symbol: \"LINK\",\n    address: \"0x514910771af9ca656af840dff83e8264ecf986ca\",\n    coinGeckoId: \"chainlink\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/one-inch.png\",\n    alt: \"1Inch logo\",\n    symbol: \"1INCH\",\n    address: \"0x111111111117dc0aa78b770fa6a738034120c302\",\n    coinGeckoId: \"1inch\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/ens.png\",\n    alt: \"Ens logo\",\n    symbol: \"ENS\",\n    address: \"0xc18360217d8f7ab5e7c516566761ea12ce7f9d72\",\n    coinGeckoId: \"ethereum-name-service\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/snx.png\",\n    alt: \"SNX logo\",\n    symbol: \"SNX\",\n    address: \"0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f\",\n    coinGeckoId: \"havven\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/real-yield-eth.png\",\n    alt: \"real-yield-eth logo\",\n    symbol: \"YieldETH\",\n    address: \"0xb5b29320d2dde5ba5bafa1ebcd270052070483ec\",\n    coinGeckoId: \"y-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/sweth.png\",\n    alt: \"swETH logo\",\n    symbol: \"swETH\",\n    address: \"0xf951e335afb289353dc249e82926178eac7ded78\",\n    coinGeckoId: \"sweth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/real-yield-usd.png\",\n    alt: \"real-yield-usd logo\",\n    symbol: \"YieldUSD\",\n    address: \"0x97e6E0a40a3D02F12d1cEC30ebfbAE04e37C119E\",\n    coinGeckoId: \"y-usd\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/gho.png\",\n    alt: \"GHO logo\",\n    symbol: \"GHO\",\n    address: \"0x40d16fc0246ad3160ccc09b8d0d3a2cd28ae6c2f\",\n    coinGeckoId: \"gho\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/liquity-usd-logo.png\",\n    alt: \"LUSD logo\",\n    symbol: \"LUSD\",\n    address: \"0x5f98805a4e8be255a32880fdec7f6728c6568ba0\",\n    coinGeckoId: \"liquity-usd\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/wsteth-logo.jpeg\",\n    alt: \"wstETH logo\",\n    symbol: \"wstETH\",\n    address: \"0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0\",\n    coinGeckoId: \"wrapped-steth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/wsteth-logo.jpeg\",\n    alt: \"wstETH logo\",\n    symbol: \"wstETH\",\n    address: \"0x5979D7b546E38E414F7E9822514be443A4800529\",\n    coinGeckoId: \"wrapped-steth\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/wsteth-logo.jpeg\",\n    alt: \"wstETH logo\",\n    symbol: \"wstETH\",\n    address: \"0x1F32b1c2345538c0c6f582fCB022739c4A194Ebb\",\n    coinGeckoId: \"wrapped-steth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/wsteth-logo.jpeg\",\n    alt: \"wstETH logo\",\n    symbol: \"wstETH\",\n    address: \"0xf610A9dfB7C89644979b4A0f27063E9e7d7Cda32\",\n    coinGeckoId: \"wrapped-steth\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n  {\n    src: \"/assets/icons/usdc.png\",\n    alt: \"USD Coin logo\",\n    symbol: \"USDC_e\",\n    address: \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/usdc.png\",\n    alt: \"USD Coin logo\",\n    symbol: \"USDC\",\n    address: \"0xaf88d065e77c8cc2239327c5edb3a432268e5831\",\n    coinGeckoId: \"usd-coin\",\n    decimals: 6,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/usdc.png\",\n    alt: \"USD.e Coin logo\",\n    symbol: \"USDC.e\",\n    address: \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n    coinGeckoId: \"usd-coin-ethereum-bridged\",\n    decimals: 6,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/dai.png\",\n    alt: \"Dai logo\",\n    symbol: \"DAI\",\n    address: \"0xda10009cbd5d07dd0cecc66161fc93d7c9000da1\",\n    coinGeckoId: \"dai\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/usdt.png\",\n    alt: \"Tether logo\",\n    symbol: \"USDT\",\n    address: \"0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9\",\n    coinGeckoId: \"tether\",\n    decimals: 6,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"/assets/icons/eeth.png\",\n    alt: \"eETH logo\",\n    symbol: \"eETH\",\n    address: \"0x35fa164735182de50811e8e2e824cfb9b6118ac2\",\n    coinGeckoId: \"ether-fi-staked-eth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/weeth.png\",\n    alt: \"weETH logo\",\n    symbol: \"weETH\",\n    address: \"0xcd5fe23c85820f7b72d0926fc9b05b43e359b7ee\",\n    coinGeckoId: \"wrapped-eeth\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/rETH-BPT.jpg\",\n    alt: \"rETH BPT logo\",\n    symbol: \"rETH BPT\",\n    address: \"0x1E19CF2D73a72Ef1332C882F20534B6519Be0276\",\n    coinGeckoId: \"B-rETH-STABLE\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/ethx.png\",\n    alt: \"ETHx logo\",\n    symbol: \"ETHx\",\n    address: \"0xa35b1b31ce002fbf2058d22f30f95d405200a15b\",\n    coinGeckoId: \"stader-ethx\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"/assets/icons/neth.png\",\n    alt: \"ETH logo\",\n    symbol: \"ETH\",\n    address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n    chain: chainSlugMap.ETHEREUM.id,\n  },\n  {\n    src: \"\",\n    alt: \"\",\n    symbol: \"ETH\",\n    address: \"\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n    chain: chainSlugMap.ARBITRUM.id,\n  },\n  {\n    src: \"\",\n    alt: \"\",\n    symbol: \"ETH\",\n    address: \"\",\n    coinGeckoId: \"ethereum\",\n    decimals: 18,\n    chain: chainSlugMap.OPTIMISM.id,\n  },\n]\n// --- ETH ACCEPTED TOKENS ---\nlet acceptedETHDepositTokens = [\n  \"USDC\",\n  \"GHO\",\n  \"USDT\",\n  \"DAI\",\n  \"LUSD\",\n  \"swETH\",\n  \"WETH\",\n  \"stETH\",\n  \"wstETH\",\n  \"cbETH\",\n  \"rETH\",\n  \"WBTC\",\n  \"FRAX\",\n  \"LINK\",\n  \"COMP\",\n  \"CRV\",\n  \"LDO\",\n  \"MKR\",\n  \"AAVE\",\n  \"ENS\",\n  \"UNI\",\n  \"SNX\",\n  \"1INCH\",\n  \"MATIC\",\n  \"SOMM\",\n  \"eETH\",\n  \"swETH\",\n  \"BUSD\",\n  \"rETH BPT\",\n  \"ETH\",\n]\n\nlet depositTokenMapETH = tokenConfig.reduce((map, token) => {\n  if (acceptedETHDepositTokens.includes(token.symbol)) {\n    map[token.symbol] = token\n  }\n  return map\n}, {} as { [symbol: string]: Token })\n\n// sort map by symbol\nexport const acceptedETHDepositTokenMap = Object.keys(\n  depositTokenMapETH\n)\n  .sort()\n  .reduce((obj, key) => {\n    obj[key] = depositTokenMapETH[key]\n    return obj\n  }, {} as { [symbol: string]: Token })\n\n// --- ARB ACCEPTED TOKENS ---\nlet acceptedARBDepositTokens = [\n  \"USDC\",\n  \"USDT\",\n  \"DAI\",\n  \"USDC.e\",\n  \"WETH\",\n  \"wstETH\",\n  \"rETH\",\n  \"ETH\",\n]\n\nlet depositTokenMapARB = tokenConfig.reduce((map, token) => {\n  if (acceptedARBDepositTokens.includes(token.symbol)) {\n    map[token.symbol] = token\n  }\n  return map\n}, {} as { [symbol: string]: Token })\n\n// sort map by symbol\nexport const acceptedARBDepositTokenMap = Object.keys(\n  depositTokenMapARB\n)\n  .sort()\n  .reduce((obj, key) => {\n    obj[key] = depositTokenMapARB[key]\n    return obj\n  }, {} as { [symbol: string]: Token })\n\n// --- OPTIMISM ACCEPTED TOKENS ---\nlet acceptedOPTDepositTokens = [\"WETH\", \"wstETH\", \"rETH\", \"ETH\"]\n\nconst acceptedDepositTokensByChain: { [key: string]: any } = {\n  ethereum: acceptedETHDepositTokens,\n  arbitrum: acceptedARBDepositTokens,\n  optimism: acceptedOPTDepositTokens,\n}\n\n// Creatae a map from each token symbol to its config\nexport const tokenConfigMap = tokenConfig.reduce((map, token) => {\n  map[`${token.symbol}_${token.chain.toUpperCase()}`] = token\n  return map\n}, {} as { [symbol: string]: Token })\n\nexport const depositAssetTokenList = [\n  `USDC`,\n  `AMPL`,\n  `BUSD`,\n  `DAI`,\n  `FRAX`,\n  `GUSD`,\n  `USDP`,\n  `RAI`,\n  `sUSD`,\n  `TUSD`,\n  `USDT`,\n]\n\nexport const depositAssetTokenConfig: Token[] = tokenConfig.filter(\n  (token) =>\n    depositAssetTokenList.includes(token.symbol) &&\n    depositAssetTokenList.includes(token.chain)\n)\n\nexport const getAcceptedDepositAssetsByChain = (chainId: string) => {\n  return acceptedDepositTokensByChain[chainId]\n    ? getTokenConfig(acceptedDepositTokensByChain[chainId], chainId)\n    : []\n}\n\nexport function getTokenConfig(tokenList: string[], chain: string) {\n  return tokenList.map((list) =>\n    tokenConfig.find(\n      (token) => token.symbol === list && token.chain === chain\n    )\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/data/uiConfig.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":12,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":16,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":20,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CellarKey, CellarNameKey, ConfigProps } from \"./types\"\n\ninterface BondingPeriod {\n  title: string\n  amount: string\n  value: BondingValueOptions\n  checked?: boolean\n}\n\ntype BondingValueOptions = 0 | 1 | 2\n\nexport const isBondingEnabled = (config: ConfigProps) => {\n  return true\n}\n\nexport const isBondButtonEnabled = (config: ConfigProps) => {\n  return true\n}\n\nexport const isRewardsEnabled = (config: ConfigProps) => {\n  return true\n}\n\nexport const intervalGainTimeline = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND\n  ) {\n    return \"monthly\"\n  }\n  return \"weekly\"\n}\n\nexport const depositAssetDefaultValue = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.AAVE ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH\n  ) {\n    return \"USDT\"\n  }\n  if (config.cellarNameKey === CellarNameKey.ALPHA_STETH) {\n    return \"WETH\"\n  }\n  return \"USDC\"\n}\n\nexport const isBondedDisabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n    config.cellarNameKey === CellarNameKey.TURBO_STETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey ===\n      CellarNameKey.TURBO_STETH_STETH_DEPOSIT ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.ALPHA_STETH\n  )\n}\n\nexport const isCurrentDepositsEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.AAVE ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH\n  )\n}\n\nexport const isAPYEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_BTC ||\n    config.cellarNameKey === CellarNameKey.FRAXIMAL ||\n    config.cellarNameKey === CellarNameKey.TURBO_SWETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_GHO ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_STETH ||\n    config.cellarNameKey === CellarNameKey.MORPHO_ETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey ===\n      CellarNameKey.TURBO_STETH_STETH_DEPOSIT ||\n    config.cellarNameKey ===\n      CellarNameKey.TEST_ARBITRUM_REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.ALPHA_STETH\n  )\n}\n\nexport const isRewardAPYEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.STEADY_BTC ||\n    config.cellarNameKey === CellarNameKey.STEADY_ETH\n  )\n}\n\nexport const isTokenPriceEnabledApp = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_BTC ||\n    config.cellarNameKey === CellarNameKey.FRAXIMAL ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK ||\n    config.cellarNameKey === CellarNameKey.AAVE ||\n    config.cellarNameKey === CellarNameKey.TURBO_SWETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_STETH ||\n    config.cellarNameKey === CellarNameKey.MORPHO_ETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey ===\n      CellarNameKey.TURBO_STETH_STETH_DEPOSIT ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL ||\n    config.cellarNameKey === CellarNameKey.TURBO_GHO ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey ===\n      CellarNameKey.TEST_ARBITRUM_REAL_YIELD_USD ||\n    config.cellarNameKey ===\n      CellarNameKey.TEST_ARBITRUM_MULTI_ASSET_DEPOSIT\n  )\n}\n\nexport const isTokenPriceEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND ||\n    config.cellarNameKey === CellarNameKey.STEADY_BTC ||\n    config.cellarNameKey === CellarNameKey.STEADY_ETH ||\n    config.cellarNameKey === CellarNameKey.STEADY_UNI ||\n    config.cellarNameKey === CellarNameKey.STEADY_MATIC ||\n    config.cellarNameKey === CellarNameKey.ETH_TREND_GROWTH\n  )\n}\n\nexport const showTokenPriceInsteadOfApy = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK\n  )\n}\n\nexport const isDailyChangeEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND ||\n    config.cellarNameKey === CellarNameKey.STEADY_BTC ||\n    config.cellarNameKey === CellarNameKey.STEADY_ETH ||\n    config.cellarNameKey === CellarNameKey.STEADY_UNI ||\n    config.cellarNameKey === CellarNameKey.STEADY_MATIC\n  )\n}\n\nexport const lpTokenTooltipContent = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.TURBO_SWETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_STETH ||\n    config.cellarNameKey === CellarNameKey.MORPHO_ETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey ===\n      CellarNameKey.TURBO_STETH_STETH_DEPOSIT ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_BTC\n  )\n    return \"Unbonded LP tokens earn yield from the vault but do not earn liquidity mining rewards\"\n  else\n    return \"The LP tokens represent a user's share of the pool and can always be redeemed for the original tokens\"\n}\n\nexport const tokenPriceTooltipContent = (config: ConfigProps) => {\n  if (config.cellarNameKey === CellarNameKey.STEADY_ETH)\n    return \"The dollar value of the ETH and USDC that 1 token can be redeemed\"\n  if (config.cellarNameKey === CellarNameKey.STEADY_BTC)\n    return \"The dollar value of the BTC and USDC that 1 token can be redeemed\"\n  if (config.cellarNameKey === CellarNameKey.STEADY_UNI)\n    return \"The dollar value of the UNI and USDC that 1 token can be redeemed\"\n  if (config.cellarNameKey === CellarNameKey.STEADY_MATIC)\n    return \"The dollar value of the MATIC and USDC that 1 token can be redeemed\"\n  if (\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND\n  )\n    return `The dollar value of the ETH, BTC, and USDC that 1 token can be redeemed for`\n  if (config.cellarNameKey === CellarNameKey.DEFI_STARS)\n    return \"The dollar value of the COMP, CRV, LDO, MKR, AAVE and USDC that 1 token can be redeemed for\"\n  if (config.cellarNameKey === CellarNameKey.ETH_TREND_GROWTH)\n    return \"The dollar value that 1 token can be redeemed for\"\n\n  return \"\"\n}\n\nexport const isTokenPriceChartEnabled = (config: ConfigProps) => {\n  return (\n    config.cellarNameKey === CellarNameKey.STEADY_BTC ||\n    config.cellarNameKey === CellarNameKey.STEADY_ETH ||\n    config.cellarNameKey === CellarNameKey.STEADY_UNI ||\n    config.cellarNameKey === CellarNameKey.STEADY_MATIC ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND ||\n    config.cellarNameKey === CellarNameKey.DEFI_STARS\n    // ! Enable a bit post launch\n    //config.cellarNameKey === CellarNameKey.ETH_TREND_GROWTH\n  )\n}\n\nexport const isApyChartEnabled = (config: ConfigProps) => {\n  return (\n    config.cellar.key === CellarKey.CELLAR_V2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_STETH ||\n    config.cellarNameKey === CellarNameKey.MORPHO_ETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT ||\n    config.cellarNameKey === CellarNameKey.TURBO_SWETH ||\n    config.cellarNameKey ===\n      CellarNameKey.TURBO_STETH_STETH_DEPOSIT ||\n    config.cellarNameKey === CellarNameKey.TURBO_GHO\n  )\n}\n\nexport const bondingPeriodOptions = (\n  config: ConfigProps\n): BondingPeriod[] => {\n  if (\n    config.cellarNameKey === CellarNameKey.AAVE ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey === CellarNameKey.ETH_TREND_GROWTH ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL ||\n    config.cellarNameKey === CellarNameKey.MORPHO_ETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_GHO ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey ===\n      CellarNameKey.TEST_ARBITRUM_REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_BTC\n  ) {\n    return [\n      {\n        title: \"7 Day Unbonding\",\n        amount: \"1.1x SOMM\",\n        value: 0,\n      },\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"1.3x SOMM\",\n        value: 1,\n      },\n      {\n        title: \"21 Day Unbonding\",\n        amount: \"1.5x SOMM\",\n        value: 2,\n      },\n    ]\n  }\n  if (config.cellarNameKey === CellarNameKey.FRAXIMAL) {\n    return [\n      {\n        title: \"5 Day Unbonding\",\n        amount: \"1.1x SOMM\",\n        value: 0,\n      },\n      {\n        title: \"10 Day Unbonding\",\n        amount: \"1.3x SOMM\",\n        value: 1,\n      },\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"1.5x SOMM\",\n        value: 2,\n      },\n    ]\n  }\n  if (\n    config.cellarNameKey === CellarNameKey.ETH_BTC_MOM ||\n    config.cellarNameKey === CellarNameKey.ETH_BTC_TREND ||\n    config.cellarNameKey === CellarNameKey.DEFI_STARS\n  ) {\n    return [\n      {\n        title: \"10 Day Unbonding\",\n        amount: \"1.1x SOMM\",\n        value: 0,\n      },\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"1.2x SOMM\",\n        value: 1,\n      },\n      {\n        title: \"20 Day Unbonding\",\n        amount: \"1.25x SOMM\",\n        value: 2,\n      },\n    ]\n  }\n  if (\n    config.cellarNameKey === CellarNameKey.STEADY_BTC ||\n    config.cellarNameKey === CellarNameKey.STEADY_ETH ||\n    config.cellarNameKey === CellarNameKey.STEADY_UNI ||\n    config.cellarNameKey === CellarNameKey.STEADY_MATIC\n  ) {\n    return [\n      {\n        title: \"10 Day Unbonding\",\n        amount: \"1.1x SOMM\",\n        value: 0,\n      },\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"1.2x SOMM\",\n        value: 1,\n      },\n      {\n        title: \"20 Day Unbonding\",\n        amount: \"1.25x SOMM\",\n        value: 2,\n      },\n    ]\n  }\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_ARB ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD_ARB\n  ) {\n    return [\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"Merkle Rewards\",\n        value: 1,\n      },\n    ]\n  }\n\n  if (config.cellarNameKey === CellarNameKey.TURBO_SWETH) {\n    return [\n      {\n        title: \"14 Day Unbonding\",\n        amount: \"Up to 6 PEARL per swETH daily + SOMM Rewards\",\n        value: 0,\n      },\n    ]\n  }\n\n  return []\n}\n\nexport const isUseBigBacktestingModal = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_USD ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH\n  ) {\n    return \"6xl\"\n  }\n  return \"2xl\"\n}\n\n// Launch dates and UI toggles\nexport const LAUNCH_DATE_ALPHA_STETH = \"2025-08-19T00:00:00Z\"\n\nexport const apyLabel = (config: ConfigProps) => {\n  if (\n    (config.cellar.key !== CellarKey.CELLAR_V0815 &&\n      config.cellar.key !== CellarKey.CELLAR_V0816) ||\n    config.cellarNameKey === CellarNameKey.TURBO_SWETH\n  ) {\n    if (\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n      config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL ||\n      config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n      config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n      config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n      config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n      config.cellarNameKey ===\n        CellarNameKey.TEST_ARBITRUM_MULTI_ASSET_DEPOSIT\n    ) {\n      return \"Estimated APY\"\n    }\n    return \"Net APY\"\n  }\n  return \"Net APY\"\n}\n\n// TODO: UPDATE THIS FUNCTION, WEHN THE APY IS AVAILABLE\nexport const apyHoverLabel = (config: ConfigProps) => {\n  if (\n    config.cellar.key !== CellarKey.CELLAR_V0815 &&\n    config.cellar.key !== CellarKey.CELLAR_V0816\n  ) {\n    if (\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n      config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n      config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n      config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n      config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI\n    ) {\n      return \"Estimated APY\"\n      // } else if (\n\n      // ) {\n      //   return \"7 Day MA APY\"\n    } else if (config.cellarNameKey === CellarNameKey.TURBO_SOMM) {\n      return \"Estimated Reward APY\"\n    }\n    return \"30D MA APY\"\n  }\n  return \"30D MA APY\"\n}\n\n// TODO: UPDATE THIS FUNCTION, WEHN THE APY IS AVAILABLE\nexport const baseApyHoverLabel = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI\n  ) {\n    return \"Estimated APY\"\n    // } else if (\n\n    // ) {\n    //   return \"7 Day MA APY\"\n  } else if (config.cellarNameKey === CellarNameKey.TURBO_SOMM) {\n    return \"Estimated Reward APY\"\n  }\n  return \"30D MA APY\"\n}\n\n// TODO: UPDATE THIS FUNCTION, WEHN THE APY IS AVAILABLE\nexport const isEstimatedApyEnable = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM\n  ) {\n    return true\n  }\n  return false\n}\n\nexport const isWithdrawQueueEnabled = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK ||\n    config.cellarNameKey === CellarNameKey.ALPHA_STETH\n  ) {\n    return true\n  }\n  return false\n}\n\n// TODO: UPDATE THIS FUNCTION, WEHN THE APY IS AVAILABLE\nexport const apyChartLabel = (config: ConfigProps) => {\n  if (\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL ||\n    config.cellarNameKey === CellarNameKey.TURBO_EETHV2 ||\n    config.cellarNameKey === CellarNameKey.TURBO_SOMM ||\n    config.cellarNameKey === CellarNameKey.TURBO_DIVETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_ETHX ||\n    config.cellarNameKey === CellarNameKey.TURBO_RSETH ||\n    config.cellarNameKey === CellarNameKey.TURBO_EZETH ||\n    config.cellarNameKey ===\n      CellarNameKey.TEST_ARBITRUM_MULTI_ASSET_DEPOSIT\n  ) {\n    return \"Estimated APY\"\n  }\n  return \"Moving Average APY \"\n}\n\n// TODO: UPDATE THIS FUNCTION, WEHN THE APY IS AVAILABLE\nexport const estimatedApyValue = (config: ConfigProps) => {\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH) {\n    return {\n      value: 1.6,\n      formatted: \"1.60%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX) {\n    return {\n      value: 3.7,\n      formatted: \"3.70%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI) {\n    return {\n      value: 2.6,\n      formatted: \"2.60%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS) {\n    return {\n      value: 1.9,\n      formatted: \"1.90%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_SOMM) {\n    return {\n      value: 20.0,\n      formatted: \"20.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_EETH) {\n    return {\n      value: 6.0,\n      formatted: \"6.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_EETHV2) {\n    return {\n      value: 6.0,\n      formatted: \"6.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_DIVETH) {\n    return {\n      value: 4.0,\n      formatted: \"4.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_ETHX) {\n    return {\n      value: 6.0,\n      formatted: \"6.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT) {\n    return {\n      value: 15.0,\n      formatted: \"15.0%\",\n    }\n  }\n\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_SCROLL) {\n    return {\n      value: 15.0,\n      formatted: \"15.0%\",\n    }\n  }\n\n  // if (config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH_OPT) {\n  //   return {\n  //     value: 15.0,\n  //     formatted: \"15.0%\",\n  //   }\n  // }\n\n  if (config.cellarNameKey === CellarNameKey.TURBO_RSETH) {\n    return {\n      value: 8.0,\n      formatted: \"8.0%\",\n    }\n  }\n  if (config.cellarNameKey === CellarNameKey.TURBO_EZETH) {\n    return {\n      value: 6.0,\n      formatted: \"6.0%\",\n    }\n  }\n\n  // Default return for unmatched cases\n  return {\n    value: 0,\n    formatted: \"0.00%\",\n  }\n}\nexport const showNetValueInAsset = (config: ConfigProps) => {\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH) {\n    return true\n  }\n  return false\n}\n\nexport const waitTime = (config: ConfigProps) => {\n  if (config.cellarNameKey === CellarNameKey.REAL_YIELD_USD) {\n    return \"24 hours\"\n  } else if (\n    // non depracated and with out share price oracle vaults\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ETH ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_BTC ||\n    config.cellarNameKey === CellarNameKey.FRAXIMAL ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_LINK ||\n    config.cellarNameKey === CellarNameKey.ETH_TREND_GROWTH ||\n    config.cellarNameKey === CellarNameKey.DEFI_STARS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_ENS ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_UNI ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_SNX ||\n    config.cellarNameKey === CellarNameKey.REAL_YIELD_1INCH\n  ) {\n    return \"10 min\"\n  }\n  return null // No wait time, all vaults what have share price oracle or are depracated\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/chakra.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/nivo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/useSubmitTx.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/useTypingText.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/useWalletHealth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/utils/useBetterMediaQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/utils/useCancel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/utils/useIsMounted.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/utils/useScrollDirection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/wagmi-helper/useWaitForTransactions.ts","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Object` as a type. The `Object` type actually means \"any non-nullish value\", so it is marginally better than `unknown`.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you really want a type meaning \"any non-nullish value\", you probably want `NonNullable<unknown>` instead.","line":25,"column":10,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":25,"endColumn":16,"suggestions":[{"messageId":"bannedTypeReplacement","data":{"name":"Object","replacement":"object"},"fix":{"range":[1026,1032],"text":"object"},"desc":"Replace `Object` with `object`."},{"messageId":"bannedTypeReplacement","data":{"name":"Object","replacement":"unknown"},"fix":{"range":[1026,1032],"text":"unknown"},"desc":"Replace `Object` with `unknown`."},{"messageId":"bannedTypeReplacement","data":{"name":"Object","replacement":"NonNullable<unknown>"},"fix":{"range":[1026,1032],"text":"NonNullable<unknown>"},"desc":"Replace `Object` with `NonNullable<unknown>`."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":73,"column":13,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":73,"endColumn":26,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[2052,2065],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'confirmations', 'timeout', and 'wait'. Either include them or remove the dependency array.","line":108,"column":6,"nodeType":"ArrayExpression","endLine":108,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [cancelQuery, confirmations, hash, skip, timeout, wait, wait_]","fix":{"range":[3232,3264],"text":"[cancelQuery, confirmations, hash, skip, timeout, wait, wait_]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Reference: https://github.com/wagmi-dev/wagmi/blob/0.2.x/packages/react/src/hooks/transactions/useWaitForTransaction.ts\n// This helper hook is created because wagmi migration from 0.2.x to >=0.3.x have breaking change, it removes `wait` function https://wagmi.sh/docs/migration-guide#usewaitfortransaction\n// We need `wait` because our transaction pattern is using async functions, in >=0.3.x versions is using hook pattern\nimport * as React from \"react\"\nimport { useCancel } from \"hooks/utils/useCancel\"\nimport { usePublicClient } from \"wagmi\"\nimport { TransactionReceipt } from \"viem/_types/types/transaction\"\n\nexport type Config = {\n  /**\n   * Number of blocks to wait for after transaction is mined\n   * @default 1\n   */\n  confirmations?: number\n  /** Transaction hash to monitor */\n  hash?: string\n  /** Disables fetching */\n  skip?: boolean\n  /*\n   * Maximum amount of time to wait before timing out in milliseconds\n   * @default 0\n   */\n  timeout?: number\n  /** Function resolving to transaction receipt */\n  wait?: Object\n}\n\ntype State = {\n  receipt?: TransactionReceipt\n  error?: Error\n  loading?: boolean\n}\n\nconst initialState: State = {\n  loading: false,\n}\n\nexport const useWaitForTransaction = ({\n  confirmations,\n  hash,\n  skip,\n  timeout,\n  wait: wait_,\n}: Config = {}) => {\n  const publicClient = usePublicClient()\n  const [state, setState] = React.useState<State>(initialState)\n\n  const cancelQuery = useCancel()\n  const wait = React.useCallback(\n    async (config?: {\n      confirmations?: Config[\"confirmations\"]\n      hash?: Config[\"hash\"]\n      timeout?: Config[\"timeout\"]\n      wait?: Config[\"wait\"]\n    }) => {\n      let didCancel = false\n      cancelQuery(() => {\n        didCancel = true\n      })\n\n      try {\n        const config_ = config ?? {\n          confirmations,\n          hash,\n          timeout,\n          wait: wait_,\n        }\n        if (!config_.hash && !config_.wait)\n          throw new Error(\"hash or wait is required\")\n\n        let promise: Promise<TransactionReceipt>\n        if (config_.wait)\n          { // @ts-ignore\n            promise = config_.wait(config_.confirmations)\n          }\n        else if (config_.hash)\n          promise = publicClient!.waitForTransactionReceipt({\n              confirmations: config_.confirmations,\n              hash: config_.hash as `0x${string}`,\n              timeout: config_.timeout\n            }\n          )\n        else throw new Error(\"hash or wait is required\")\n\n        setState((x) => ({ ...x, loading: true }))\n        const receipt = await promise\n        if (!didCancel) {\n          setState((x) => ({ ...x, loading: false, receipt }))\n        }\n        return { data: receipt, error: undefined }\n      } catch (error_) {\n        const error = <Error>error_\n        if (!didCancel) {\n          setState((x) => ({ ...x, error, loading: false }))\n        }\n        return { data: undefined, error }\n      }\n    },\n    [cancelQuery, confirmations, hash, publicClient, timeout, wait_]\n  )\n\n  // Fetch balance when deps or chain changes\n  /* eslint-disable react-hooks/exhaustive-deps */\n  React.useEffect(() => {\n    if (skip || (!hash && !wait_)) return\n    wait({ confirmations, hash, timeout, wait: wait_ })\n    return cancelQuery\n  }, [cancelQuery, hash, skip, wait_])\n  /* eslint-enable react-hooks/exhaustive-deps */\n\n  return [\n    {\n      data: state.receipt,\n      error: state.error,\n      loading: state.loading,\n    },\n    wait,\n  ] as const\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/ReusableToastBodies.tsx","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":15,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":16,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":16,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'addToast' is defined but never used.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'closeAll' is defined but never used.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":54,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":55,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":55,"endColumn":21},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":101,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":101,"endColumn":21},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":102,"column":13,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":102,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HStack, IconButton, Stack, Text } from \"@chakra-ui/react\"\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { AiFillCopy } from \"react-icons/ai\"\nimport { Link } from \"components/Link\"\nimport { ExternalLinkIcon } from \"components/_icons\"\n\nexport const TxHashToastBody = ({\n  title,\n  hash,\n  addToast,\n  closeAll,\n}: {\n  title: string\n  hash: string\n  addToast: Function\n  closeAll: Function\n}) => (\n  <Stack>\n    <Stack spacing={0} fontSize=\"xs\">\n      <Text>{title}</Text>\n      <HStack>\n        <Text fontWeight=\"bold\">\n          Tx Hash: {truncateWalletAddress(hash)}\n        </Text>\n        <CopyTxHashButton\n          hash={hash}\n          addToast={addToast}\n          closeAll={closeAll}\n        />\n      </HStack>\n    </Stack>\n    <Link\n      fontSize=\"sm\"\n      href={`https://www.mintscan.io/sommelier/txs/${hash}`}\n      target=\"_blank\"\n      textDecor=\"underline\"\n    >\n      <HStack>\n        <Text>View on Mintscan</Text>\n        <ExternalLinkIcon boxSize={3} />\n      </HStack>\n    </Link>\n  </Stack>\n)\n\nexport const BridgeTxHashToastBody = ({\n  hash,\n  amount,\n  addToast,\n  closeAll,\n}: {\n  hash: string\n  amount: string\n  addToast: Function\n  closeAll: Function\n}) => (\n  <Stack>\n    <Stack spacing={0} fontSize=\"xs\">\n      <HStack>\n        <Text as=\"span\" fontWeight=\"bold\">\n          Amount:\n        </Text>\n        <Text as=\"span\">{amount} SOMM</Text>\n      </HStack>\n      <HStack>\n        <Text as=\"span\" fontWeight=\"bold\">\n          Destination:\n        </Text>\n        <Text as=\"span\">Somm to Ethereum Mainnet</Text>\n      </HStack>\n      <HStack>\n        <Text as=\"span\" fontWeight=\"bold\" width=\"15ch\">\n          Est. time:\n        </Text>\n        <Text as=\"span\">\n          1-5 min. Transaction may take additional time to process\n          after network validation\n        </Text>\n      </HStack>\n    </Stack>\n    <Link\n      fontSize=\"sm\"\n      href={`https://www.mintscan.io/sommelier/txs/${hash}`}\n      target=\"_blank\"\n      textDecor=\"underline\"\n    >\n      <HStack>\n        <Text>View on Mintscan</Text>\n        <ExternalLinkIcon boxSize={3} />\n      </HStack>\n    </Link>\n  </Stack>\n)\n\nconst CopyTxHashButton = ({\n  hash,\n  addToast,\n  closeAll,\n}: {\n  hash: string\n  addToast: Function\n  closeAll: Function\n}) => (\n  <IconButton\n    onClick={() => {\n      navigator.clipboard.writeText(hash)\n      addToast({\n        heading: \"Copied to clipboard\",\n        body: null,\n        status: \"success\",\n        duration: null,\n        closeHandler: closeAll,\n      })\n    }}\n    aria-label=\"Copy to clipboard\"\n    icon={<AiFillCopy />}\n  />\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useApproveERC20.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":11},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":59,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":59,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1405,1418],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAccount, usePublicClient, useWalletClient } from \"wagmi\"\nimport { Address, erc20Abi, getAddress, getContract, parseUnits } from \"viem\"\nimport { Text } from \"@chakra-ui/react\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\n\nexport const useApproveERC20 = ({\n  tokenAddress,\n  spender,\n}: {\n  tokenAddress: string\n  spender: string\n}) => {\n  const { addToast, update, close, closeAll } = useBrandedToast()\n\n  const { address } = useAccount()\n\n  const { data: walletClient } = useWalletClient()\n  const publicClient = usePublicClient()\n\n  const erc20Contract = publicClient && getContract({\n    address: getAddress(tokenAddress),\n    abi: erc20Abi,\n    client: {\n      wallet: walletClient,\n      public: publicClient\n    },\n  })!\n\n  const [_, wait] = useWaitForTransaction({\n    skip: true,\n  })\n\n  const doApprove = async (\n    amount: number,\n    options?: {\n      onSuccess?: () => void\n      onError?: (error: Error) => void\n    }\n  ) => {\n    const allowance = await erc20Contract?.read.allowance([\n      address as Address,\n      spender as Address\n      ]\n    ) ?? BigInt(0)\n    const amtInWei = parseUnits(\n      amount.toString(),\n      18\n    )\n\n    let needsApproval\n    try {\n      needsApproval = allowance < amtInWei\n    } catch (e) {\n      return\n    }\n    if (needsApproval) {\n      try {\n        // @ts-ignore\n        const hash = await erc20Contract?.write.approve([\n          spender,\n          amtInWei\n          ],\n          { account: address}\n        )\n\n        addToast({\n          heading: \"ERC20 Approval\",\n          status: \"default\",\n          body: <Text>Approving ERC20</Text>,\n          isLoading: true,\n          closeHandler: close,\n          duration: null,\n        })\n\n        const waitForApproval = wait({ confirmations: 1, hash })\n        const result = await waitForApproval\n        if (result?.data?.transactionHash) {\n          update({\n            heading: \"ERC20 Approval\",\n            body: <Text>ERC20 Approved</Text>,\n            status: \"success\",\n            closeHandler: closeAll,\n          })\n\n          if (\n            options?.onSuccess &&\n            typeof options.onSuccess === \"function\"\n          ) {\n            options.onSuccess()\n          }\n        }\n\n        if (result?.error) {\n          update({\n            heading: \"ERC20 Approval\",\n            body: <Text>Approval Failed</Text>,\n            status: \"error\",\n            closeHandler: closeAll,\n          })\n\n          if (\n            options?.onError &&\n            typeof options?.onError === \"function\"\n          ) {\n            options.onError(result.error)\n          }\n        }\n      } catch (e) {\n        const error = e as Error\n        console.error(error)\n        addToast({\n          heading: \"ERC20 Approval\",\n          body: <Text>Approval Cancelled</Text>,\n          status: \"info\",\n          closeHandler: closeAll,\n        })\n        throw e\n      }\n    }\n  }\n\n  return { doApprove }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useBridgeEthToSommTx.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":28,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":11},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":160,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":160,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[4709,4722],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":180,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":180,"endColumn":22,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[5211,5224],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":249,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":249,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[7213,7226],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BridgeFormValues } from \"components/_cards/BridgeCard\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { useState } from \"react\"\nimport { config } from \"utils/config\"\nimport { useAccount, usePublicClient, useWalletClient } from \"wagmi\"\nimport { erc20Abi, getContract, parseUnits, getAddress, bytesToHex } from \"viem\"\nimport { HStack, IconButton, Stack, Text } from \"@chakra-ui/react\"\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { AiFillCopy } from \"react-icons/ai\"\nimport { Link } from \"components/Link\"\nimport { ExternalLinkIcon } from \"components/_icons\"\nimport { getBytes32 } from \"utils/getBytes32\"\nimport { analytics } from \"utils/analytics\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\nimport { tokenConfigMap } from \"data/tokenConfig\"\nimport { MaxUint256 } from \"utils/bigIntHelpers\"\n\n// TODO: this needs to be adapted to multichain\nexport const useBridgeEthToSommTx = () => {\n  const { CONTRACT } = config\n  // Currently `close` have a bug it only closes the last toast appeared\n  // TODO: Fix `close` and implement it here https://github.com/strangelove-ventures/sommelier/issues/431\n  const { addToast, update, closeAll } = useBrandedToast()\n  const [isLoading, setIsLoading] = useState(false)\n  const { chain } = useAccount()\n  const { data: walletClient } = useWalletClient()\n  const publicClient = usePublicClient()\n  const [_, wait] = useWaitForTransaction({\n    skip: true,\n  })\n  const { address } = useAccount()\n\n  const erc20Contract = publicClient && getContract({\n    address: tokenConfigMap.SOMM_ETHEREUM.address as `0x${string}`,\n    abi: erc20Abi,\n    client: {\n      wallet: walletClient,\n      public: publicClient\n    }\n  })!\n\n  const bridgeContract = publicClient && getContract({\n    address: CONTRACT.BRIDGE.ADDRESS as `0x${string}`,\n    abi: CONTRACT.BRIDGE.ABI,\n    client: {\n      wallet: walletClient,\n      public: publicClient\n    }\n  })!\n\n  const TxHashToastBody = ({\n    title,\n    hash,\n  }: {\n    title: string\n    hash: string\n  }) => (\n    <Stack>\n      <Stack spacing={0} fontSize=\"xs\">\n        <Text>{title}</Text>\n        <HStack>\n          <Text fontWeight=\"bold\">\n            Tx Hash: {truncateWalletAddress(hash)}{\" \"}\n          </Text>\n          <CopyTxHashButton hash={hash} />\n        </HStack>\n      </Stack>\n\n      <Link\n        fontSize=\"sm\"\n        href={`${chain?.blockExplorers?.default.url}/tx/${hash}`}\n        target=\"_blank\"\n        textDecor=\"underline\"\n      >\n        <HStack>\n          <Text>{`View on ${chain?.blockExplorers?.default.name}`}</Text>\n          <ExternalLinkIcon boxSize={3} />\n        </HStack>\n      </Link>\n    </Stack>\n  )\n\n  const BridgeTxHashToastBody = ({\n    hash,\n    amount,\n  }: {\n    hash: string\n    amount: string\n  }) => (\n    <Stack>\n      <Stack spacing={0} fontSize=\"xs\">\n        <HStack>\n          <Text as=\"span\" fontWeight=\"bold\">\n            Amount:\n          </Text>\n          <Text as=\"span\">{amount} SOMM</Text>\n        </HStack>\n        <HStack>\n          <Text as=\"span\" fontWeight=\"bold\">\n            Destination:\n          </Text>\n          <Text as=\"span\">Ethereum Mainnet to Somm</Text>\n        </HStack>\n        <HStack>\n          <Text as=\"span\" fontWeight=\"bold\" width=\"15ch\">\n            Est. time:\n          </Text>\n          <Text as=\"span\">\n            10-15 min. Transaction may take additional time to process\n            after network validation\n          </Text>\n        </HStack>\n      </Stack>\n      <Link\n        fontSize=\"sm\"\n        href={`${chain?.blockExplorers?.default.url}/tx/${hash}`}\n        target=\"_blank\"\n        textDecor=\"underline\"\n      >\n        <HStack>\n          <Text>{`View on ${chain?.blockExplorers?.default.name}`}</Text>\n          <ExternalLinkIcon boxSize={3} />\n        </HStack>\n      </Link>\n    </Stack>\n  )\n\n  const CopyTxHashButton = ({ hash }: { hash: string }) => (\n    <IconButton\n      onClick={() => {\n        navigator.clipboard.writeText(hash)\n        addToast({\n          heading: \"Copied to clipboard\",\n          body: null,\n          status: \"success\",\n          duration: null,\n          closeHandler: closeAll,\n        })\n      }}\n      aria-label=\"Copy to clipboard\"\n      icon={<AiFillCopy />}\n    />\n  )\n\n  const doEthToSomm = async (props: BridgeFormValues) => {\n    try {\n      setIsLoading(true)\n      const convertedAmount = parseUnits(\n        String(props.amount),\n        tokenConfigMap.SOMM_ETHEREUM.decimals\n      )\n      // analytics.track(\"bridge.approval-required\", {\n      //   value: props.amount,\n      //   path: \"ethToSomm\",\n      //   sender: address,\n      //   receiver: props.address,\n      // })\n\n      // Check if approval needed\n      // @ts-ignore\n      const allowance = await erc20Contract.read.allowance([\n        address!,\n        getAddress(CONTRACT.BRIDGE.ADDRESS)\n        ]\n      )\n\n      const needsApproval = allowance < convertedAmount\n\n      if (needsApproval) {\n        addToast({\n          heading: \"Loading\",\n          status: \"default\",\n          body: <Text>Approval in progress</Text>,\n          isLoading: true,\n          duration: null,\n          closeHandler: closeAll,\n        })\n\n        // ERC20 Approval\n        // @ts-ignore\n        const erc20Hash = await erc20Contract.write.approve([\n          getAddress(CONTRACT.BRIDGE.ADDRESS),\n          MaxUint256\n          ],\n          { account: address }\n        )\n        const waitForApproval = wait({\n          hash: erc20Hash,\n        })\n        const resultApproval = await waitForApproval\n\n        if (resultApproval.data?.status !== \"success\") {\n          // analytics.track(\"bridge.approval-failed\", {\n          //   value: props.amount,\n          // })\n          setIsLoading(false)\n          return update({\n            heading: \"ERC20 Approval\",\n            body: (\n              <TxHashToastBody\n                title=\"Contract failed\"\n                hash={erc20Hash}\n              />\n            ),\n            status: \"error\",\n            duration: null,\n            closeHandler: closeAll,\n          })\n        }\n        if (\n          resultApproval?.data?.transactionHash &&\n          resultApproval.data?.status === \"success\"\n        ) {\n          // analytics.track(\"bridge.approval-succeeded\", {\n          //   value: props.amount,\n          //   path: \"ethToSomm\",\n          //   sender: address,\n          //   receiver: props.address,\n          // })\n          update({\n            heading: \"ERC20 Approval\",\n            body: (\n              <TxHashToastBody title=\"Approved\" hash={erc20Hash} />\n            ),\n            status: \"primary\",\n            duration: null,\n            closeHandler: closeAll,\n          })\n        }\n      }\n\n      // analytics.track(\"bridge.contract-started\", {\n      //   value: props.amount,\n      //   path: \"ethToSomm\",\n      //   sender: address,\n      //   receiver: props.address,\n      // })\n      // Bridge transaction\n      addToast({\n        heading: \"Loading\",\n        status: \"default\",\n        body: <Text>Transaction in progress</Text>,\n        isLoading: true,\n        duration: null,\n        closeHandler: closeAll,\n      })\n      const bytes32asHex = bytesToHex(getBytes32(props.address))\n\n      // @ts-ignore\n      const bridgeHash = await bridgeContract?.write.sendToCosmos([\n        tokenConfigMap.SOMM_ETHEREUM.address,\n        bytes32asHex,\n        convertedAmount\n        ],\n        { account: address }\n      )\n      const waitForBridge = wait({\n        hash: bridgeHash,\n      })\n      const resultBridge = await waitForBridge\n\n      if (resultBridge.data?.status !== \"success\") {\n        analytics.track(\"bridge.contract-failed\", {\n          value: props.amount,\n          path: \"ethToSomm\",\n          sender: address,\n          receiver: props.address,\n          txHash: resultBridge.data?.transactionHash,\n        })\n        setIsLoading(false)\n        return update({\n          heading: \"Bridge Initiated\",\n          body: (\n            <TxHashToastBody\n              title=\"Contract Failed\"\n              hash={bridgeHash}\n            />\n          ),\n          status: \"error\",\n          duration: null,\n          closeHandler: closeAll,\n        })\n      }\n      if (\n        resultBridge?.data?.transactionHash &&\n        resultBridge.data?.status === \"success\"\n      ) {\n        analytics.track(\"bridge.contract-succeeded\", {\n          value: props.amount,\n          path: \"ethToSomm\",\n          sender: address,\n          receiver: props.address,\n          txHash: resultBridge.data?.transactionHash,\n        })\n        update({\n          heading: \"Bridge Initiated\",\n          body: (\n            <BridgeTxHashToastBody\n              amount={String(props.amount)}\n              hash={bridgeHash}\n            />\n          ),\n          status: \"primary\",\n          duration: null,\n          closeHandler: closeAll,\n        })\n      }\n      setIsLoading(false)\n    } catch (e) {\n      analytics.track(\"bridge.failed\", {\n        value: props.amount,\n        path: \"ethToSomm\",\n        sender: address,\n        receiver: props.address,\n      })\n      const error = e as Error\n      setIsLoading(false)\n      update({\n        heading: \"Error\",\n        body: <Text>{error.message}</Text>,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n    }\n  }\n\n  return { isLoading, doEthToSomm }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useBridgeSommToEthTx.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useHandleTransaction.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":37,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Text } from \"@chakra-ui/react\"\nimport { useBrandedToast } from \"hooks/chakra\"\nimport { Link } from \"components/Link\"\nimport { ExternalLinkIcon } from \"components/_icons\"\nimport { useWaitForTransaction } from \"hooks/wagmi-helper/useWaitForTransactions\"\nimport { ConfigProps } from \"data/types\"\nimport { ReactNode } from \"react\"\nimport { TransactionReceipt } from \"viem/_types/types/transaction\"\n\ntype Result =\n  | {\n      data: TransactionReceipt\n      error: undefined\n    }\n  | {\n      data: undefined\n      error: Error\n    }\n\ntype TxParams = {\n  cellarConfig: ConfigProps\n  hash: string\n  toastBody?: {\n    info?: ReactNode\n    success?: ReactNode\n    error?:ReactNode\n    successWithParams?: (data: Result) => ReactNode\n  }\n  onSuccess?: () => void\n  onError?: (error: Error) => void\n}\nexport const useHandleTransaction = (): {\n  doHandleTransaction: (T: TxParams) => Promise<void>\n} => {\n  const { addToast, update, close, closeAll } = useBrandedToast()\n\n  const [_, wait] = useWaitForTransaction({\n    skip: true,\n  })\n\n  const doHandleTransaction = async ({\n    cellarConfig,\n    hash,\n    toastBody,\n    onSuccess,\n    onError,\n  }: TxParams) => {\n    const infoBody = toastBody?.info || <Text>In progress...</Text>\n    const errorBody = toastBody?.error || <Text>Failed</Text>\n\n    addToast({\n      heading: \"Transaction\",\n      status: \"default\",\n      body: infoBody,\n      isLoading: true,\n      closeHandler: close,\n      duration: null,\n    })\n    const waitForApproval = wait({ confirmations: 1, hash })\n    const result = await waitForApproval\n\n    if (result?.data?.transactionHash) {\n      const successBody = toastBody?.success || (\n        <>\n          <Text>Successful</Text>\n          <Link\n            display=\"flex\"\n            alignItems=\"center\"\n            href={`${cellarConfig.chain.blockExplorer.url}/tx/${result?.data?.transactionHash}`}\n            isExternal\n          >\n            <Text as=\"span\">{`View on ${cellarConfig.chain.blockExplorer.name}`}</Text>\n            <ExternalLinkIcon ml={2} />\n          </Link>\n        </>\n      )\n      if (!!toastBody?.successWithParams) {\n        const tBody = toastBody.successWithParams(result)\n        update({\n          heading: \"Transaction\",\n          body: tBody,\n          status: \"success\",\n          closeHandler: closeAll,\n        })\n      } else {\n        update({\n          heading: \"Transaction\",\n          body: successBody,\n          status: \"success\",\n          closeHandler: closeAll,\n        })\n      }\n\n      if (onSuccess && typeof onSuccess === \"function\") {\n        onSuccess()\n      }\n    }\n\n    if (result?.error) {\n      update({\n        heading: \"Transaction\",\n        body: errorBody,\n        status: \"error\",\n        closeHandler: closeAll,\n      })\n\n      if (onError && typeof onError === \"function\") {\n        onError(result.error)\n      }\n    }\n  }\n\n  return { doHandleTransaction }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useImportToken.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[267,270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[267,270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { erc20Abi } from \"viem\"\nimport { usePublicClient } from \"wagmi\"\nimport { useMutation } from \"@tanstack/react-query\"\n\ninterface ImportTokenParams {\n  address: string\n  imageUrl?: string\n  chain?: string\n}\n\ninterface ImportTokenCallbacks {\n  onSuccess?: (data: any) => void\n  onError?: (error: Error) => void\n}\n\nexport const useImportToken = (callbacks?: ImportTokenCallbacks) => {\n  const publicClient = usePublicClient()\n\n  return useMutation({\n    mutationFn: async (params: ImportTokenParams) => {\n      // Get token data\n      if (!publicClient) return\n      \n      const tokenData = await publicClient.multicall({\n        contracts: [\n          {\n            address: params.address as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"name\",\n          },\n          {\n            address: params.address as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"symbol\",\n          },\n          {\n            address: params.address as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n          },\n        ],\n      })\n\n      const tokenInfo = {\n        name: tokenData[0].result,\n        symbol: tokenData[1].result,\n        decimals: tokenData[2].result,\n        address: params.address,\n        imageUrl: params.imageUrl,\n      }\n\n      // Try to import to wallet (MetaMask)\n      if (typeof window !== \"undefined\" && window.ethereum) {\n        try {\n          console.log(\"Attempting to import token to MetaMask:\", {\n            address: params.address,\n            symbol: tokenData[1].result,\n            decimals: tokenData[2].result,\n            image: params.imageUrl,\n          })\n          \n          await window.ethereum.request({\n            method: \"wallet_watchAsset\",\n            params: {\n              type: \"ERC20\",\n              options: {\n                address: params.address,\n                symbol: tokenData[1].result,\n                decimals: tokenData[2].result,\n                image: params.imageUrl,\n              },\n            },\n          })\n          \n          console.log(\"Token import to MetaMask successful\")\n        } catch (error) {\n          console.error(\"Failed to import token to wallet:\", error)\n          throw error\n        }\n      } else {\n        console.warn(\"MetaMask not available for token import\")\n      }\n\n      return tokenInfo\n    },\n    onSuccess: callbacks?.onSuccess,\n    onError: callbacks?.onError,\n  })\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/hooks/web3/useWalletConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2375,2378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2375,2378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2926,2929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2926,2929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef, useCallback, useEffect, useState } from \"react\"\nimport { useConnect, useAccount } from \"wagmi\"\nimport { useBrandedToast } from \"hooks/chakra\"\n\nexport const useWalletConnection = () => {\n  const { addToast } = useBrandedToast()\n  const abortRef = useRef<AbortController | null>(null)\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n  const [isConnecting, setIsConnecting] = useState(false)\n  const { connect, isPending } = useConnect()\n  const { isConnected } = useAccount()\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      abortRef.current?.abort()\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  // Monitor connection state changes and manage AbortController\n  useEffect(() => {\n    if (isPending && !isConnecting) {\n      // Connection started - create AbortController\n      setIsConnecting(true)\n      abortRef.current?.abort() // Abort any existing connection\n      abortRef.current = new AbortController()\n\n      // Set 30s timeout as fallback\n      timeoutRef.current = setTimeout(() => {\n        if (abortRef.current) {\n          abortRef.current.abort()\n          addToast({\n            heading: \"Connection Timeout\",\n            body: \"Connection request timed out. Please try again.\",\n            status: \"error\",\n          })\n        }\n      }, 30000)\n    } else if (!isPending && isConnecting) {\n      // Connection finished (success or failure)\n      setIsConnecting(false)\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n        timeoutRef.current = null\n      }\n    }\n  }, [isPending, isConnecting, addToast])\n\n  // Reset connecting state when wallet connects\n  useEffect(() => {\n    if (isConnected) {\n      setIsConnecting(false)\n    }\n  }, [isConnected])\n\n  // Function to cancel current connection\n  const cancelConnection = useCallback(() => {\n    if (abortRef.current) {\n      abortRef.current.abort()\n      addToast({\n        heading: \"Connection Cancelled\",\n        body: \"Wallet connection was cancelled.\",\n        status: \"info\",\n      })\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n    setIsConnecting(false)\n  }, [addToast])\n\n  // Advanced connection handler with AbortController support\n  const handleConnectWithAbort = useCallback(\n    async (connector: any) => {\n      if (isConnecting) return\n\n      setIsConnecting(true)\n      abortRef.current?.abort()\n      abortRef.current = new AbortController()\n\n      const timer = setTimeout(() => {\n        abortRef.current?.abort()\n        addToast({\n          heading: \"Connection Timeout\",\n          body: \"Connection request timed out. Please try again.\",\n          status: \"error\",\n        })\n      }, 30000)\n\n      try {\n        await connect({ connector })\n\n        // Clear timeout on successful connection\n        clearTimeout(timer)\n      } catch (e: any) {\n        if (\n          e.name === \"AbortError\" ||\n          abortRef.current?.signal.aborted\n        ) {\n          addToast({\n            heading: \"Connection Cancelled\",\n            body: \"Connection canceled. Try again.\",\n            status: \"info\",\n          })\n        } else {\n          // Handle specific wallet permission pending error\n          if (\n            e.message?.includes(\"wallet_requestPermissions\") &&\n            e.message?.includes(\"already pending\")\n          ) {\n            addToast({\n              heading: \"Connection in Progress\",\n              body: \"Please complete the wallet connection in your wallet extension. If the issue persists, try refreshing the page.\",\n              status: \"warning\",\n            })\n          } else {\n            addToast({\n              heading: \"Connection Failed\",\n              body: e.message || \"Failed to connect wallet\",\n              status: \"error\",\n            })\n          }\n        }\n      } finally {\n        clearTimeout(timer)\n        setIsConnecting(false)\n      }\n    },\n    [isConnecting, connect, addToast]\n  )\n\n  return {\n    isConnecting,\n    cancelConnection,\n    handleConnectWithAbort,\n    abortController: abortRef.current,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/lib/sanity/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/lib/sanity/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/lib/wagmi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/404.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/_app.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1550,1553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1550,1553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2005,2008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2005,2008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2256,2259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2256,2259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2323,2326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2323,2326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2424,2427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2424,2427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2455,2458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2455,2458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2534,2537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2534,2537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2751,2754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2751,2754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3232,3235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3232,3235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3297,3300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3297,3300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3342,3345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3342,3345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChakraProvider, DarkMode } from \"@chakra-ui/react\"\nimport { DialogProvider } from \"context/dialogContext\"\nimport type { AppProps } from \"next/app\"\nimport theme from \"theme/index\"\n\nimport dynamic from \"next/dynamic\"\nconst WagmiClientProvider = dynamic(\n  () => import(\"providers/WagmiClientProvider\"),\n  { ssr: false }\n)\nimport { AlertDialog } from \"components/AlertDialog\"\nimport \"utils/analytics\"\nimport { GlobalFonts } from \"theme/GlobalFonts\"\nimport { GeoProvider } from \"context/geoContext\"\nimport { DefaultSeo } from \"next-seo\"\nimport { QueryClientProvider } from \"@tanstack/react-query\"\nimport { reactQueryClient } from \"utils/reactQuery\"\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\"\nimport { HomeProvider } from \"data/context/homeContext\"\nimport { reportWebVitals } from \"utils/webVitals\"\n\nconst App = ({ Component, pageProps }: AppProps) => {\n  // Suppress unhandled promise rejections for user-rejected wallet actions to avoid dev overlay\n  if (typeof window !== \"undefined\") {\n    const handler = (event: PromiseRejectionEvent) => {\n      try {\n        const reason: any = event?.reason\n        const msg = String(\n          reason?.message || reason?.shortMessage || reason || \"\"\n        )\n        if (\n          msg.includes(\"User rejected\") ||\n          msg.includes(\"User denied\") ||\n          msg.includes(\"MetaMask Tx Signature: User denied\")\n        ) {\n          event.preventDefault()\n        }\n      } catch {}\n    }\n    const errorHandler = (event: ErrorEvent) => {\n      try {\n        const err: any = event?.error\n        const msg = String(err?.message || event?.message || \"\")\n        if (\n          msg.includes(\"ContractFunctionExecutionError\") &&\n          (msg.includes(\"User rejected\") ||\n            msg.includes(\"User denied\") ||\n            msg.includes(\"MetaMask Tx Signature: User denied\"))\n        ) {\n          event.preventDefault()\n        }\n      } catch {}\n    }\n    // Ensure we don't add multiple listeners on HMR\n    ;(window as any).__somm_unhandledrejection_handler__ &&\n      window.removeEventListener(\n        \"unhandledrejection\",\n        (window as any).__somm_unhandledrejection_handler__\n      )\n    window.addEventListener(\"unhandledrejection\", handler)\n    ;(window as any).__somm_unhandledrejection_handler__ = handler\n    ;(window as any).__somm_error_handler__ &&\n      window.removeEventListener(\n        \"error\",\n        (window as any).__somm_error_handler__ as any\n      )\n    window.addEventListener(\"error\", errorHandler)\n    ;(window as any).__somm_error_handler__ = errorHandler\n\n    // Patch console.error to suppress known benign user-rejected messages in dev\n    const originalConsoleError = console.error.bind(console)\n    const patched = (...args: any[]) => {\n      try {\n        const text = args\n          .map((a) => (a instanceof Error ? a.message : String(a)))\n          .join(\" \")\n        if (\n          text.includes(\"ContractFunctionExecutionError\") &&\n          (text.includes(\"User rejected\") ||\n            text.includes(\"User denied\") ||\n            text.includes(\"MetaMask Tx Signature: User denied\"))\n        ) {\n          return\n        }\n      } catch {}\n      originalConsoleError(...args)\n    }\n    ;(window as any).__somm_console_error__ &&\n      (console.error = (window as any).__somm_console_error__)\n    ;(window as any).__somm_console_error__ = patched\n    console.error = patched\n  }\n\n  return (\n    <QueryClientProvider client={reactQueryClient}>\n      {/* <PlausibleProvider\n        domain={process.env.NEXT_PUBLIC_PLAUSIBLE_URL!}\n      > */}\n      <ChakraProvider theme={theme}>\n        <GeoProvider>\n          <GlobalFonts />\n          <DialogProvider>\n            <WagmiClientProvider>\n              <HomeProvider>\n                <DefaultSeo\n                  title=\"Somm Finance\"\n                  description=\"Access to risk-managed, multi chain vaults powered by off-chain computation\"\n                  // SEO configuration omitted for brevity\n                />\n                <DarkMode>\n                  <Component {...pageProps} />\n                </DarkMode>\n                <AlertDialog />\n              </HomeProvider>\n            </WagmiClientProvider>\n          </DialogProvider>\n        </GeoProvider>\n      </ChakraProvider>\n      {/* </PlausibleProvider> */}\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  )\n}\n\n// Report Web Vitals\nif (typeof window !== \"undefined\") {\n  reportWebVitals()\n}\n\nexport default App\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/_document.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/next-script-for-ga","severity":1,"message":"Prefer `next/script` component when using the inline script for Google Analytics. See: https://nextjs.org/docs/messages/next-script-for-ga","line":11,"column":9,"nodeType":"JSXOpeningElement","endLine":20,"endColumn":11,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/cellar-preview-redeem.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'parseUnits' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { queryContract } from \"context/rpc_context\"\nimport { parseUnits } from \"viem\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst cellarPreviewRedeem = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    const { cellarId, shares } = req.query\n    const cellarIdStr = cellarId as string\n    const sharesNum: bigint = shares as unknown as bigint\n\n    if (!cellarIdStr || !sharesNum) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        sharesValue: \"0\",\n        error: \"missing cellar id or shares\",\n        message: \"missing cellar id or shares\",\n      })\n    }\n\n    const cellarConfig = cellarDataMap[cellarIdStr]?.config\n    if (!cellarConfig) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        sharesValue: \"0\",\n        error: \"unknown cellar\",\n        message: `Cellar config for ${cellarIdStr} not found`,\n      })\n    }\n\n    let address\n    let abi\n    let chain\n\n    if (cellarConfig.boringQueue) {\n      address = cellarConfig.boringQueue.address\n      abi = cellarConfig.boringQueue.abi\n      chain = cellarConfig.chain\n    } else {\n      address = cellarConfig.cellar.address\n      abi = cellarConfig.cellar.abi\n      chain = cellarConfig.chain\n    }\n\n    const contract = await queryContract(address, abi, chain)\n\n    let shareValue = 0\n    if (!contract) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        sharesValue: \"0\",\n        error: \"contract_not_found\",\n        message: \"Failed to load contract\",\n      })\n    }\n\n    try {\n      if (cellarConfig.boringQueue) {\n        // previewAssetsOut for boring queue\n        shareValue = (await contract.read.previewAssetsOut([\n          cellarConfig.baseAsset.address,\n          sharesNum,\n          0,\n        ])) as unknown as number\n      } else {\n        // legacy previewRedeem\n        shareValue = (await contract.read.previewRedeem([\n          sharesNum,\n        ])) as unknown as number\n      }\n    } catch (e) {\n      console.warn(\"Contract read failed:\", e)\n      // Return safe default instead of crashing\n      shareValue = 0\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n    res.status(200).json({\n      sharesValue: shareValue.toString(),\n    })\n  } catch (error) {\n    console.error(\"API Error:\", error)\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n    return res.status(200).json({\n      sharesValue: \"0\",\n      error: \"request_failed\",\n      message:\n        (error as Error).message || \"An unknown error occurred\",\n    })\n  }\n}\n\nexport default cellarPreviewRedeem\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/cellar-redeemable-reserves.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":34,"column":7,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":34,"endColumn":20,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[802,815],"text":"// @ts-expect-error"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { queryContract } from \"context/rpc_context\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\n\nconst cellarRedeemableAssets = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    let { cellarId } = req.query\n    cellarId = cellarId as string\n\n    if (!cellarId) {\n      res.status(400).send({\n        error: \"missing cellar id\",\n        message: \"missing cellar id\",\n      })\n      return\n    }\n\n    const cellar = await queryContract(\n      cellarDataMap[cellarId]?.config.id,\n      cellarDataMap[cellarId]?.config.cellar.abi,\n      cellarDataMap[cellarId]?.config.chain\n    )\n\n    let totalAssets: string = \"\";\n\n    if (cellar) {\n      // @ts-ignore\n      totalAssets = await cellar.read.totalAssetsWithdrawable()\n    } else {\n      throw new Error(\"failed to load contract\")\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=120\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n    res.status(200).json({\n      totalAssetsWithdrawable: totalAssets.toString(), // Convert the result to string to ensure it can be serialized in JSON\n    })\n  } catch (error) {\n    console.error(error)\n    res\n      .status(500)\n      .send({\n        error: \"failed to fetch data\",\n        message:\n          (error as Error).message || \"An unknown error occurred\",\n      })\n  }\n}\n\nexport default cellarRedeemableAssets\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/checkRegistration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/coingecko-simple-price.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst coinGeckoAPIKey = process.env.NEXT_PUBLIC_COINGECKO_API_KEY\nconst COINGECKO_URL = coinGeckoAPIKey\n  ? \"https://pro-api.coingecko.com/api/v3/simple/price\"\n  : \"https://api.coingecko.com/api/v3/simple/price\"\n\nconst getCoingeckoSimplePriceUri = (\n  baseId: string,\n  quoteId: string\n) => `${COINGECKO_URL}/?ids=${baseId}&vs_currencies=${quoteId}`\n\nconst coinGeckoSimplePrice = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  const { base, quote } = req.query\n  const baseId = base as string\n  const quoteId = quote as string\n\n  if (!baseId || !quoteId) {\n    res.status(400).send({\n      error: \"missing base or quote\",\n      message: \"missing base or quote\",\n    })\n    return\n  }\n\n  try {\n    const coinGeckoAPIKey = process.env.NEXT_PUBLIC_COINGECKO_API_KEY\n    const url = getCoingeckoSimplePriceUri(baseId, quoteId)\n    const data = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(coinGeckoAPIKey && {\n          \"x-cg-pro-api-key\": coinGeckoAPIKey,\n        }),\n      },\n    })\n    // Safe JSON parse and lookups\n    const result = await data.json().catch(() => null as any)\n    const baseObj = result?.[baseId]\n    const price =\n      baseObj && typeof baseObj === \"object\" ? baseObj?.[quoteId] : undefined\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    if (price === undefined) {\n      return res.status(200).json({\n        price: null,\n        baseId,\n        quoteId,\n        source: \"coingecko\",\n        note: \"not_found_or_rate_limited\",\n      })\n    }\n\n    return res.status(200).json({ price })\n  } catch (error) {\n    // Never 500 for CG hiccups: return a safe payload\n    console.error(error)\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n    return res.status(200).json({\n      price: null,\n      baseId,\n      quoteId,\n      source: \"coingecko\",\n      note: \"request_failed\",\n    })\n  }\n}\n\nexport default coinGeckoSimplePrice\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/geo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/new-vaults.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1087,1090],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1087,1090],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\"\nimport { cellarDataMap } from \"data/cellarDataMap\"\nimport { fetchCellarStrategyData } from \"src/queries/get-all-strategies-data\"\n\ntype MinimalVault = {\n  id: string\n  slug: string\n  name: string\n  chain: string\n  tvl: { value: number; formatted: string }\n  status: \"active\" | \"withdrawals-only\" | \"paused\"\n  logoUrl?: string\n  apr?: { value: number; formatted: string } | null\n}\n\n// Temporary list of Somm-native slugs. Extend as more in-house vaults are added.\nconst SOMM_NATIVE_SLUGS = new Set<string>([\"Alpha-stETH\"])\n\nexport default async function handler(\n  _req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const agg = await fetchCellarStrategyData()\n\n    // Map address->tvl from aggregator result\n    const tvlByKey: Record<string, number> = {}\n    for (const c of agg?.data?.cellars ?? []) {\n      // keys in aggregator are address or address-<chain>\n      tvlByKey[c.id] = Number(c.tvlTotal || 0)\n    }\n\n    const result: MinimalVault[] = []\n    for (const [slug, data] of Object.entries(cellarDataMap) as any) {\n      if (!SOMM_NATIVE_SLUGS.has(slug)) continue\n\n      const chainId = data?.config?.chain?.id\n      const addr = data?.config?.cellar?.address?.toLowerCase?.()\n      const tvlKey =\n        chainId === \"ethereum\" ? addr : `${addr}-${chainId}`\n      const tvlVal = tvlByKey[tvlKey] ?? 0\n\n      const tvl = {\n        value: tvlVal,\n        formatted: tvlVal.toLocaleString(undefined, {\n          maximumFractionDigits: 0,\n        }),\n      }\n\n      const status: MinimalVault[\"status\"] = data?.deprecated\n        ? \"paused\"\n        : \"active\"\n\n      result.push({\n        id: addr,\n        slug,\n        name: data?.name,\n        chain: chainId,\n        tvl,\n        status,\n        logoUrl: data?.config?.lpToken?.imagePath,\n        apr: null,\n      })\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, s-maxage=60, stale-while-revalidate=300\"\n    )\n    res.status(200).json({ data: result })\n  } catch (e) {\n    res.status(500).json({ error: \"failed\" })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/saveSignedMessage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-all-strategies-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[306,309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[306,309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fetchedScrollData' is assigned a value but never used.","line":88,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3009,3012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3009,3012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3873,3876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3873,3876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4163,4166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4163,4166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4171,4174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4171,4174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5565,5568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5565,5568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5871,5874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5871,5874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5879,5882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5879,5882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7372,7375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7372,7375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7678,7681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7678,7681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7686,7689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7686,7689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\nimport { chainSlugMap } from \"data/chainConfig\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\ninterface CellarType {\n  id: string\n  dayDatas: any\n  shareValue: any\n  tvlTotal: number\n  chain: string\n}\n\nasync function fetchData(url: string) {\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n  return response\n}\n\nconst sommelierAPIAllStrategiesData = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    // Make monthAgoEpoch nearest full day 30 days ago\n    const now = new Date()\n    const monthAgoDate = new Date()\n\n    monthAgoDate.setDate(now.getDate() - 31)\n    monthAgoDate.setHours(0, 0, 0, 0) // Set the time to the start of the day\n\n    const monthAgoEpoch = Math.floor(monthAgoDate.getTime() / 1000)\n\n    //! Whenever theres a new chain supported this needs to be updated\n    let allEthereumStrategyData = `https://api.sommelier.finance/dailyData/ethereum/allCellars/${monthAgoEpoch}/latest`\n    let allArbitrumStrategyData = `https://api.sommelier.finance/dailyData/arbitrum/allCellars/${monthAgoEpoch}/latest`\n    let allOptimismStrategyData = `https://api.sommelier.finance/dailyData/optimism/allCellars/${monthAgoEpoch}/latest`\n    // Scroll disabled\n    // let allScrollStrategyData = `https://api.sommelier.finance/dailyData/scroll/allCellars/${monthAgoEpoch}/latest`\n    let tvlData = `https://api.sommelier.finance/tvl`\n\n    const [\n      allEthereumStrategyDataResponse,\n      allArbitrumStrategyDataResponse,\n      allOptimismStrategyDataResponse,\n      // allScrollStrategyDataResponse,\n      tvlDataResponse,\n    ] = await Promise.all([\n      fetchData(allEthereumStrategyData),\n      fetchData(allArbitrumStrategyData),\n      fetchData(allOptimismStrategyData),\n      // fetchData(allScrollStrategyData),\n      fetchData(tvlData),\n    ])\n\n    if (\n      allEthereumStrategyDataResponse.status !== 200 ||\n      allArbitrumStrategyDataResponse.status !== 200 ||\n      allOptimismStrategyDataResponse.status !== 200 ||\n      false ||\n      tvlDataResponse.status !== 200\n    ) {\n      throw new Error(\n        \"failed to fetch data: ETH Strategy Response code: \" +\n          allEthereumStrategyDataResponse.status +\n          \" Arbitrum Strategy Response code: \" +\n          allArbitrumStrategyDataResponse.status +\n          \" Optimism Strategy Response code: \" +\n          allOptimismStrategyDataResponse.status +\n          \" Scroll Strategy Response code: DISABLED \" +\n          \" Tvl Response code:\" +\n          tvlDataResponse.status\n      )\n    }\n\n    const fetchedEthData =\n      await allEthereumStrategyDataResponse.json()\n    const fetchedArbitrumData =\n      await allArbitrumStrategyDataResponse.json()\n    const fetchedOptimismData =\n      await allOptimismStrategyDataResponse.json()\n    const fetchedScrollData = { Response: {} as any }\n\n    let returnObj = {\n      result: {\n        data: {\n          cellars: [] as CellarType[],\n        },\n      },\n    }\n\n    const fetchedTVL = await tvlDataResponse.json()\n\n    // Do this loop per chain\n    // For each key perform transformation\n\n    // ! Eth transform\n    Object.keys(fetchedEthData.Response).forEach((cellarAddress) => {\n      // If the cellar address is not in the CellaAddressDataMap skip it\n      if (\n        CellaAddressDataMap[\n          cellarAddress!.toString().toLowerCase()\n        ] === undefined\n      ) {\n        console.warn(`${cellarAddress} not a valid cellar address`)\n        return\n      }\n\n      let cellarDecimals =\n        CellaAddressDataMap[cellarAddress!.toString().toLowerCase()]\n          .config.cellar.decimals\n\n      let transformedData = fetchedEthData.Response[\n        cellarAddress\n      ].map((dayData: any) => ({\n        date: dayData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          dayData.share_price * 10 ** cellarDecimals\n        ).toString(),\n      }))\n\n      // Order by descending date\n      transformedData.sort((a: any, b: any) => b.date - a.date)\n\n      // Get tvl\n      let tvl = fetchedTVL.Response[cellarAddress]\n\n      if (tvl === undefined) {\n        tvl = 0\n      }\n\n      let shareValue = 0\n      if (transformedData.length === 0) {\n        console.warn(`No data found for ${cellarAddress} on Ethereum`)\n      } else {\n        shareValue = transformedData[0].shareValue\n      }\n\n      // Create a new response object with the transformed data\n      let cellarObj = {\n        id: cellarAddress.toLowerCase(),\n        dayDatas: transformedData,\n        shareValue: shareValue,\n        tvlTotal: tvl,\n        chain: chainSlugMap.ETHEREUM.id,\n      }\n\n      returnObj.result.data.cellars.push(cellarObj)\n    })\n\n    // ! Arbitrum transform\n    Object.keys(fetchedArbitrumData.Response).forEach(\n      (cellarAddress) => {\n        // If the cellar address is not in the CellaAddressDataMap skip it\n        if (\n          CellaAddressDataMap[\n            cellarAddress!.toString().toLowerCase() + \"-arbitrum\"\n          ] === undefined\n        ) {\n          console.warn(`${cellarAddress} not a valid cellar address`)\n          return\n        }\n\n        let cellarDecimals =\n          CellaAddressDataMap[\n            cellarAddress!.toString().toLowerCase() + \"-arbitrum\"\n          ].config.cellar.decimals\n\n        let transformedData = fetchedArbitrumData.Response[\n          cellarAddress\n        ].map((dayData: any) => ({\n          date: dayData.unix_seconds,\n          // Multiply by cellarDecimals and drop any decimals\n          shareValue: Math.floor(\n            dayData.share_price * 10 ** cellarDecimals\n          ).toString(),\n        }))\n\n        // Order by descending date\n        transformedData.sort((a: any, b: any) => b.date - a.date)\n\n        // Get tvl\n        let tvl = fetchedTVL.Response[cellarAddress + \"-arbitrum\"]\n\n        if (tvl === undefined) {\n          tvl = 0\n        }\n\n        let shareValue = 0\n        if (transformedData.length === 0) {\n          console.warn(\n            `No data found for ${cellarAddress} on Arbitrum`\n          )\n        } else {\n          shareValue = transformedData[0].shareValue\n        }\n\n        // Create a new response object with the transformed data\n        let cellarObj = {\n          id: cellarAddress.toLowerCase() + \"-arbitrum\",\n          dayDatas: transformedData,\n          shareValue: shareValue,\n          tvlTotal: tvl,\n          chain: chainSlugMap.ARBITRUM.id,\n        }\n\n        returnObj.result.data.cellars.push(cellarObj)\n      }\n    )\n\n    // ! Optimism transform\n    Object.keys(fetchedOptimismData.Response).forEach(\n      (cellarAddress) => {\n        // If the cellar address is not in the CellaAddressDataMap skip it\n        if (\n          CellaAddressDataMap[\n            cellarAddress!.toString().toLowerCase() + \"-optimism\"\n          ] === undefined\n        ) {\n          console.warn(`${cellarAddress} not a valid cellar address`)\n          return\n        }\n\n        let cellarDecimals =\n          CellaAddressDataMap[\n            cellarAddress!.toString().toLowerCase() + \"-optimism\"\n          ].config.cellar.decimals\n\n        let transformedData = fetchedOptimismData.Response[\n          cellarAddress\n        ].map((dayData: any) => ({\n          date: dayData.unix_seconds,\n          // Multiply by cellarDecimals and drop any decimals\n          shareValue: Math.floor(\n            dayData.share_price * 10 ** cellarDecimals\n          ).toString(),\n        }))\n\n        // Order by descending date\n        transformedData.sort((a: any, b: any) => b.date - a.date)\n\n        // Get tvl\n        let tvl = fetchedTVL.Response[cellarAddress + \"-optimism\"]\n\n        if (tvl === undefined) {\n          tvl = 0\n        }\n\n        let shareValue = 0\n        if (transformedData.length === 0) {\n          console.warn(\n            `No data found for ${cellarAddress} on Optimism`\n          )\n        } else {\n          shareValue = transformedData[0].shareValue\n        }\n\n        // Create a new response object with the transformed data\n        let cellarObj = {\n          id: cellarAddress.toLowerCase() + \"-optimism\",\n          dayDatas: transformedData,\n          shareValue: shareValue,\n          tvlTotal: tvl,\n          chain: chainSlugMap.OPTIMISM.id,\n        }\n\n        returnObj.result.data.cellars.push(cellarObj)\n      }\n    )\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(returnObj)\n  } catch (error) {\n    res.status(500).send({\n      error: `could not fetch data`,\n      message:\n        (error as Error).message || \"An unknown error occurred\",\n    })\n  }\n}\n\nexport default sommelierAPIAllStrategiesData\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-all-time-share-value-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1009,1012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1009,1012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1300,1303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1300,1303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1308,1311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1308,1311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst sommelierAPIAllTimeShareValueData = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    let { cellarAddress, chain } = req.query\n\n    const data = await fetch(\n      `https://api.sommelier.finance/dailyData/${chain}/${cellarAddress}/0/latest`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n\n    if (data.status !== 200) {\n      throw new Error(\"failed to fetch data\")\n    }\n\n    const fetchedData = await data.json()\n    let chainStr = ''\n    if (chain !== \"ethereum\") {\n      chainStr = \"-\" + chain\n    }\n    \n    let cellarDecimals =\n      CellaAddressDataMap[cellarAddress!.toString().toLowerCase() + chainStr]\n        .config.cellar.decimals\n\n    let transformedData = fetchedData.Response.map(\n      (dayData: any) => ({\n        date: dayData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          dayData.share_price * 10 ** cellarDecimals\n        ).toString(),\n      })\n    )\n\n    // Order by descending date\n    transformedData.sort((a: any, b: any) => b.date - a.date)\n\n    const formattedResult = {\n      result: {\n        data: {\n          cellar: {\n            dayDatas: transformedData,\n          },\n        },\n      },\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(formattedResult)\n  } catch (error) {\n    console.error(error)\n    res\n      .status(500)\n      .send({\n        error: \"failed to fetch data\",\n        message:\n          (error as Error).message || \"An unknown error occurred\",\n      })\n  }\n}\n\nexport default sommelierAPIAllTimeShareValueData\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-hourly-share-value-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1108,1111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1108,1111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1413,1416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1413,1416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1421,1424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1421,1424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst sommelierAPIHourlyShareValueData = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    let { epoch, cellarAddress, chain } = req.query\n    // Cast epoch to number\n    const startEpochNumber = Number(epoch)\n\n    const data = await fetch(\n      `https://api.sommelier.finance/hourlyData/${chain}/${cellarAddress}/${startEpochNumber}/latest`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n\n    if (data.status !== 200) {\n      throw new Error(\"failed to fetch data\")\n    }\n\n    let chainStr = \"\"\n    if (chain !== \"ethereum\") {\n      chainStr = \"-\" + chain\n    }\n\n    const fetchedData = await data.json()\n    let cellarDecimals =\n      CellaAddressDataMap[cellarAddress!.toString().toLowerCase() + chainStr]\n        .config.cellar.decimals\n\n    let transformedData = fetchedData.Response.map(\n      (cellarHourData: any) => ({\n        date: cellarHourData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          cellarHourData.share_price * 10 ** cellarDecimals\n        ).toString(),\n      })\n    )\n\n    // Order by descending date\n    transformedData.sort((a: any, b: any) => b.date - a.date)\n    // Trim off to only be the most recent 7 days\n    transformedData = transformedData.splice(0, 7)\n\n    const formattedResult = {\n      result: {\n        data: {\n          cellarHourDatas: transformedData,\n        },\n      },\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(formattedResult)\n  } catch (error) {\n    console.error(error)\n    res.status(500).send({\n      error: \"failed to fetch data\",\n      message:\n        (error as Error).message || \"An unknown error occurred\",\n    })\n  }\n}\n\nexport default sommelierAPIHourlyShareValueData\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-individual-strat-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2092,2095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2092,2095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2688,2691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2688,2691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2984,2987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2984,2987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2992,2995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2992,2995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3129,3132],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3129,3132],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3500,3503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3500,3503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3508,3511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3508,3511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst fetchData = async (url: string) => {\n  try {\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`)\n    }\n    return await response.json()\n  } catch (error) {\n    console.error(\"Fetch error:\", error)\n    return null\n  }\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const { cellarAddress, chain } = req.query\n    if (!cellarAddress || !chain) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        status: \"data_pending\",\n        note: \"missing_params\",\n      })\n    }\n\n    const unix_timestamp_24_hours_ago =\n      Math.floor(Date.now() / 1000) - 24 * 60 * 60\n\n    const dailyDataUrl = `https://api.sommelier.finance/dailyData/${chain}/${cellarAddress}/0/latest`\n    const hourlyDataUrl = `https://api.sommelier.finance/hourlyData/${chain}/${cellarAddress}/${unix_timestamp_24_hours_ago}/latest`\n\n    const [dailyData, hourlyData] = await Promise.all([\n      fetchData(dailyDataUrl),\n      fetchData(hourlyDataUrl),\n    ])\n\n    if (!dailyData || !hourlyData) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        cellarAddress,\n        chain,\n        status: \"data_pending\",\n        shareValue: null,\n        tvlTotal: null,\n        baseAssetTvl: null,\n        note: \"api_fetch_failed\",\n      })\n    }\n\n    let chainStr = \"\"\n    if (chain !== \"ethereum\") {\n      chainStr = \"-\" + chain\n    }\n\n    const key = cellarAddress!.toString().toLowerCase() + chainStr\n    const cellarEntry = (CellaAddressDataMap as any)?.[key]\n    if (!cellarEntry) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        cellarAddress,\n        chain,\n        status: \"data_pending\",\n        shareValue: null,\n        tvlTotal: null,\n        baseAssetTvl: null,\n        note: \"unknown_cellar_address\",\n      })\n    }\n\n    const cellarDecimals = cellarEntry.config.cellar.decimals\n\n    const transformedDailyData = dailyData.Response.map(\n      (dayData: any) => ({\n        date: dayData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          dayData.share_price * 10 ** cellarDecimals\n        ).toString(),\n      })\n    )\n\n    // Order by descending date\n    transformedDailyData.sort((a: any, b: any) => b.date - a.date)\n\n    // Do the same for hourly data\n    const transformedHourlyData = hourlyData.Response.map(\n      (hourData: any) => ({\n        date: hourData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          hourData.share_price * 10 ** cellarDecimals\n        ).toString(),\n        total_assets: hourData.total_assets,\n        tvl: hourData.tvl,\n      })\n    )\n\n    // Order by descending date\n    transformedHourlyData.sort((a: any, b: any) => b.date - a.date)\n\n    // Guard: if no hourly data, return data_pending instead of 500\n    if (\n      !Array.isArray(transformedHourlyData) ||\n      transformedHourlyData.length === 0\n    ) {\n      res.setHeader(\n        \"Cache-Control\",\n        \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n      )\n      res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n      return res.status(200).json({\n        cellarAddress,\n        chain,\n        status: \"data_pending\",\n        shareValue: null,\n        tvlTotal: null,\n        baseAssetTvl: null,\n        note: \"no_hourly_data\",\n      })\n    }\n\n    // Most recent hourly\n    const baseAssetTvl = Number(transformedHourlyData[0].tvl) // !! Note this TVL may be up to 1 hour stale bc it doesnt use the tvl api endpoint, not a huge deal but might be weird at launches\n\n    // TODO: Get shareValue and TvlTotal from latest hourly data async\n    const formattedResult = {\n      result: {\n        data: {\n          cellar: {\n            id: cellarAddress,\n            tvlTotal: String(baseAssetTvl), // Most recent hourly\n            shareValue: transformedHourlyData[0].shareValue, // Most recent hourly\n            dayDatas: transformedDailyData,\n          },\n        },\n      },\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(formattedResult)\n  } catch (error) {\n    console.error(\"API Error:\", error)\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n    res.status(200).json({\n      cellarAddress: req.query.cellarAddress,\n      chain: req.query.chain,\n      status: \"data_pending\",\n      shareValue: null,\n      tvlTotal: null,\n      baseAssetTvl: null,\n      note: \"internal_error\",\n    })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-monthly-share-value-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1106,1109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1106,1109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1399,1402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1399,1402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1407,1410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1407,1410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst sommelierAPIMonthlyShareValueData = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    let { epoch, cellarAddress, chain } = req.query\n    // Cast epoch to number\n    const startEpochNumber = Number(epoch)\n\n    const data = await fetch(\n      `https://api.sommelier.finance/dailyData/${chain}/${cellarAddress}/${startEpochNumber}/latest`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n\n    if (data.status !== 200) {\n      throw new Error(\"failed to fetch data\")\n    }\n\n    const fetchedData = await data.json()\n\n    let chainStr = \"\"\n    if (chain !== \"ethereum\") {\n      chainStr = \"-\" + chain\n    }\n    \n    let cellarDecimals =\n      CellaAddressDataMap[cellarAddress!.toString().toLowerCase() + chainStr]\n        .config.cellar.decimals\n\n    let transformedData = fetchedData.Response.map(\n      (dayData: any) => ({\n        date: dayData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          dayData.share_price * (10 ** cellarDecimals)\n        ).toString(),\n      })\n    )\n\n    // Order by descending date\n    transformedData.sort((a: any, b: any) => b.date - a.date)\n    // Trim off to only be the most recent 31 days\n    transformedData = transformedData.splice(0, 31)\n\n    const formattedResult = {\n      result: {\n        data: {\n          cellar: {\n            dayDatas: transformedData,\n          },\n        },\n      },\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(formattedResult)\n  } catch (error) {\n    console.error(error)\n    res\n      .status(500)\n      .send({\n        error: \"failed to fetch data\",\n        message:\n          (error as Error).message || \"An unknown error occurred\",\n      })\n  }\n}\n\nexport default sommelierAPIMonthlyShareValueData\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-tvl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/sommelier-api-weekly-share-value-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1101,1104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1101,1104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1406,1409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1406,1409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextApiRequest, NextApiResponse } from \"next\"\nimport { CellaAddressDataMap } from \"data/cellarDataMap\"\n\nconst baseUrl =\n  process.env.NEXT_PUBLIC_BASE_URL || \"http://localhost:3000\"\n\nconst sommelierAPIWeeklyShareValueData = async (\n  req: NextApiRequest,\n  res: NextApiResponse\n) => {\n  try {\n    let { epoch, cellarAddress, chain } = req.query\n    // Cast epoch to number\n    const startEpochNumber = Number(epoch)\n\n    const data = await fetch(\n      `https://api.sommelier.finance/dailyData/${chain}/${cellarAddress}/${startEpochNumber}/latest`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n\n    if (data.status !== 200) {\n      throw new Error(\"failed to fetch data\")\n    }\n\n    const fetchedData = await data.json()\n\n    let chainStr = \"\"\n    if (chain !== \"ethereum\") {\n      chainStr = \"-\" + chain\n    }\n\n    let cellarDecimals =\n      CellaAddressDataMap[cellarAddress!.toString().toLowerCase() + chainStr]\n        .config.cellar.decimals\n\n    let transformedData = fetchedData.Response.map(\n      (dayData: any) => ({\n        date: dayData.unix_seconds,\n        // Multiply by cellarDecimals and drop any decimals\n        shareValue: Math.floor(\n          dayData.share_price * (10 ** cellarDecimals)\n        ).toString(),\n      })\n    )    \n\n    // Order by descending date\n    transformedData.sort((a: any, b: any) => b.date - a.date)\n    // Trim off to only be the most recent 7 days\n    transformedData = transformedData.splice(0, 7)\n\n    const formattedResult = {\n      result: {\n        data: {\n          cellar: {\n            dayDatas: transformedData,\n          },\n        },\n      },\n    }\n\n    res.setHeader(\n      \"Cache-Control\",\n      \"public, maxage=60, s-maxage=60, stale-while-revalidate=7200\"\n    )\n    res.setHeader(\"Access-Control-Allow-Origin\", baseUrl)\n\n    // Format similar to subgraph queries so as to not rewrite large swaths of code\n    res.status(200).json(formattedResult)\n  } catch (error) {\n    console.error(error)\n    res\n      .status(500)\n      .send({\n        error: \"failed to fetch data\",\n        message:\n          (error as Error).message || \"An unknown error occurred\",\n      })\n  }\n}\n\nexport default sommelierAPIWeeklyShareValueData\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/users-boringqueue-withdrawals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/api/vitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/bridge/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isModalOpen' is assigned a value but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { NextPage } from \"next\"\nimport { PageHome } from \"components/_pages/PageHome\"\nimport { useState, useEffect } from \"react\"\n\nconst Home: NextPage = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  useEffect(() => {\n    setIsModalOpen(true)\n  }, [])\n\n  return (\n    <>\n      <PageHome />\n    </>\n  )\n}\n\nexport default Home\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/privacy-policy.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/snapshot/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/strategies/[id]/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/strategies/[id]/manage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/pages/user-terms.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/providers/WagmiClientProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-all-strategies-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-all-time-share-value-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-all-tvl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-cellar-preview-redeem.ts","messages":[{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `BigInt` as a type. Use bigint instead","line":1,"column":43,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":1,"endColumn":49,"fix":{"range":[42,48],"text":"bigint"}},{"ruleId":"@typescript-eslint/ban-types","severity":1,"message":"Don't use `BigInt` as a type. Use bigint instead","line":6,"column":11,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":6,"endColumn":17,"fix":{"range":[201,207],"text":"bigint"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"const getUrl = (cellarId: string, shares: BigInt) =>\n  `/api/cellar-preview-redeem?cellarId=${cellarId}&shares=${shares}`\n\nexport const fetchCellarPreviewRedeem = async (\n  cellarId: string,\n  shares: BigInt\n) => {\n  const url = getUrl(cellarId, shares)\n\n  try {\n    const data = await fetch(url)\n    const result = await data.json()\n\n    return result ? result.sharesValue : undefined\n  } catch (error) {\n    console.log(\"Error fetching Cellar Preview Redeem\", error)\n    throw Error(error as string)\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-cellar-redeemable-asssets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-coingecko-price.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-hourly-share-value-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-individual-strategy-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-monthly-share-value-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-users-boringqueue-withdrawals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/queries/get-weekly-share-value-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/state/vaults/selectors.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[326,329],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[326,329],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'__index' is defined but never used.","line":77,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tvl' is defined but never used.","line":77,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'netValue' is defined but never used.","line":77,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Deterministic vault sorting selector\n// Rules:\n// - Disconnected: TVL desc; tie: name asc\n// - Connected: Net Value desc, then TVL desc, then name asc\n// - Net Value and TVL are normalized to numbers; undefined/NaN treated as 0\n// - Equality checks use 1e-9 tolerance to avoid jitter\n\nexport type AnyVault = Record<string, any>\n\nconst toNum = (v: unknown): number => {\n  if (typeof v === \"number\") return Number.isFinite(v) ? v : 0\n  if (typeof v === \"bigint\") return Number(v)\n  if (v == null) return 0\n  const s = String(v).replace(/,/g, \"\").trim()\n  const n = Number(s)\n  return Number.isFinite(n) ? n : 0\n}\n\nconst eq = (a: number, b: number): boolean => Math.abs(a - b) < 1e-9\n\nconst cmpByNameAsc = (a: { name?: string }, b: { name?: string }) =>\n  (a.name || \"\").localeCompare(b.name || \"\")\n\nconst cmpDesc = (x: number, y: number) => y - x\n\nfunction comparator(walletConnected: boolean) {\n  return (a: AnyVault, b: AnyVault) => {\n    const na = Number.isFinite(a.netValue) ? a.netValue : 0\n    const nb = Number.isFinite(b.netValue) ? b.netValue : 0\n    const ta = Number.isFinite(a.tvl) ? a.tvl : 0\n    const tb = Number.isFinite(b.tvl) ? b.tvl : 0\n\n    if (walletConnected) {\n      const nvDelta = cmpDesc(na, nb)\n      if (nvDelta !== 0 && !eq(na, nb)) return nvDelta\n      const tvlDelta = cmpDesc(ta, tb)\n      if (tvlDelta !== 0 && !eq(ta, tb)) return tvlDelta\n      return cmpByNameAsc(a, b)\n    }\n\n    const tvlDelta = cmpDesc(ta, tb)\n    if (tvlDelta !== 0 && !eq(ta, tb)) return tvlDelta\n    return cmpByNameAsc(a, b)\n  }\n}\n\nexport function getSortedVaults(\n  walletConnected: boolean,\n  vaultsRaw: AnyVault[] | undefined\n): AnyVault[] {\n  if (!Array.isArray(vaultsRaw) || vaultsRaw.length === 0) return []\n\n  // Normalize and preserve stability via index\n  const normalized = vaultsRaw.map((v, index) => {\n    const tvl = toNum(v?.tvm?.value ?? v?.tvl?.value ?? v?.tvl)\n    const netValue = toNum(\n      v?.userStrategyData?.userData?.netValue?.value ?? v?.netValue\n    )\n    return {\n      ...v,\n      name: v?.name ?? \"\",\n      tvl,\n      netValue,\n      __index: index,\n    }\n  })\n\n  const cmp = comparator(walletConnected)\n  // Stable sort: compare indices on full equality\n  const sorted = normalized.slice().sort((a, b) => {\n    const r = cmp(a, b)\n    if (r !== 0) return r\n    return a.__index - b.__index\n  })\n\n  // Remove decoration\n  return sorted.map(({ __index, tvl, netValue, ...rest }) => rest)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/GlobalFonts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/components.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/fonts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/shadows.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/sizes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/theme/styles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/LinkProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/Url.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/analytics.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/hooks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/ox-shim.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/ox/index.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19,22],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19,22],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare const _ox: any;\nexport = _ox;\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/ox/wildcard.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23,26],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23,26],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare const _ox_any: any;\nexport = _ox_any;\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/types/sanity.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4627,4630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4627,4630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Ref } from \"react\"\nimport {\n  SanityBlock,\n  SanityDocument,\n  SanityImageAsset,\n  SanityImageCrop,\n  SanityImageHotspot,\n  SanityKeyed,\n  SanityKeyedReference,\n  SanityReference,\n} from \"sanity-codegen\"\n\n/**\n * Home Page\n *\n *\n */\nexport interface Home extends SanityDocument {\n  _type: \"home\"\n\n  /**\n   * Hero Copy — `array`\n   *\n   *\n   */\n  heroCopy?: Array<SanityKeyed<SanityBlock>>\n\n  /**\n   * Cellars Section — `sectionCellars`\n   *\n   *\n   */\n  sectionCellars?: SectionCellars\n\n  /**\n   * Strategies Section — `sectionStrategies`\n   *\n   *\n   */\n  sectionStrategies?: SectionStrategies\n}\n\n/**\n * Strategy\n *\n *\n */\nexport interface Strategy extends SanityDocument {\n  _type: \"strategy\"\n\n  /**\n   * Is Active — `boolean`\n   *\n   *\n   */\n  isActive?: boolean\n\n  /**\n   * Title — `string`\n   *\n   *\n   */\n  title?: string\n\n  /**\n   * Body — `blockContent`\n   *\n   *\n   */\n  body?: BlockContent\n\n  /**\n   * Stablecoins — `array`\n   *\n   *\n   */\n  stableCoins?: Array<SanityKeyedReference<StableCoin>>\n}\n\n/**\n * Strategies Section — `sectionStrategies`\n *\n *\n */\nexport type SectionStrategies = {\n  _type: \"sectionStrategies\"\n  /**\n   * Title — `typedTextInput`\n   *\n   *\n   */\n  title?: TypedTextInput\n\n  /**\n   * Subtitle — `string`\n   *\n   *\n   */\n  subtitle?: string\n\n  /**\n   * Strategies — `array`\n   *\n   *\n   */\n  strategies?: Array<SanityKeyedReference<Strategy>>\n}\n\nexport type SectionCellars = {\n  _type: \"sectionCellars\"\n  /**\n   * Title — `typedTextInput`\n   *\n   *\n   */\n  title?: TypedTextInput\n\n  /**\n   * Subtitle — `string`\n   *\n   *\n   */\n  subtitle?: string\n}\n\nexport interface FaqSection extends SanityDocument {\n  _type: \"faqSection\"\n\n  /**\n   * Title — `string`\n   *\n   *\n   */\n  title?: string\n\n  /**\n   * FAQ Tabs — `array`\n   *\n   *\n   */\n  faqTabs?: Array<SanityKeyedReference<FaqTab>>\n}\n\n/**\n * FAQ item\n *\n *\n */\nexport interface FaqItem extends SanityDocument {\n  _type: \"faqItem\"\n\n  /**\n   * Question — `string`\n   *\n   *\n   */\n  question?: string\n\n  /**\n   * Answer — `array`\n   *\n   *\n   */\n  answer?: Array<SanityKeyed<SanityBlock>>\n}\n\n/**\n * FAQ Tab\n *\n *\n */\nexport interface FaqTab extends SanityDocument {\n  _type: \"faqTab\"\n\n  /**\n   * Title — `string`\n   *\n   *\n   */\n  title?: string\n\n  /**\n   * FAQs — `array`\n   *\n   *\n   */\n  faqItems?: Array<SanityKeyedReference<FaqItem>>\n}\n\n/**\n * Stablecoin\n *\n *\n */\nexport interface StableCoin extends SanityDocument {\n  _type: \"stableCoin\"\n\n  /**\n   * Name — `string`\n   *\n   *\n   */\n  name?: string\n\n  /**\n   * Image — `image`\n   *\n   *\n   */\n  image?: {\n    _type: \"image\"\n    asset: SanityReference<SanityImageAsset>\n    crop?: SanityImageCrop\n    hotspot?: SanityImageHotspot\n  }\n}\n\nexport type BlockContent = Array<\n  | SanityKeyed<SanityBlock>\n  | SanityKeyed<{\n      _type: \"image\"\n      asset: SanityReference<SanityImageAsset>\n      crop?: SanityImageCrop\n      hotspot?: SanityImageHotspot\n    }>\n  | SanityKeyed<Code>\n>\n\nexport type TypedTextList = {\n  _type: \"typedTextList\"\n  /**\n   * list — `array`\n   *\n   *\n   */\n  list?: Array<SanityKeyed<string>>\n\n  /**\n   * Keystroke animation duration — `number`\n   *\n   * Keystroke animation time in miliseconds\n   */\n  keyStrokeDuration?: number\n\n  /**\n   * Pause duration — `number`\n   *\n   * Pause time in miliseconds\n   */\n  pauseDuration?: number\n}\n\nexport type TypedTextInput = {\n  _type: \"typedTextInput\"\n  /**\n   *   — `array`\n   *\n   *\n   */\n  block?: Array<\n    | SanityKeyed<SanityBlock>\n    | SanityKeyed<TypedTextList>\n    | SanityKeyed<LineBreak>\n  >\n}\n\nexport type LineBreak = {\n  _type: \"lineBreak\"\n  /**\n   * style — `string`\n   *\n   *\n   */\n  style?: \"lineBreak\" | \"horizontalBreak\"\n}\n\nexport interface FaqTabWithRef extends Omit<FaqTab, \"faqItems\"> {\n  faqItems?: FaqItem[]\n}\n\nexport interface CustomFaqSection\n  extends Omit<FaqSection, \"faqTabs\"> {\n  faqTabs?: FaqTabWithRef[]\n}\n\nexport interface PrivacyAndTermsContent {\n  content: BlockContent\n}\n\nexport interface StableCoinWithImage\n  extends Omit<StableCoin, \"image\"> {\n  image?: {\n    url: string\n  }\n}\n\ninterface SectionRef {\n  sectionRef?: Ref<HTMLDivElement>\n}\n\nexport interface SectionCellarsWithImage extends SectionCellars {}\n\nexport interface StrategyWithImage\n  extends Omit<Strategy, \"stableCoins\"> {\n  stableCoins?: StableCoinWithImage[]\n}\n\nexport interface SectionStrategiesWithImages\n  extends Omit<SectionStrategies, \"strategies\">,\n    SectionRef {\n  strategies?: StrategyWithImage[]\n}\n\nexport interface HomeWithImages\n  extends Omit<Home, \"sectionCellars\" | \"sectionStrategies\"> {\n  sectionCellars: SectionCellarsWithImage\n  sectionStrategies: SectionStrategiesWithImages\n}\n\ntype Code = any\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/analytics.ts","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":2,"column":1,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":2,"endColumn":65,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[34,98],"text":"// @ts-expect-error - Missing type definitions for @analytics/mixpanel"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[836,839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[836,839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1295,1298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1295,1298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":1,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":67,"column":9,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":67,"endColumn":50,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[1636,1677],"text":"// @ts-expect-error - dataLayer is added by GTM"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Analytics from \"analytics\"\n// @ts-ignore - Missing type definitions for @analytics/mixpanel\nimport mixpanel from \"@analytics/mixpanel\"\n\nconst isBrowser = typeof window !== \"undefined\"\n\nconst analyticsEnabled =\n  process.env.NEXT_PUBLIC_ANALYTICS_ENABLED ?? \"false\"\nlet enabled = false\ntry {\n  enabled = JSON.parse(analyticsEnabled)\n  if (typeof enabled !== \"boolean\") {\n    throw new Error(\"NEXT_PUBLIC_ANALYTICS_ENABLED is not a boolean\")\n  }\n} catch (error) {\n  enabled = false\n  console.error(\n    \"Could not parse NEXT_PUBLIC_ANALYTICS_ENABLED as a boolean:\",\n    analyticsEnabled\n  )\n}\n\nconst appName =\n  process.env.NEXT_PUBLIC_APP_NAME ?? \"Sommelier <Local>\"\n\n// Google Tag Manager\nconst gtmId = process.env.NEXT_PUBLIC_GTM_ID\nconst isSendToGTM =\n  isBrowser && gtmId && gtmId !== null && gtmId.length > 0\n\nconst plugins: any[] = []\n\nconst mixpanelToken = process.env.NEXT_PUBLIC_MIXPANEL_TOKEN\nif (isBrowser && mixpanelToken && mixpanelToken.length > 0) {\n  plugins.push(\n    mixpanel({\n      token: mixpanelToken,\n      api_host: process.env.NEXT_PUBLIC_MIXPANEL_PROXY_HOST ?? \"\",\n    })\n  )\n}\n\nexport const invalidEventCharRex = /[^(\\w|.|\\-)]*/g\n\nexport class AnalyticsWrapper {\n  client: ReturnType<typeof Analytics>\n  enabled: boolean\n\n  constructor(appName: string, plugins: any[]) {\n    this.client = Analytics({\n      app: appName,\n      plugins,\n    })\n\n    this.enabled = false\n  }\n\n  enable() {\n    this.enabled = true\n  }\n\n  track(eventName: string, payload?: Record<string, unknown>) {\n    try {\n      this.enabled && this.client.track(eventName, payload)\n      this.enabled &&\n        isSendToGTM &&\n        // @ts-ignore - dataLayer is added by GTM\n        window.dataLayer?.push({ event: eventName, ...payload })\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // strips invalid characters\n  safeTrack(eventName: string, payload?: Record<string, unknown>) {\n    const clean = eventName.replace(invalidEventCharRex, \"\")\n    this.track(clean, payload)\n  }\n\n  identify(id: string) {\n    this.enabled && this.client.identify(id)\n  }\n}\n\nexport const analytics = new AnalyticsWrapper(appName, plugins)\n\nif (enabled) {\n  analytics.enable()\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/bigIntHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/calculateTime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/chakra.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/chartHelper.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":9,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'arr' is defined but never used.","line":9,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { differenceInDays } from \"date-fns\"\n\nexport const createTokenPriceChangeDatum = (\n  data?: { date: number; shareValue: string }[]\n): { x: Date; y: string }[] | undefined => {\n  if (!data) return\n\n  let datum: { x: Date; y: string }[] = []\n  data.map((item, index, arr) => {\n    const firstData = data[data.length - 1]\n    if (firstData) {\n      const current = item.shareValue\n      const change = firstData\n        ? ((parseInt(current) - parseInt(firstData.shareValue)) /\n            parseInt(firstData.shareValue)) *\n          100\n        : 0\n      datum.push({\n        x: new Date(item.date * 1000),\n        y: String(change),\n      })\n    }\n  })\n  return datum\n}\n\nexport const formatPercentage = (value: string) => {\n  return parseFloat(value).toFixed(3)\n}\n\n// Helper function to calculate rolling averages\nfunction rollingAverage(arr: number[], windowSize: number) {\n  const result = []\n  for (let i = 0; i < arr.length - windowSize + 1; i++) {\n    const window = arr.slice(i, i + windowSize)\n    const average = window.reduce((a, b) => a + b, 0) / windowSize\n    result.push(average)\n  }\n  return result\n}\n\nexport const createApyChangeDatum = ({\n  launchEpoch,\n  data,\n  decimals,\n  smooth,\n  daysSmoothed,\n  daysRendered,\n}: {\n  launchEpoch: number\n  data?: { date: number; shareValue: string }[]\n  decimals: number\n  smooth: boolean\n  daysSmoothed: number\n  daysRendered: number\n}): { x: Date; y: string, value: number }[] | undefined => {\n  if (!data) return\n  if (data.length < 2) return\n\n  const datum: { x: Date; y: string, value: number }[] = []\n  // Inception date (configured)\n  const launchDate = new Date(launchEpoch * 1000)\n  let apyValues: number[] = []\n\n  // Make earliest data first if it's not already\n  if (data[0].date > data[data.length - 1].date) {\n    data.reverse()\n  }\n\n  // If we're smoothing, apply rolling average twice over the smoothDuration\n  // to smooth out the APY curve\n  // Don't smooth if we don't have suffieicnt data, or we're showing data from\n  if (smooth && data.length > daysSmoothed && daysSmoothed > 0) {\n    const smoothDuration = daysSmoothed // Set the number of days for the rolling average\n\n    // Calculate daily APY values\n    apyValues = data.map((item, index) => {\n      if (index === 0) {\n        // no previous day to compare with for the first day\n        return 0\n      } else {\n        const previous = data[index - 1]\n        const currentValue = Number(item.shareValue)\n        const previousValue = Number(previous.shareValue)\n        const dailyApy =\n          (currentValue / previousValue - 1) * 365 * 100\n\n        return dailyApy\n      }\n    })\n\n    // For 30D MA -- Apply rolling average twice over the smoothDuration to smooth out the APY curve\n    //if (daysRendered === 30) {\n    //  apyValues = rollingAverage(apyValues, 3)\n    //  apyValues = rollingAverage(apyValues, smoothDuration)\n    //} else {\n      // Pure MA\n    apyValues = rollingAverage(apyValues, smoothDuration)\n    //}\n  } else {\n    // Calculate overall (non daily) APY values without smoothing\n    apyValues = data.map((item) => {\n      const current = new Date(item.date * 1000)\n      const daysSince = Math.abs(\n        differenceInDays(current, launchDate)\n      )\n\n      // If days since is 0, skip the calculation to avoid dividing by 0\n      if (daysSince === 0) return 0\n\n      const currentValue = Number(item.shareValue)\n      const startValue = 10 ** decimals\n      const yieldGain = (currentValue - startValue) / startValue\n      const apy = yieldGain * (365 / daysSince) * 100\n\n      return apy\n    })\n  }\n\n  // Drop the first value if it's 0\n  if (apyValues[0] === 0) {\n    apyValues.shift()\n    data.shift()\n  }\n\n  // Modify apyValues to be the last daysRendered worth of values\n  if (daysRendered > 0 && apyValues.length >= daysRendered) {\n    apyValues.splice(0, apyValues.length - daysRendered)\n    // Update all the dates as well\n    data.splice(0, data.length - daysRendered)\n  }\n\n  // Construct the final datum array with the smoothed APY values\n  data.forEach((item, index) => {\n    const apyValue = apyValues[index]\n    if (!isNaN(apyValue)) {\n      datum.push({\n        x: new Date(item.date * 1000),\n        y: String(apyValue.toFixed(1)) + \"%\",\n        value: apyValue,\n      })\n    }\n  })\n\n  return datum\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/estimateGasLimit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1062,1065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1062,1065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1083,1086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1083,1086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1096,1099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1096,1099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { pow } from \"utils/bigIntHelpers\"\n\nexport const gasLimitMargin = (\n  gasEstimated: bigint,\n  margin?: bigint\n) => {\n  const factor = margin ? margin : 130n\n  return (gasEstimated * factor) / 100n;\n}\n\nexport const estimateGasLimit = async (\n  fn: Promise<bigint>,\n  knownGasLimit: number,\n  margin?: bigint\n) => {\n  try {\n    const gas = await fn\n    return gasLimitMargin(gas, margin).toString()\n  } catch (error) {\n    console.warn(\"Fail to estimate gas, using known gas limit\")\n    return knownGasLimit\n  }\n}\n\n// Increase PAD values to provide larger buffer on retries\nconst PAD = [125n, 140n, 155n, 170n, 185n]\n\n/**\n *\n * @example\n * const gasLimitEstimated = await estimateGasLimitWithRetry(\n *     cellarRouterSigner.estimateGas.depositAndSwap,\n *     cellarRouterSigner.simulate.depositAndSwap,\n *     [\n *       payload.cellarAddress,\n *       1,\n *       swapData,\n *       amountInWei,\n *       payload.selectedToken?.address!,\n *     ],\n *     600000,\n *     1000000\n *   )\n */\nexport const estimateGasLimitWithRetry = async (\n  fnEstimateGas: any,\n  fnCallStatic: any,\n  args: any[],\n  knownGasLimit: number,\n  account?: string\n) => {\n  const gasEstimatedRes = await estimateGasLimit(\n    fnEstimateGas(args),\n    knownGasLimit,\n    100n\n  )\n  let gasLimitEstimated = BigInt(gasEstimatedRes)\n\n  let count = 1\n  const maxTries = 5\n  while (count <= maxTries) {\n    try {\n      const gasLimit = gasLimitMargin(\n        gasLimitEstimated,\n        PAD[count - 1]\n      )\n\n      const tx = await fnCallStatic(args, {\n        gas: gasLimit,\n        account: account\n      })\n      if (tx) {\n        gasLimitEstimated = gasLimit\n        break\n      }\n    } catch (e) {\n      if (count === maxTries) {\n        const lastTryGasLimit = pow(BigInt(10), BigInt(10)) // Last try limit is very high -- users hate the gas limits\n        try {\n          const tx = await fnCallStatic(args, {\n            gas: lastTryGasLimit,\n            account: account\n          })\n          if (tx) {\n            gasLimitEstimated = lastTryGasLimit\n          }\n        } catch (error) {\n          throw new Error(\"GAS_LIMIT_ERROR\", { cause: error })\n        }\n      }\n      count++\n    }\n  }\n  return gasLimitEstimated\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/fetchEtherfiData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/fetchMerkleData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/formatCurrency.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { formatUnits } from \"viem\"\n\nexport const formatCurrency = (value?: string) => {\n  const v =\n    value &&\n    Intl.NumberFormat(\"en-US\", {\n      notation: \"compact\",\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    }).format(parseFloat(value))\n\n  return v\n}\n\nexport const formatUSD = (value?: string, maximumDigit?: number) => {\n  const v =\n    value &&\n    Intl.NumberFormat(\"en-US\", {\n      notation: \"compact\",\n      style: \"currency\",\n      currency: \"USD\",\n      maximumFractionDigits: maximumDigit || 2,\n      minimumFractionDigits: 2,\n    }).format(parseFloat(value))\n\n  return v\n}\n\nexport const toEther = (\n  val: any | undefined,\n  decimals = 18,\n  format?: boolean | number,\n  precision = 2\n) => {\n  if (val != 0n && (!val || val === \"--\")) return \"--\"\n  try {\n    if (typeof val === 'bigint') val = formatUnits(val, decimals)\n    const result = parseFloat(val)\n    if (format) {\n      format = typeof format === \"boolean\" ? 2 : format\n      return result.toLocaleString(\"en-US\", { minimumFractionDigits: format, maximumFractionDigits: format });\n    }\n    return floorToPrecision(result, precision).toString()\n  } catch (e) {\n    console.log(e)\n    return \"--\"\n  }\n}\nconst floorToPrecision = (num: number, precision: number) => {\n  const factor = Math.pow(10, precision);\n  return Math.floor(num * factor) / factor;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/formatDistance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[619,622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[619,622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const formatDistanceLocale = {\n  lessThanXSeconds: \"{{count}}s\",\n  xSeconds: \"{{count}}s\",\n  halfAMinute: \"30s\",\n  lessThanXMinutes: \"{{count}}m\",\n  xMinutes: \"{{count}}m\",\n  aboutXHours: \"{{count}}h\",\n  xHours: \"{{count}}h\",\n  xDays: \"{{count}}d\",\n  aboutXWeeks: \"{{count}}w\",\n  xWeeks: \"{{count}}w\",\n  aboutXMonths: \"{{count}}m\",\n  xMonths: \"{{count}}m\",\n  aboutXYears: \"{{count}}y\",\n  xYears: \"{{count}}y\",\n  overXYears: \"{{count}}y\",\n  almostXYears: \"{{count}}y\",\n}\n\nexport const formatDistance = (\n  token: keyof typeof formatDistanceLocale,\n  count: string\n) => {\n  const result = (formatDistanceLocale[token] as any).replace(\n    \"{{count}}\",\n    count\n  )\n\n  return result\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/getBytes32.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/getCurrentAsset.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/getGainPct.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/getProtocols.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/handleTransactionError.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'context' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[744,747],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[744,747],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[759,762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[759,762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type TransactionType =\n  | \"deposit\"\n  | \"withdraw\"\n  | \"approve\"\n  | \"bond\"\n  | \"claim\"\n  | \"bridge\"\n\nexport type TransactionErrorType =\n  | \"USER_REJECTED\"\n  | \"GAS_LIMIT_ERROR\"\n  | \"SPAM_FILTER_ERROR\"\n  | \"OTHER\"\n\nexport interface TransactionError {\n  type: TransactionErrorType\n  message: string\n  originalError: Error\n}\n\nexport interface TransactionErrorContext {\n  vaultName: string\n  tokenSymbol?: string\n  transactionType: TransactionType\n  value?: number\n  chainId?: number\n}\n\n/**\n * Normalizes transaction errors to handle user rejections consistently\n */\nexport const handleTransactionError = (\n  error: Error,\n  context: TransactionErrorContext\n): TransactionError => {\n  // Check for user rejection patterns\n  const anyErr: any = error as any\n  const combined = [\n    anyErr?.message,\n    anyErr?.shortMessage,\n    anyErr?.cause?.message,\n    anyErr?.cause?.shortMessage,\n    anyErr?.walk?.()?.message,\n  ]\n    .filter(Boolean)\n    .join(\" | \")\n\n  const isUserRejected =\n    anyErr?.code === 4001 ||\n    combined.includes(\"User rejected\") ||\n    combined.includes(\"User denied\") ||\n    combined.includes(\"MetaMask Tx Signature: User denied\") ||\n    combined.includes(\"User rejected the request\")\n\n  if (isUserRejected) {\n    return {\n      type: \"USER_REJECTED\",\n      message: \"Transaction was rejected by user\",\n      originalError: error,\n    }\n  }\n\n  // Check for spam filter errors\n  if (\n    error.message.includes(\"spam filter\") ||\n    error.message.includes(\"not been authorized\")\n  ) {\n    return {\n      type: \"SPAM_FILTER_ERROR\",\n      message: \"Transaction blocked by spam filter\",\n      originalError: error,\n    }\n  }\n\n  // Check for gas limit errors\n  if (error.message === \"GAS_LIMIT_ERROR\") {\n    return {\n      type: \"GAS_LIMIT_ERROR\",\n      message: \"Gas limit exceeded\",\n      originalError: error,\n    }\n  }\n\n  // Default to other error\n  return {\n    type: \"OTHER\",\n    message: error.message,\n    originalError: error,\n  }\n}\n\n/**\n * Generates consistent toast messages for transaction errors\n */\nexport const getTransactionErrorToast = (\n  error: TransactionError,\n  context: TransactionErrorContext\n) => {\n  const { vaultName, transactionType } = context\n\n  switch (error.type) {\n    case \"USER_REJECTED\":\n      return {\n        heading: `${vaultName} ${getTransactionTypeDisplay(\n          transactionType\n        )}`,\n        body: `Transaction was rejected`,\n        status: \"info\" as const,\n        showPopupGuidance: true,\n      }\n\n    case \"SPAM_FILTER_ERROR\":\n      return {\n        heading: \"Transaction Blocked\",\n        body: `Your transaction was blocked by MetaMask's spam filter. Please try:\n• Clearing MetaMask activity data\n• Waiting a few minutes before retrying\n• Using a different amount`,\n        status: \"warning\" as const,\n      }\n\n    case \"GAS_LIMIT_ERROR\":\n      return {\n        heading: \"Transaction not submitted\",\n        body: `Your transaction has failed. If it does not work after waiting some time and retrying, please contact support.`,\n        status: \"info\" as const,\n      }\n\n    default:\n      return {\n        heading: `${vaultName} ${getTransactionTypeDisplay(\n          transactionType\n        )}`,\n        body: error.message,\n        status: \"error\" as const,\n      }\n  }\n}\n\n/**\n * Converts transaction type to display format\n */\nconst getTransactionTypeDisplay = (type: TransactionType): string => {\n  switch (type) {\n    case \"deposit\":\n      return \"Deposit\"\n    case \"withdraw\":\n      return \"Withdraw\"\n    case \"approve\":\n      return \"Approval\"\n    case \"bond\":\n      return \"Bond\"\n    case \"claim\":\n      return \"Claim\"\n    case \"bridge\":\n      return \"Bridge\"\n    default:\n      return \"Transaction\"\n  }\n}\n\n/**\n * Generates analytics data for transaction errors\n */\nexport const getTransactionErrorAnalytics = (\n  error: TransactionError,\n  context: TransactionErrorContext\n) => {\n  return {\n    vaultName: context.vaultName,\n    tokenSymbol: context.tokenSymbol,\n    transactionType: context.transactionType,\n    value: context.value,\n    chainId: context.chainId,\n    message: error.type,\n    errorMessage: error.message,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/isComingSoon.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/isValidUrl.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/keplr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/keplrUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/landingType.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/legacyVisibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/money.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/navLinks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/origin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/protocolsImagePath.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/reactQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/sortVaults.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[282,285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[282,285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[344,347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[344,347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[395,398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[395,398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { parseMoneyString, coerceNetValue } from \"./money\"\n\nexport type Vault = {\n  name?: string\n  metrics?: { tvl?: number | null }\n  user?: { netValue?: number | null }\n}\n\nconst normName = (s?: string) => (s ?? \"\").toLowerCase()\n\nexport function sortVaultsForMainPage(\n  vaults: any[],\n  opts: { connected: boolean }\n) {\n  const byTVL = (v: any) => parseMoneyString(v.tvl)\n  const byNV = (v: any) => coerceNetValue(v.netValue)\n\n  // Debug logging for sorting\n  if (process.env.NEXT_PUBLIC_DEBUG_SORT === \"1\") {\n    console.log(\"Sorting vaults:\", {\n      connected: opts.connected,\n      vaultCount: vaults.length,\n      sampleVaults: vaults.slice(0, 3).map((v) => ({\n        name: v.name,\n        tvl: v.tvl,\n        netValue: v.netValue,\n        parsedTvl: byTVL(v),\n        parsedNetValue: byNV(v),\n      })),\n    })\n  }\n\n  return [...vaults].sort((a, b) => {\n    if (!opts.connected) return byTVL(b) - byTVL(a)\n    const an = byNV(a),\n      bn = byNV(b)\n    if (Number.isFinite(an) && Number.isFinite(bn) && an !== bn)\n      return bn - an\n    // fallback TVL\n    return byTVL(b) - byTVL(a)\n  })\n}\n\n// Keep the original function for backward compatibility\nexport function sortVaults<T extends Vault>(\n  list: T[],\n  isConnected: boolean\n): T[] {\n  return [...list].sort((a, b) => {\n    if (isConnected) {\n      // When connected: Order by Net Value (highest to lowest), fallback to TVL\n      const aNetValue = coerceNetValue(a.user?.netValue)\n      const bNetValue = coerceNetValue(b.user?.netValue)\n\n      // Compare net values first\n      const nv = bNetValue - aNetValue\n      if (nv !== 0) return nv\n\n      // Fallback to TVL if net values are equal, 0, or missing\n      const aTvl = parseMoneyString(a.metrics?.tvl)\n      const bTvl = parseMoneyString(b.metrics?.tvl)\n      const tvl = bTvl - aTvl\n      if (tvl !== 0) return tvl\n    } else {\n      // When not connected: Order by TVL (highest to lowest)\n      const aTvl = parseMoneyString(a.metrics?.tvl)\n      const bTvl = parseMoneyString(b.metrics?.tvl)\n      const tvl = bTvl - aTvl\n      if (tvl !== 0) return tvl\n    }\n\n    // Final fallback: alphabetical by name\n    const an = normName(a.name)\n    const bn = normName(b.name)\n    return an < bn ? -1 : an > bn ? 1 : 0\n  })\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tableName' is defined but never used.","line":7,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used.","line":8,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[283,286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[283,286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[453,456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[453,456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from \"@supabase/supabase-js\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL ?? \"\"\nconst supabasePubKey = process.env.NEXT_PUBLIC_SUPABASE_PUB_KEY ?? \"\"\n\nclass SupabaseNoop {\n  async from(tableName: string) {\n    return { insert: function (options: any) {} }\n  }\n}\n\n// Create a single supabase client for interacting with your database\nconst enabled = supabaseUrl.length > 0 && supabasePubKey.length > 0\n\nlet supabase: any = new SupabaseNoop()\nif (enabled) {\n  supabase = createClient(supabaseUrl, supabasePubKey)\n}\n\nexport async function insertEvent(options: {\n  event: string\n  address: string\n  cellar?: string\n  transaction_hash?: string\n}) {\n  if (!enabled) return\n\n  const { event, address, cellar, transaction_hash } = options\n  const user_agent = window.navigator.userAgent\n\n  switch (event) {\n    case \"wallet.connect-succeeded\": {\n      await supabase\n        .from(\"event_connect\")\n        .insert({ address, user_agent })\n      break\n    }\n    case \"deposit.started\": {\n      await supabase\n        .from(\"event_deposit_started\")\n        .insert({ address, cellar, user_agent })\n      break\n    }\n    case \"deposit.succeeded\": {\n      await supabase.from(\"event_deposit_success\").insert({\n        address,\n        cellar,\n        transaction_hash,\n        user_agent,\n      })\n      break\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/truncateWalletAddress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/txDebug.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/validateSommelierAddress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/wallet/chainUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[646,649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[646,649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[790,793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[790,793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1019,1022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1019,1022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1098,1101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1098,1101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1172,1175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1172,1175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1855,1858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1855,1858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { switchChain } from \"wagmi/actions\"\nimport { config } from \"../../lib/wagmi\"\nimport { chainConfig } from \"data/chainConfig\"\n\nexport async function requestSwitch(chainId: 1 | 42161 | 8453) {\n  try {\n    await switchChain(config, { chainId })\n    return true\n  } catch (e: any) {\n    if (e?.code === 4001) throw new Error(\"User canceled chain switch\")\n    if (e?.message?.includes(\"Unrecognized chain ID\")) {\n      throw new Error(\"Unsupported chain in wallet\")\n    }\n    throw e\n  }\n}\n\nexport async function requestSwitchWithAdd(chainId: 1 | 42161 | 8453) {\n  try {\n    await switchChain(config, { chainId })\n    return true\n  } catch (e: any) {\n    // If chain not added in wallet, try wallet_addEthereumChain\n    if (e?.code === 4902 && typeof window !== \"undefined\" && (window as any)?.ethereum) {\n      const chain = chainConfig.find((c) => c.wagmiId === chainId)\n      if (!chain) {\n        throw new Error(\"Chain configuration not found\")\n      }\n\n      try {\n        const rpcUrls = [\n          (chain as any).infuraRpcUrl,\n          (chain as any).alchemyRpcUrl,\n          (chain as any).quicknodeRpcUrl,\n        ].filter(Boolean)\n\n        await (window as any).ethereum.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: \"0x\" + chainId.toString(16),\n              chainName: chain.displayName,\n              rpcUrls: rpcUrls.length ? rpcUrls : undefined,\n              nativeCurrency: {\n                name: \"ETH\",\n                symbol: \"ETH\",\n                decimals: 18,\n              },\n              blockExplorerUrls: [\n                chain.blockExplorer?.url,\n              ].filter(Boolean),\n            },\n          ],\n        })\n\n        // Try switching again after adding\n        await switchChain(config, { chainId })\n        return true\n      } catch (addErr: any) {\n        throw new Error(`Failed to add network: ${addErr?.message ?? \"Unknown error\"}`)\n      }\n    }\n\n    // Handle other errors\n    if (e?.code === 4001) throw new Error(\"User canceled chain switch\")\n    if (e?.message?.includes(\"Unrecognized chain ID\")) {\n      throw new Error(\"Unsupported chain in wallet\")\n    }\n    throw e\n  }\n}\n\nexport function getChainById(chainId: 1 | 42161 | 8453) {\n  return chainConfig.find((c) => c.wagmiId === chainId)\n}\n\nexport function getChainDisplayName(chainId: 1 | 42161 | 8453): string {\n  const chain = getChainById(chainId)\n  return chain?.displayName || `Chain ${chainId}`\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/wallet/conflictResolver.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2653,2656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2653,2656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Wallet conflict resolution utilities\n */\n\nimport { getSafeEthereumProvider } from \"./initOnce\"\n\n// Detect multiple wallet extensions\nexport function hasWalletConflicts(): boolean {\n  if (typeof window === \"undefined\") return false\n\n  const ethereum = getSafeEthereumProvider()\n  if (!ethereum) return false\n\n  // Check for multiple wallet providers\n  let providerCount = 0\n\n  if (ethereum.isMetaMask) {\n    providerCount++\n  }\n\n  if (ethereum.isCoinbaseWallet) {\n    providerCount++\n  }\n\n  if (ethereum.isWalletConnect) {\n    providerCount++\n  }\n\n  // Check for generic injected wallets that aren't the main ones\n  if (\n    !ethereum.isMetaMask &&\n    !ethereum.isCoinbaseWallet &&\n    !ethereum.isWalletConnect\n  ) {\n    providerCount++\n  }\n\n  return providerCount > 1\n}\n\n// Get a list of detected wallet providers\nexport function getDetectedWalletProviders(): string[] {\n  if (typeof window === \"undefined\") return []\n\n  const providers: string[] = []\n  const ethereum = getSafeEthereumProvider()\n\n  if (!ethereum) return providers\n\n  if (ethereum.isMetaMask) {\n    providers.push(\"MetaMask\")\n  }\n\n  if (ethereum.isCoinbaseWallet) {\n    providers.push(\"Coinbase Wallet\")\n  }\n\n  if (ethereum.isWalletConnect) {\n    providers.push(\"WalletConnect\")\n  }\n\n  // Check for other injected wallets\n  if (\n    !ethereum.isMetaMask &&\n    !ethereum.isCoinbaseWallet &&\n    !ethereum.isWalletConnect\n  ) {\n    providers.push(\"Injected Wallet\")\n  }\n\n  return providers\n}\n\n// Determine the recommended wallet provider\nexport function getRecommendedProvider(): string {\n  if (typeof window === \"undefined\") return \"MetaMask\"\n\n  const ethereum = getSafeEthereumProvider()\n  if (!ethereum) return \"MetaMask\"\n\n  // Priority order: MetaMask > Coinbase Wallet > WalletConnect > Other\n  if (ethereum.isMetaMask) return \"MetaMask\"\n  if (ethereum.isCoinbaseWallet) return \"Coinbase Wallet\"\n  if (ethereum.isWalletConnect) return \"WalletConnect\"\n\n  return \"Injected Wallet\"\n}\n\n// Generate instructions for resolving conflicts\nexport function getConflictResolutionInstructions(): string[] {\n  const providers = getDetectedWalletProviders()\n  const recommended = getRecommendedProvider()\n\n  const instructions = [\n    `Multiple wallet extensions detected: ${providers.join(\", \")}`,\n    `Recommended provider: ${recommended}`,\n    \"\",\n    \"To resolve conflicts:\",\n    \"1. Disable or remove unused wallet extensions\",\n    \"2. Keep only the wallet extension you want to use\",\n    \"3. Refresh the page after making changes\",\n    \"4. Try connecting again\",\n  ]\n\n  return instructions\n}\n\n// Get debug information about wallet providers\nexport function getProviderDebugInfo(): any {\n  if (typeof window === \"undefined\") return { error: \"Not in browser\" }\n\n  try {\n    const ethereum = getSafeEthereumProvider()\n    if (!ethereum) return { error: \"No ethereum provider found\" }\n\n    return {\n      hasConflicts: hasWalletConflicts(),\n      detectedProviders: getDetectedWalletProviders(),\n      recommendedProvider: getRecommendedProvider(),\n      ethereum: {\n        isMetaMask: ethereum.isMetaMask,\n        isCoinbaseWallet: ethereum.isCoinbaseWallet,\n        isWalletConnect: ethereum.isWalletConnect,\n        isConnected: ethereum.isConnected,\n        selectedAddress: ethereum.selectedAddress,\n        chainId: ethereum.chainId,\n      },\n      timestamp: new Date().toISOString(),\n    }\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : \"Unknown error\" }\n  }\n}\n\n// Get wallet provider information for debugging\nexport function getWalletProviderInfo() {\n  if (typeof window === \"undefined\") {\n    return {\n      ethereum: false,\n      isMetaMask: false,\n      isCoinbaseWallet: false,\n      isWalletConnect: false,\n      hasConflicts: false,\n      detectedProviders: [],\n      recommendedProvider: \"MetaMask\",\n    }\n  }\n\n  const ethereum = getSafeEthereumProvider()\n  const hasConflicts = hasWalletConflicts()\n  const detectedProviders = getDetectedWalletProviders()\n  const recommendedProvider = getRecommendedProvider()\n\n  return {\n    ethereum: !!ethereum,\n    isMetaMask: ethereum?.isMetaMask || false,\n    isCoinbaseWallet: ethereum?.isCoinbaseWallet || false,\n    isWalletConnect: ethereum?.isWalletConnect || false,\n    hasConflicts,\n    detectedProviders,\n    recommendedProvider,\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/wallet/connectionUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reject' is defined but never used.","line":23,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1296,1299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1296,1299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1338,1341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1338,1341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Wallet connection utility functions\n */\nimport { getSafeEthereumProvider } from \"./initOnce\"\n\n// Check if there's a pending wallet request\nexport function hasPendingWalletRequest(): boolean {\n  if (typeof window === \"undefined\") return false\n\n  // Check if ethereum provider exists and has pending requests\n  const ethereum = getSafeEthereumProvider()\n  if (ethereum) {\n    // This is a heuristic - we can't directly check pending requests\n    // but we can check if the provider is in a connecting state\n    return false // Default to false, will be handled by error catching\n  }\n\n  return false\n}\n\n// Wait for wallet to be ready\nexport function waitForWalletReady(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (typeof window === \"undefined\") {\n      resolve()\n      return\n    }\n\n    const ethereum = getSafeEthereumProvider()\n    if (ethereum) {\n      resolve()\n      return\n    }\n\n    // Wait for ethereum provider to be injected\n    const checkEthereum = () => {\n      const provider = getSafeEthereumProvider()\n      if (provider) {\n        resolve()\n      } else {\n        setTimeout(checkEthereum, 100)\n      }\n    }\n\n    checkEthereum()\n  })\n}\n\n// Safe wallet connection with retry logic\nexport async function safeWalletConnect(\n  connectFn: () => Promise<any>,\n  maxRetries: number = 3\n): Promise<any> {\n  let lastError: Error | null = null\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      await waitForWalletReady()\n      return await connectFn()\n    } catch (error) {\n      lastError = error as Error\n\n      // If it's a permission pending error, don't retry\n      if (\n        error instanceof Error &&\n        error.message?.includes(\"wallet_requestPermissions\") &&\n        error.message?.includes(\"already pending\")\n      ) {\n        throw error\n      }\n\n      // If it's a provider conflict error, don't retry\n      if (\n        error instanceof Error &&\n        error.message?.includes(\"Cannot set property ethereum\")\n      ) {\n        throw error\n      }\n\n      // Wait before retrying\n      if (attempt < maxRetries) {\n        await new Promise((resolve) =>\n          setTimeout(resolve, 1000 * attempt)\n        )\n      }\n    }\n  }\n\n  throw (\n    lastError ||\n    new Error(\"Wallet connection failed after all retries\")\n  )\n}\n\n// Check if wallet is supported\nexport function isWalletSupported(walletName: string): boolean {\n  if (typeof window === \"undefined\") return false\n\n  const walletNameLower = walletName.toLowerCase()\n\n  // Check for MetaMask\n  if (walletNameLower === \"metamask\") {\n    const ethereum = getSafeEthereumProvider()\n    return !!ethereum?.isMetaMask\n  }\n\n  // For other wallets, check if ethereum provider exists\n  if (walletNameLower === \"walletconnect\" || walletNameLower === \"coinbase\") {\n    const ethereum = getSafeEthereumProvider()\n    return !!ethereum\n  }\n\n  return false\n}\n\n// Get available wallet providers\nexport function getAvailableWalletProviders(): string[] {\n  if (typeof window === \"undefined\") return []\n\n  const providers: string[] = []\n  const ethereum = getSafeEthereumProvider()\n\n  if (ethereum) {\n    if (ethereum.isMetaMask) providers.push(\"MetaMask\")\n    if (ethereum.isCoinbaseWallet) providers.push(\"Coinbase Wallet\")\n    if (ethereum.isWalletConnect) providers.push(\"WalletConnect\")\n  }\n\n  return providers\n}\n\n// Get recommended wallet provider\nexport function getRecommendedWalletProvider(): string | null {\n  if (typeof window === \"undefined\") return null\n\n  const ethereum = getSafeEthereumProvider()\n  if (!ethereum) return null\n\n  // Priority order: MetaMask > Coinbase Wallet > WalletConnect\n  if (ethereum.isMetaMask) return \"MetaMask\"\n  if (ethereum.isCoinbaseWallet) return \"Coinbase Wallet\"\n  if (ethereum.isWalletConnect) return \"WalletConnect\"\n\n  return null\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/wallet/initOnce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/henriots/Desktop/projektid/SOMM/sommelier-strangelove/src/utils/webVitals.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98,101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98,101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { onCLS, onFCP, onLCP, onTTFB, onINP } from \"web-vitals\"\n\nfunction sendToAnalytics(metric: any) {\n  const { name, value, id } = metric\n\n  // Get current page path\n  const page = window.location.pathname\n  // Tag route & state for analysis\n  const route = page.startsWith(\"/vaults\") ? \"vaults\" : page\n  const state = \"with_legacy_deferred\"\n  const userAgent = navigator.userAgent\n\n  // Send to our API endpoint\n  fetch(\"/api/vitals\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      name,\n      value,\n      id,\n      page,\n      route,\n      state,\n      userAgent,\n    }),\n  }).catch(console.error)\n}\n\nexport function reportWebVitals() {\n  onCLS(sendToAnalytics)\n  onFCP(sendToAnalytics)\n  onLCP(sendToAnalytics)\n  onTTFB(sendToAnalytics)\n  onINP(sendToAnalytics)\n}\n","usedDeprecatedRules":[]}]