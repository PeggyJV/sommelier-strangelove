name: Tests

on:
  pull_request:
    # Run for PRs into any branch (safe: no secrets used)
    branches: ['**']
  push:
    # Run on pushes to any branch to validate before PR is opened
    branches: ['**']

jobs:
  unit_integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - name: Print versions
        run: |
          node -v
          pnpm -v
          pnpm ls eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-next typescript || true
      - name: Setup pnpm store cache
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with retry)
        run: |
          for i in 1 2 3; do
            pnpm install --frozen-lockfile --network-timeout 300000 && break || echo "pnpm install failed (attempt $i), retrying in 10s" && sleep 10;
          done
      - name: Typecheck
        run: pnpm run typecheck:scoped
      - name: Lint (repo, strict)
        run: pnpm run lint:ci || pnpm run lint:ci; test $? -eq 0
      - name: Upload ESLint JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-junit
          path: reports/eslint-junit.xml
      - name: Test with coverage
        run: pnpm run test:all -- --coverage
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jest
          path: coverage

  e2e:
    runs-on: ubuntu-latest
    needs: unit_integration
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - name: Setup pnpm store cache
        id: pnpm-cache-e2e
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-e2e.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install deps (with retry)
        run: |
          for i in 1 2 3; do
            pnpm install --frozen-lockfile --network-timeout 300000 && break || echo "pnpm install failed (attempt $i), retrying in 10s" && sleep 10;
          done
      - name: Build
        run: pnpm build
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report


