name: Tests

on:
  pull_request:
    # Run for PRs into any branch (safe: no secrets used)
    branches: ["**"]
  push:
    # Run on pushes to any branch to validate before PR is opened
    branches: ["**"]

jobs:
  unit_integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Print versions
        run: |
          echo "Node.js version:"
          node -v
          echo "pnpm version:"
          pnpm -v
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
      - name: Check package.json
        run: |
          echo "Package.json contents:"
          cat package.json | grep -A 10 -B 5 "eslint" || echo "No eslint found in package.json"
      - name: Setup pnpm store cache
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-v2-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-v2-
      - name: Install deps (with retry)
        run: |
          # Clear any potentially conflicting NODE_ENV
          unset NODE_ENV

          # Ensure pnpm installs all dependencies including dev
          echo "Installing dependencies..."

          for i in 1 2 3; do
            echo "Installation attempt $i..."
            # Use --frozen-lockfile but ensure dev deps are included
            if pnpm install --frozen-lockfile; then
              echo "Installation successful"
              break
            else
              echo "pnpm install failed (attempt $i)"
              if [ $i -lt 3 ]; then
                echo "Cleaning up and retrying in 10s..."
                rm -rf node_modules
                sleep 10
              else
                echo "Final attempt failed, trying without frozen lockfile..."
                pnpm install
              fi
            fi
          done
      - name: Verify installation
        run: |
          echo "Verifying installation..."
          echo "Checking for ESLint in dependencies:"
          pnpm list --depth=0 | grep eslint || true
      - name: Verify ESLint installation
        run: |
          echo "=== ESLint Installation Verification ==="
          echo "ESLint version:"
          pnpm exec eslint --version || exit 1
          echo "✓ ESLint is installed and working"
      - name: Create reports directory
        run: mkdir -p reports
      - name: Typecheck
        run: pnpm run typecheck:scoped
      - name: Lint (repo, strict)
        continue-on-error: true # Allow workflow to continue even if linting fails
        id: lint
        run: |
          echo "Running ESLint..."

          # First, let's check what we're linting
          echo "=== Files to be linted ==="
          find . -name "*.ts" -o -name "*.tsx" | grep -v node_modules | grep -v .next | head -20
          echo "..."

          # Run ESLint with human-readable output first to see issues
          echo ""
          echo "=== Running ESLint to check for issues ==="
          set +e  # Don't exit on error immediately

          # Run with compact output to see all issues at once
          pnpm exec eslint . --ext .ts,.tsx --max-warnings 0 --format compact 2>&1 | tee eslint-output.txt
          LINT_EXIT_CODE=$?

          # Also show first 50 lines of detailed output
          echo ""
          echo "=== First 50 lines of detailed output ==="
          pnpm exec eslint . --ext .ts,.tsx --max-warnings 0 2>&1 | head -50

          set -e

          if [ $LINT_EXIT_CODE -ne 0 ]; then
            echo ""
            echo "⚠️ ESLint found issues (exit code: $LINT_EXIT_CODE)"
            echo "Note: --max-warnings 0 means even warnings will fail the check."

            # Count errors and warnings from the compact output
            echo ""
            echo "=== Summary of issues ==="
            ERRORS=$(grep -o "[0-9]* error" eslint-output.txt | awk '{sum+=$1} END {print sum}')
            WARNINGS=$(grep -o "[0-9]* warning" eslint-output.txt | awk '{sum+=$1} END {print sum}')
            echo "Total errors: ${ERRORS:-0}"
            echo "Total warnings: ${WARNINGS:-0}"

            # Show which files have issues
            echo ""
            echo "=== Files with issues ==="
            grep ":" eslint-output.txt | cut -d: -f1 | sort -u | head -20 || echo "Could not parse files with issues"
          else
            echo ""
            echo "✅ ESLint check passed with no errors or warnings"
          fi

          # Always generate the JUnit report for artifact upload
          echo ""
          echo "=== Generating JUnit report ==="
          mkdir -p reports
          pnpm exec eslint . --ext .ts,.tsx --max-warnings 0 -f junit -o reports/eslint-junit.xml || true

          # Exit with the original lint exit code
          exit $LINT_EXIT_CODE
      - name: Upload ESLint JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-junit
          path: reports/eslint-junit.xml
      - name: Comment on lint status
        if: always()
        run: |
          if [ "${{ steps.lint.outcome }}" == "failure" ]; then
            echo "::warning::ESLint found issues in the code. Check the logs above for details."
          fi
      - name: Test with coverage
        run: |
          echo "=== Running Jest tests ==="

          echo "Verifying Babel configuration..."
          if [ -f "babel.config.js" ]; then
            echo "✓ babel.config.js found"
          elif [ -f ".babelrc.js" ]; then
            echo "✓ .babelrc.js found"
          elif [ -f ".babelrc" ]; then
            echo "✓ .babelrc found"
          else
            echo "⚠️ No Babel config found, checking for other configurations..."
            ls -la *.config.js | grep babel || echo "No babel config files found"
          fi

          echo ""
          echo "Checking Jest configuration..."
          if [ -f "jest.json" ]; then
            echo "✓ jest.json found"
            echo "Transform config:"
            cat jest.json | grep -A 3 '"transform"' || echo "No transform config found"
          fi

          echo ""
          echo "Checking for test files..."
          find src -name "*.spec.ts" -o -name "*.spec.tsx" -o -name "*.test.ts" -o -name "*.test.tsx" | grep -v node_modules | grep -v mocks | grep -v stubs | wc -l | xargs -I {} echo "Found {} test files"

          echo ""
          echo "Running tests with coverage..."
          pnpm run test:all:ci
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jest
          path: coverage

  e2e:
    runs-on: ubuntu-latest
    needs: unit_integration
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Setup pnpm store cache
        id: pnpm-cache-e2e
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-e2e.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-v2-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-v2-
      - name: Install deps (with retry)
        run: |
          # Clear any potentially conflicting NODE_ENV
          unset NODE_ENV

          # Ensure pnpm installs all dependencies including dev
          echo "Installing dependencies..."

          for i in 1 2 3; do
            echo "Installation attempt $i..."
            # Use --frozen-lockfile but ensure dev deps are included
            if pnpm install --frozen-lockfile; then
              echo "Installation successful"
              break
            else
              echo "pnpm install failed (attempt $i)"
              if [ $i -lt 3 ]; then
                echo "Cleaning up and retrying in 10s..."
                rm -rf node_modules
                rm -rf ~/.pnpm-store
                sleep 10
              else
                echo "Final attempt failed, trying without frozen lockfile..."
                pnpm install
              fi
            fi
          done
      - name: Verify dependencies
        run: |
          echo "Checking if dependencies are installed..."
          pnpm list --depth=0
      - name: Build
        run: pnpm build
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
