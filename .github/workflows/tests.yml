name: Tests

on:
  pull_request:
    # Run for PRs into any branch (safe: no secrets used)
    branches: ["**"]
  push:
    # Run on pushes to any branch to validate before PR is opened
    branches: ["**"]

jobs:
  unit_integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Print versions
        run: |
          echo "Node.js version:"
          node -v
          echo "pnpm version:"
          pnpm -v
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
      - name: Check package.json
        run: |
          echo "Package.json contents:"
          cat package.json | grep -A 10 -B 5 "eslint" || echo "No eslint found in package.json"
      - name: Setup pnpm store cache
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-v2-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-v2-
      - name: Install deps (with retry)
        run: |
          # Clear any potentially conflicting NODE_ENV
          unset NODE_ENV

          # Ensure pnpm installs all dependencies including dev
          echo "Installing dependencies..."

          for i in 1 2 3; do
            echo "Installation attempt $i..."
            # Use --frozen-lockfile but ensure dev deps are included
            if pnpm install --frozen-lockfile; then
              echo "Installation successful"
              break
            else
              echo "pnpm install failed (attempt $i)"
              if [ $i -lt 3 ]; then
                echo "Cleaning up and retrying in 10s..."
                rm -rf node_modules
                rm -rf ~/.pnpm-store
                sleep 10
              else
                echo "Final attempt failed, trying without frozen lockfile..."
                pnpm install
              fi
            fi
          done

          # Ensure ESLint is accessible
          echo "Checking ESLint availability..."
          if ! pnpm exec eslint --version > /dev/null 2>&1; then
            echo "WARNING: ESLint not found after install, installing explicitly..."
            pnpm add -D eslint@8.57.1 @typescript-eslint/eslint-plugin@7.18.0 @typescript-eslint/parser@7.18.0 eslint-config-next@15.4.6 eslint-plugin-jsx-a11y@^6.5.1 eslint-plugin-unused-imports@^2.0.0
          fi
      - name: Verify installation
        run: |
          echo "Verifying installation..."
          echo "node_modules exists:"
          ls -la node_modules || echo "node_modules not found"
          echo "node_modules/.bin contents:"
          ls -la node_modules/.bin/ | head -20 || echo ".bin directory not found"
          echo "ESLint binary exists:"
          ls -la node_modules/.bin/eslint || echo "ESLint binary not found"
          echo "ESLint package exists:"
          ls -la node_modules/eslint || echo "ESLint package not found"
          echo "pnpm list output:"
          pnpm list --depth=0 | grep eslint || echo "ESLint not found in pnpm list"
      - name: Verify ESLint installation
        run: |
          echo "=== ESLint Installation Verification ==="
          echo "1. Checking pnpm list for eslint packages:"
          pnpm list | grep eslint || echo "No eslint packages found in pnpm list"

          echo "2. Testing ESLint execution:"
          if pnpm exec eslint --version; then
            echo "✓ ESLint is working correctly"
          else
            echo "✗ ESLint execution failed"
            exit 1
          fi
      - name: Create reports directory
        run: mkdir -p reports
      - name: Typecheck
        run: pnpm run typecheck:scoped
      - name: Lint (repo, strict)
        run: |
          echo "Running ESLint..."
          pnpm run lint:ci || {
            echo "Lint failed. Checking ESLint installation again..."
            which eslint || echo "ESLint not in PATH"
            pnpm exec which eslint || echo "ESLint not found via pnpm"
            ls -la node_modules/.bin/ | grep eslint || echo "ESLint not in node_modules/.bin"
            exit 1
          }
      - name: Upload ESLint JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-junit
          path: reports/eslint-junit.xml
      - name: Test with coverage
        run: pnpm run test:all -- --coverage
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-jest
          path: coverage

  e2e:
    runs-on: ubuntu-latest
    needs: unit_integration
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Setup pnpm store cache
        id: pnpm-cache-e2e
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache-e2e.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-v2-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-v2-
      - name: Install deps (with retry)
        run: |
          # Clear any potentially conflicting NODE_ENV
          unset NODE_ENV

          # Ensure pnpm installs all dependencies including dev
          echo "Installing dependencies..."

          for i in 1 2 3; do
            echo "Installation attempt $i..."
            # Use --frozen-lockfile but ensure dev deps are included
            if pnpm install --frozen-lockfile; then
              echo "Installation successful"
              break
            else
              echo "pnpm install failed (attempt $i)"
              if [ $i -lt 3 ]; then
                echo "Cleaning up and retrying in 10s..."
                rm -rf node_modules
                rm -rf ~/.pnpm-store
                sleep 10
              else
                echo "Final attempt failed, trying without frozen lockfile..."
                pnpm install
              fi
            fi
          done
      - name: Verify dependencies
        run: |
          echo "Checking if dependencies are installed..."
          pnpm list --depth=0
      - name: Build
        run: pnpm build
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
