/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface V1_5TestCellarInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MAX_FEE_CUT()": FunctionFragment;
    "MAX_PERFORMANCE_FEE()": FunctionFragment;
    "MAX_PLATFORM_FEE()": FunctionFragment;
    "MAX_POSITIONS()": FunctionFragment;
    "addPosition(uint256,address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "distrustPosition(address)": FunctionFragment;
    "feeData()": FunctionFragment;
    "getPositionType(address)": FunctionFragment;
    "getPositions()": FunctionFragment;
    "holdingPosition()": FunctionFragment;
    "initiateShutdown()": FunctionFragment;
    "isPositionUsed(address)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "isTrusted(address)": FunctionFragment;
    "lastAccrual()": FunctionFragment;
    "liftShutdown()": FunctionFragment;
    "liquidityLimit()": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "popPosition()": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "pushPosition(address)": FunctionFragment;
    "rebalance(address,address,uint256,uint8,bytes)": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "registry()": FunctionFragment;
    "removePosition(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replacePosition(uint256,address)": FunctionFragment;
    "resetHighWatermark()": FunctionFragment;
    "sendFees()": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setFeesDistributor(bytes32)": FunctionFragment;
    "setHoldingPosition(address)": FunctionFragment;
    "setLiquidityLimit(uint256)": FunctionFragment;
    "setPerformanceFee(uint64)": FunctionFragment;
    "setPlatformFee(uint64)": FunctionFragment;
    "setStrategistPayoutAddress(address)": FunctionFragment;
    "setStrategistPerformanceCut(uint64)": FunctionFragment;
    "setStrategistPlatformCut(uint64)": FunctionFragment;
    "setWithdrawType(uint8)": FunctionFragment;
    "swapPositions(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustPosition(address,uint8)": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "withdrawType()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "MAX_FEE_CUT"
      | "MAX_PERFORMANCE_FEE"
      | "MAX_PLATFORM_FEE"
      | "MAX_POSITIONS"
      | "addPosition"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "deposit"
      | "depositLimit"
      | "distrustPosition"
      | "feeData"
      | "getPositionType"
      | "getPositions"
      | "holdingPosition"
      | "initiateShutdown"
      | "isPositionUsed"
      | "isShutdown"
      | "isTrusted"
      | "lastAccrual"
      | "liftShutdown"
      | "liquidityLimit"
      | "maxDeposit"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint"
      | "multicall"
      | "name"
      | "nonces"
      | "owner"
      | "permit"
      | "popPosition"
      | "positions"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "pushPosition"
      | "rebalance"
      | "redeem"
      | "registry"
      | "removePosition"
      | "renounceOwnership"
      | "replacePosition"
      | "resetHighWatermark"
      | "sendFees"
      | "setDepositLimit"
      | "setFeesDistributor"
      | "setHoldingPosition"
      | "setLiquidityLimit"
      | "setPerformanceFee"
      | "setPlatformFee"
      | "setStrategistPayoutAddress"
      | "setStrategistPerformanceCut"
      | "setStrategistPlatformCut"
      | "setWithdrawType"
      | "swapPositions"
      | "symbol"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "trustPosition"
      | "withdraw"
      | "withdrawType"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_CUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERFORMANCE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PLATFORM_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_POSITIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distrustPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPositionType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdingPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionUsed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrusted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAccrual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liftShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "popPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replacePosition",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetHighWatermark",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sendFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesDistributor",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoldingPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategistPayoutAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategistPerformanceCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategistPlatformCut",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawType",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_CUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERFORMANCE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PLATFORM_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_POSITIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distrustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPositionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastAccrual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liftShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replacePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetHighWatermark",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoldingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategistPayoutAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategistPerformanceCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategistPlatformCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawType",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "DepositLimitChanged(uint256,uint256)": EventFragment;
    "FeesDistributorChanged(bytes32,bytes32)": EventFragment;
    "HighWatermarkReset(uint256)": EventFragment;
    "HoldingPositionChanged(address,address)": EventFragment;
    "LiquidityLimitChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PerformanceFeeChanged(uint64,uint64)": EventFragment;
    "PlatformFeeChanged(uint64,uint64)": EventFragment;
    "PositionAdded(address,uint256)": EventFragment;
    "PositionRemoved(address,uint256)": EventFragment;
    "PositionReplaced(address,address,uint256)": EventFragment;
    "PositionSwapped(address,address,uint256,uint256)": EventFragment;
    "PulledFromPosition(address,uint256)": EventFragment;
    "Rebalance(address,address,uint256,uint256)": EventFragment;
    "SendFees(uint256,uint256)": EventFragment;
    "ShutdownChanged(bool)": EventFragment;
    "StrategistPayoutAddressChanged(address,address)": EventFragment;
    "StrategistPerformanceCutChanged(uint64,uint64)": EventFragment;
    "StrategistPlatformCutChanged(uint64,uint64)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TrustChanged(address,bool)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawTypeChanged(uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesDistributorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighWatermarkReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HoldingPositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityLimitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionReplaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PulledFromPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategistPayoutAddressChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategistPerformanceCutChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StrategistPlatformCutChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawTypeChanged"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositLimitChangedEventObject {
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type DepositLimitChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DepositLimitChangedEventObject
>;

export type DepositLimitChangedEventFilter =
  TypedEventFilter<DepositLimitChangedEvent>;

export interface FeesDistributorChangedEventObject {
  oldFeesDistributor: string;
  newFeesDistributor: string;
}
export type FeesDistributorChangedEvent = TypedEvent<
  [string, string],
  FeesDistributorChangedEventObject
>;

export type FeesDistributorChangedEventFilter =
  TypedEventFilter<FeesDistributorChangedEvent>;

export interface HighWatermarkResetEventObject {
  newHighWatermark: BigNumber;
}
export type HighWatermarkResetEvent = TypedEvent<
  [BigNumber],
  HighWatermarkResetEventObject
>;

export type HighWatermarkResetEventFilter =
  TypedEventFilter<HighWatermarkResetEvent>;

export interface HoldingPositionChangedEventObject {
  oldPosition: string;
  newPosition: string;
}
export type HoldingPositionChangedEvent = TypedEvent<
  [string, string],
  HoldingPositionChangedEventObject
>;

export type HoldingPositionChangedEventFilter =
  TypedEventFilter<HoldingPositionChangedEvent>;

export interface LiquidityLimitChangedEventObject {
  oldLimit: BigNumber;
  newLimit: BigNumber;
}
export type LiquidityLimitChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidityLimitChangedEventObject
>;

export type LiquidityLimitChangedEventFilter =
  TypedEventFilter<LiquidityLimitChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PerformanceFeeChangedEventObject {
  oldPerformanceFee: BigNumber;
  newPerformanceFee: BigNumber;
}
export type PerformanceFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PerformanceFeeChangedEventObject
>;

export type PerformanceFeeChangedEventFilter =
  TypedEventFilter<PerformanceFeeChangedEvent>;

export interface PlatformFeeChangedEventObject {
  oldPlatformFee: BigNumber;
  newPlatformFee: BigNumber;
}
export type PlatformFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PlatformFeeChangedEventObject
>;

export type PlatformFeeChangedEventFilter =
  TypedEventFilter<PlatformFeeChangedEvent>;

export interface PositionAddedEventObject {
  position: string;
  index: BigNumber;
}
export type PositionAddedEvent = TypedEvent<
  [string, BigNumber],
  PositionAddedEventObject
>;

export type PositionAddedEventFilter = TypedEventFilter<PositionAddedEvent>;

export interface PositionRemovedEventObject {
  position: string;
  index: BigNumber;
}
export type PositionRemovedEvent = TypedEvent<
  [string, BigNumber],
  PositionRemovedEventObject
>;

export type PositionRemovedEventFilter = TypedEventFilter<PositionRemovedEvent>;

export interface PositionReplacedEventObject {
  oldPosition: string;
  newPosition: string;
  index: BigNumber;
}
export type PositionReplacedEvent = TypedEvent<
  [string, string, BigNumber],
  PositionReplacedEventObject
>;

export type PositionReplacedEventFilter =
  TypedEventFilter<PositionReplacedEvent>;

export interface PositionSwappedEventObject {
  newPosition1: string;
  newPosition2: string;
  index1: BigNumber;
  index2: BigNumber;
}
export type PositionSwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  PositionSwappedEventObject
>;

export type PositionSwappedEventFilter = TypedEventFilter<PositionSwappedEvent>;

export interface PulledFromPositionEventObject {
  position: string;
  amount: BigNumber;
}
export type PulledFromPositionEvent = TypedEvent<
  [string, BigNumber],
  PulledFromPositionEventObject
>;

export type PulledFromPositionEventFilter =
  TypedEventFilter<PulledFromPositionEvent>;

export interface RebalanceEventObject {
  fromPosition: string;
  toPosition: string;
  assetsFrom: BigNumber;
  assetsTo: BigNumber;
}
export type RebalanceEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RebalanceEventObject
>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface SendFeesEventObject {
  feesInSharesRedeemed: BigNumber;
  feesInAssetsSent: BigNumber;
}
export type SendFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  SendFeesEventObject
>;

export type SendFeesEventFilter = TypedEventFilter<SendFeesEvent>;

export interface ShutdownChangedEventObject {
  isShutdown: boolean;
}
export type ShutdownChangedEvent = TypedEvent<
  [boolean],
  ShutdownChangedEventObject
>;

export type ShutdownChangedEventFilter = TypedEventFilter<ShutdownChangedEvent>;

export interface StrategistPayoutAddressChangedEventObject {
  oldPayoutAddress: string;
  newPayoutAddress: string;
}
export type StrategistPayoutAddressChangedEvent = TypedEvent<
  [string, string],
  StrategistPayoutAddressChangedEventObject
>;

export type StrategistPayoutAddressChangedEventFilter =
  TypedEventFilter<StrategistPayoutAddressChangedEvent>;

export interface StrategistPerformanceCutChangedEventObject {
  oldPerformanceCut: BigNumber;
  newPerformanceCut: BigNumber;
}
export type StrategistPerformanceCutChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StrategistPerformanceCutChangedEventObject
>;

export type StrategistPerformanceCutChangedEventFilter =
  TypedEventFilter<StrategistPerformanceCutChangedEvent>;

export interface StrategistPlatformCutChangedEventObject {
  oldPlatformCut: BigNumber;
  newPlatformCut: BigNumber;
}
export type StrategistPlatformCutChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StrategistPlatformCutChangedEventObject
>;

export type StrategistPlatformCutChangedEventFilter =
  TypedEventFilter<StrategistPlatformCutChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TrustChangedEventObject {
  position: string;
  isTrusted: boolean;
}
export type TrustChangedEvent = TypedEvent<
  [string, boolean],
  TrustChangedEventObject
>;

export type TrustChangedEventFilter = TypedEventFilter<TrustChangedEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawTypeChangedEventObject {
  oldType: number;
  newType: number;
}
export type WithdrawTypeChangedEvent = TypedEvent<
  [number, number],
  WithdrawTypeChangedEventObject
>;

export type WithdrawTypeChangedEventFilter =
  TypedEventFilter<WithdrawTypeChangedEvent>;

export interface V1_5TestCellar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: V1_5TestCellarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    MAX_FEE_CUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_POSITIONS(overrides?: CallOverrides): Promise<[number]>;

    addPosition(
      index: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    distrustPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        highWatermark: BigNumber;
        strategistPerformanceCut: BigNumber;
        strategistPlatformCut: BigNumber;
        platformFee: BigNumber;
        performanceFee: BigNumber;
        feesDistributor: string;
        strategistPayoutAddress: string;
      }
    >;

    getPositionType(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPositions(overrides?: CallOverrides): Promise<[string[]]>;

    holdingPosition(overrides?: CallOverrides): Promise<[string]>;

    initiateShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPositionUsed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    isTrusted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastAccrual(overrides?: CallOverrides): Promise<[BigNumber]>;

    liftShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    popPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    pushPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalance(
      fromPosition: PromiseOrValue<string>,
      toPosition: PromiseOrValue<string>,
      assetsFrom: PromiseOrValue<BigNumberish>,
      exchange: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    removePosition(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replacePosition(
      index: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetHighWatermark(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeesDistributor(
      newFeesDistributor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHoldingPosition(
      newHoldingPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      newPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategistPayoutAddress(
      payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategistPerformanceCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategistPlatformCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawType(
      newWithdrawType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapPositions(
      index1: PromiseOrValue<BigNumberish>,
      index2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustPosition(
      position: PromiseOrValue<string>,
      positionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawType(overrides?: CallOverrides): Promise<[number]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  MAX_FEE_CUT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_POSITIONS(overrides?: CallOverrides): Promise<number>;

  addPosition(
    index: PromiseOrValue<BigNumberish>,
    position: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToAssets(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  distrustPosition(
    position: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      highWatermark: BigNumber;
      strategistPerformanceCut: BigNumber;
      strategistPlatformCut: BigNumber;
      platformFee: BigNumber;
      performanceFee: BigNumber;
      feesDistributor: string;
      strategistPayoutAddress: string;
    }
  >;

  getPositionType(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPositions(overrides?: CallOverrides): Promise<string[]>;

  holdingPosition(overrides?: CallOverrides): Promise<string>;

  initiateShutdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPositionUsed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  isTrusted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastAccrual(overrides?: CallOverrides): Promise<BigNumber>;

  liftShutdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityLimit(overrides?: CallOverrides): Promise<BigNumber>;

  maxDeposit(
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxMint(
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxRedeem(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdraw(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  popPosition(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  previewDeposit(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    shares: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    assets: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pushPosition(
    position: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalance(
    fromPosition: PromiseOrValue<string>,
    toPosition: PromiseOrValue<string>,
    assetsFrom: PromiseOrValue<BigNumberish>,
    exchange: PromiseOrValue<BigNumberish>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    shares: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  removePosition(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replacePosition(
    index: PromiseOrValue<BigNumberish>,
    newPosition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetHighWatermark(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeesDistributor(
    newFeesDistributor: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHoldingPosition(
    newHoldingPosition: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityLimit(
    newLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    newPerformanceFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    newPlatformFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategistPayoutAddress(
    payout: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategistPerformanceCut(
    cut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategistPlatformCut(
    cut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawType(
    newWithdrawType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapPositions(
    index1: PromiseOrValue<BigNumberish>,
    index2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustPosition(
    position: PromiseOrValue<string>,
    positionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    assets: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawType(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    MAX_FEE_CUT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POSITIONS(overrides?: CallOverrides): Promise<number>;

    addPosition(
      index: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    distrustPosition(
      position: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        highWatermark: BigNumber;
        strategistPerformanceCut: BigNumber;
        strategistPlatformCut: BigNumber;
        platformFee: BigNumber;
        performanceFee: BigNumber;
        feesDistributor: string;
        strategistPayoutAddress: string;
      }
    >;

    getPositionType(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPositions(overrides?: CallOverrides): Promise<string[]>;

    holdingPosition(overrides?: CallOverrides): Promise<string>;

    initiateShutdown(overrides?: CallOverrides): Promise<void>;

    isPositionUsed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    isTrusted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastAccrual(overrides?: CallOverrides): Promise<BigNumber>;

    liftShutdown(overrides?: CallOverrides): Promise<void>;

    liquidityLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    popPosition(overrides?: CallOverrides): Promise<void>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushPosition(
      position: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalance(
      fromPosition: PromiseOrValue<string>,
      toPosition: PromiseOrValue<string>,
      assetsFrom: PromiseOrValue<BigNumberish>,
      exchange: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    removePosition(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replacePosition(
      index: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetHighWatermark(overrides?: CallOverrides): Promise<void>;

    sendFees(overrides?: CallOverrides): Promise<void>;

    setDepositLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesDistributor(
      newFeesDistributor: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHoldingPosition(
      newHoldingPosition: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      newPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategistPayoutAddress(
      payout: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategistPerformanceCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategistPlatformCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawType(
      newWithdrawType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapPositions(
      index1: PromiseOrValue<BigNumberish>,
      index2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustPosition(
      position: PromiseOrValue<string>,
      positionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawType(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "DepositLimitChanged(uint256,uint256)"(
      oldLimit?: null,
      newLimit?: null
    ): DepositLimitChangedEventFilter;
    DepositLimitChanged(
      oldLimit?: null,
      newLimit?: null
    ): DepositLimitChangedEventFilter;

    "FeesDistributorChanged(bytes32,bytes32)"(
      oldFeesDistributor?: null,
      newFeesDistributor?: null
    ): FeesDistributorChangedEventFilter;
    FeesDistributorChanged(
      oldFeesDistributor?: null,
      newFeesDistributor?: null
    ): FeesDistributorChangedEventFilter;

    "HighWatermarkReset(uint256)"(
      newHighWatermark?: null
    ): HighWatermarkResetEventFilter;
    HighWatermarkReset(newHighWatermark?: null): HighWatermarkResetEventFilter;

    "HoldingPositionChanged(address,address)"(
      oldPosition?: PromiseOrValue<string> | null,
      newPosition?: PromiseOrValue<string> | null
    ): HoldingPositionChangedEventFilter;
    HoldingPositionChanged(
      oldPosition?: PromiseOrValue<string> | null,
      newPosition?: PromiseOrValue<string> | null
    ): HoldingPositionChangedEventFilter;

    "LiquidityLimitChanged(uint256,uint256)"(
      oldLimit?: null,
      newLimit?: null
    ): LiquidityLimitChangedEventFilter;
    LiquidityLimitChanged(
      oldLimit?: null,
      newLimit?: null
    ): LiquidityLimitChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PerformanceFeeChanged(uint64,uint64)"(
      oldPerformanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeChangedEventFilter;
    PerformanceFeeChanged(
      oldPerformanceFee?: null,
      newPerformanceFee?: null
    ): PerformanceFeeChangedEventFilter;

    "PlatformFeeChanged(uint64,uint64)"(
      oldPlatformFee?: null,
      newPlatformFee?: null
    ): PlatformFeeChangedEventFilter;
    PlatformFeeChanged(
      oldPlatformFee?: null,
      newPlatformFee?: null
    ): PlatformFeeChangedEventFilter;

    "PositionAdded(address,uint256)"(
      position?: PromiseOrValue<string> | null,
      index?: null
    ): PositionAddedEventFilter;
    PositionAdded(
      position?: PromiseOrValue<string> | null,
      index?: null
    ): PositionAddedEventFilter;

    "PositionRemoved(address,uint256)"(
      position?: PromiseOrValue<string> | null,
      index?: null
    ): PositionRemovedEventFilter;
    PositionRemoved(
      position?: PromiseOrValue<string> | null,
      index?: null
    ): PositionRemovedEventFilter;

    "PositionReplaced(address,address,uint256)"(
      oldPosition?: PromiseOrValue<string> | null,
      newPosition?: PromiseOrValue<string> | null,
      index?: null
    ): PositionReplacedEventFilter;
    PositionReplaced(
      oldPosition?: PromiseOrValue<string> | null,
      newPosition?: PromiseOrValue<string> | null,
      index?: null
    ): PositionReplacedEventFilter;

    "PositionSwapped(address,address,uint256,uint256)"(
      newPosition1?: PromiseOrValue<string> | null,
      newPosition2?: PromiseOrValue<string> | null,
      index1?: null,
      index2?: null
    ): PositionSwappedEventFilter;
    PositionSwapped(
      newPosition1?: PromiseOrValue<string> | null,
      newPosition2?: PromiseOrValue<string> | null,
      index1?: null,
      index2?: null
    ): PositionSwappedEventFilter;

    "PulledFromPosition(address,uint256)"(
      position?: PromiseOrValue<string> | null,
      amount?: null
    ): PulledFromPositionEventFilter;
    PulledFromPosition(
      position?: PromiseOrValue<string> | null,
      amount?: null
    ): PulledFromPositionEventFilter;

    "Rebalance(address,address,uint256,uint256)"(
      fromPosition?: PromiseOrValue<string> | null,
      toPosition?: PromiseOrValue<string> | null,
      assetsFrom?: null,
      assetsTo?: null
    ): RebalanceEventFilter;
    Rebalance(
      fromPosition?: PromiseOrValue<string> | null,
      toPosition?: PromiseOrValue<string> | null,
      assetsFrom?: null,
      assetsTo?: null
    ): RebalanceEventFilter;

    "SendFees(uint256,uint256)"(
      feesInSharesRedeemed?: null,
      feesInAssetsSent?: null
    ): SendFeesEventFilter;
    SendFees(
      feesInSharesRedeemed?: null,
      feesInAssetsSent?: null
    ): SendFeesEventFilter;

    "ShutdownChanged(bool)"(isShutdown?: null): ShutdownChangedEventFilter;
    ShutdownChanged(isShutdown?: null): ShutdownChangedEventFilter;

    "StrategistPayoutAddressChanged(address,address)"(
      oldPayoutAddress?: null,
      newPayoutAddress?: null
    ): StrategistPayoutAddressChangedEventFilter;
    StrategistPayoutAddressChanged(
      oldPayoutAddress?: null,
      newPayoutAddress?: null
    ): StrategistPayoutAddressChangedEventFilter;

    "StrategistPerformanceCutChanged(uint64,uint64)"(
      oldPerformanceCut?: null,
      newPerformanceCut?: null
    ): StrategistPerformanceCutChangedEventFilter;
    StrategistPerformanceCutChanged(
      oldPerformanceCut?: null,
      newPerformanceCut?: null
    ): StrategistPerformanceCutChangedEventFilter;

    "StrategistPlatformCutChanged(uint64,uint64)"(
      oldPlatformCut?: null,
      newPlatformCut?: null
    ): StrategistPlatformCutChangedEventFilter;
    StrategistPlatformCutChanged(
      oldPlatformCut?: null,
      newPlatformCut?: null
    ): StrategistPlatformCutChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;

    "TrustChanged(address,bool)"(
      position?: PromiseOrValue<string> | null,
      isTrusted?: null
    ): TrustChangedEventFilter;
    TrustChanged(
      position?: PromiseOrValue<string> | null,
      isTrusted?: null
    ): TrustChangedEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    "WithdrawTypeChanged(uint8,uint8)"(
      oldType?: null,
      newType?: null
    ): WithdrawTypeChangedEventFilter;
    WithdrawTypeChanged(
      oldType?: null,
      newType?: null
    ): WithdrawTypeChangedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_CUT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERFORMANCE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_POSITIONS(overrides?: CallOverrides): Promise<BigNumber>;

    addPosition(
      index: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    distrustPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeData(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionType(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositions(overrides?: CallOverrides): Promise<BigNumber>;

    holdingPosition(overrides?: CallOverrides): Promise<BigNumber>;

    initiateShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPositionUsed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    isTrusted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastAccrual(overrides?: CallOverrides): Promise<BigNumber>;

    liftShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityLimit(overrides?: CallOverrides): Promise<BigNumber>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    popPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalance(
      fromPosition: PromiseOrValue<string>,
      toPosition: PromiseOrValue<string>,
      assetsFrom: PromiseOrValue<BigNumberish>,
      exchange: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    removePosition(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replacePosition(
      index: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetHighWatermark(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeesDistributor(
      newFeesDistributor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHoldingPosition(
      newHoldingPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      newPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategistPayoutAddress(
      payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategistPerformanceCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategistPlatformCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawType(
      newWithdrawType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapPositions(
      index1: PromiseOrValue<BigNumberish>,
      index2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustPosition(
      position: PromiseOrValue<string>,
      positionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawType(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_CUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PERFORMANCE_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PLATFORM_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_POSITIONS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPosition(
      index: PromiseOrValue<BigNumberish>,
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distrustPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionType(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holdingPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPositionUsed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrusted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAccrual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liftShutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDeposit(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMint(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    popPosition(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      shares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      assets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushPosition(
      position: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalance(
      fromPosition: PromiseOrValue<string>,
      toPosition: PromiseOrValue<string>,
      assetsFrom: PromiseOrValue<BigNumberish>,
      exchange: PromiseOrValue<BigNumberish>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      shares: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePosition(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replacePosition(
      index: PromiseOrValue<BigNumberish>,
      newPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetHighWatermark(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeesDistributor(
      newFeesDistributor: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHoldingPosition(
      newHoldingPosition: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityLimit(
      newLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      newPerformanceFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      newPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategistPayoutAddress(
      payout: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategistPerformanceCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategistPlatformCut(
      cut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawType(
      newWithdrawType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapPositions(
      index1: PromiseOrValue<BigNumberish>,
      index2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustPosition(
      position: PromiseOrValue<string>,
      positionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assets: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
